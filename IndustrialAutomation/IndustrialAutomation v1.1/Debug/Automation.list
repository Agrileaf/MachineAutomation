
Automation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004df8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fd8  08004fd8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004fd8  08004fd8  00014fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fe0  08004fe0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fe0  08004fe0  00014fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fe4  08004fe4  00014fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  20000010  08004ff8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  08004ff8  000206a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014124  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a88  00000000  00000000  00034164  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001188  00000000  00000000  00036bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001010  00000000  00000000  00037d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026e00  00000000  00000000  00038d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f4e5  00000000  00000000  0005fb88  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f2198  00000000  00000000  0006f06d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161205  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004870  00000000  00000000  00161280  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004fa8 	.word	0x08004fa8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08004fa8 	.word	0x08004fa8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a55      	ldr	r2, [pc, #340]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d116      	bne.n	8000548 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		if(Step_A1)
 800051a:	4b55      	ldr	r3, [pc, #340]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d003      	beq.n	800052a <HAL_TIM_PeriodElapsedCallback+0x22>
		{
			Step_A2=true;
 8000522:	4b54      	ldr	r3, [pc, #336]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000524:	2201      	movs	r2, #1
 8000526:	701a      	strb	r2, [r3, #0]
 8000528:	e00e      	b.n	8000548 <HAL_TIM_PeriodElapsedCallback+0x40>
		}
		else if(Step_A3)
 800052a:	4b53      	ldr	r3, [pc, #332]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d003      	beq.n	800053a <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			Step_A4=true;
 8000532:	4b52      	ldr	r3, [pc, #328]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000534:	2201      	movs	r2, #1
 8000536:	701a      	strb	r2, [r3, #0]
 8000538:	e006      	b.n	8000548 <HAL_TIM_PeriodElapsedCallback+0x40>
		}
		else if(Step_A5)
 800053a:	4b51      	ldr	r3, [pc, #324]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d002      	beq.n	8000548 <HAL_TIM_PeriodElapsedCallback+0x40>
		{
			Step_A6=true;
 8000542:	4b50      	ldr	r3, [pc, #320]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000544:	2201      	movs	r2, #1
 8000546:	701a      	strb	r2, [r3, #0]
		}
	}

	if(htim->Instance == TIM2)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000550:	d116      	bne.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		if(Step_B1)
 8000552:	4b4d      	ldr	r3, [pc, #308]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d003      	beq.n	8000562 <HAL_TIM_PeriodElapsedCallback+0x5a>
		{
			Step_B2=true;
 800055a:	4b4c      	ldr	r3, [pc, #304]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x184>)
 800055c:	2201      	movs	r2, #1
 800055e:	701a      	strb	r2, [r3, #0]
 8000560:	e00e      	b.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x78>
		}
		else if(Step_B3)
 8000562:	4b4b      	ldr	r3, [pc, #300]	; (8000690 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d003      	beq.n	8000572 <HAL_TIM_PeriodElapsedCallback+0x6a>
		{
			Step_B4=true;
 800056a:	4b4a      	ldr	r3, [pc, #296]	; (8000694 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800056c:	2201      	movs	r2, #1
 800056e:	701a      	strb	r2, [r3, #0]
 8000570:	e006      	b.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x78>
		}
		else if(Step_B5)
 8000572:	4b49      	ldr	r3, [pc, #292]	; (8000698 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d002      	beq.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x78>
		{
			Step_B6=true;
 800057a:	4b48      	ldr	r3, [pc, #288]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x194>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
		}

	}

	if(htim->Instance == TIM3)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a46      	ldr	r2, [pc, #280]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d116      	bne.n	80005b8 <HAL_TIM_PeriodElapsedCallback+0xb0>
	{
		if(Step_C1)
 800058a:	4b46      	ldr	r3, [pc, #280]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d003      	beq.n	800059a <HAL_TIM_PeriodElapsedCallback+0x92>
		{
			Step_C2=true;
 8000592:	4b45      	ldr	r3, [pc, #276]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]
 8000598:	e00e      	b.n	80005b8 <HAL_TIM_PeriodElapsedCallback+0xb0>
		}
		else if(Step_C3)
 800059a:	4b44      	ldr	r3, [pc, #272]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d003      	beq.n	80005aa <HAL_TIM_PeriodElapsedCallback+0xa2>
		{
			Step_C4=true;
 80005a2:	4b43      	ldr	r3, [pc, #268]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	701a      	strb	r2, [r3, #0]
 80005a8:	e006      	b.n	80005b8 <HAL_TIM_PeriodElapsedCallback+0xb0>
		}
		else if(Step_C5)
 80005aa:	4b42      	ldr	r3, [pc, #264]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <HAL_TIM_PeriodElapsedCallback+0xb0>
		{
			Step_C6=true;
 80005b2:	4b41      	ldr	r3, [pc, #260]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
		}

	}

	if(htim->Instance == TIM4)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a3f      	ldr	r2, [pc, #252]	; (80006bc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d116      	bne.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0xe8>
	{
		if(Step_D1)
 80005c2:	4b3f      	ldr	r3, [pc, #252]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d003      	beq.n	80005d2 <HAL_TIM_PeriodElapsedCallback+0xca>
		{
			Step_D2=true;
 80005ca:	4b3e      	ldr	r3, [pc, #248]	; (80006c4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
 80005d0:	e00e      	b.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0xe8>
		}
		else if(Step_D3)
 80005d2:	4b3d      	ldr	r3, [pc, #244]	; (80006c8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d003      	beq.n	80005e2 <HAL_TIM_PeriodElapsedCallback+0xda>
		{
			Step_D4=true;
 80005da:	4b3c      	ldr	r3, [pc, #240]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80005dc:	2201      	movs	r2, #1
 80005de:	701a      	strb	r2, [r3, #0]
 80005e0:	e006      	b.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0xe8>
		}
		else if(Step_D5)
 80005e2:	4b3b      	ldr	r3, [pc, #236]	; (80006d0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d002      	beq.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0xe8>
		{
			Step_D6=true;
 80005ea:	4b3a      	ldr	r3, [pc, #232]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if(htim->Instance == TIM5)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d116      	bne.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x120>
	{
		if(Step_E1)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d003      	beq.n	800060a <HAL_TIM_PeriodElapsedCallback+0x102>
		{
		    Step_E2=true;
 8000602:	4b37      	ldr	r3, [pc, #220]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
 8000608:	e00e      	b.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x120>
		}
		else if(Step_E3)
 800060a:	4b36      	ldr	r3, [pc, #216]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d003      	beq.n	800061a <HAL_TIM_PeriodElapsedCallback+0x112>
		{
			Step_E4=true;
 8000612:	4b35      	ldr	r3, [pc, #212]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000614:	2201      	movs	r2, #1
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	e006      	b.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x120>
		}
		else if(Step_E5)
 800061a:	4b34      	ldr	r3, [pc, #208]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d002      	beq.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x120>
		{
			Step_E6=true;
 8000622:	4b33      	ldr	r3, [pc, #204]	; (80006f0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
		}
	}

	if(htim->Instance == TIM6)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a31      	ldr	r2, [pc, #196]	; (80006f4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d116      	bne.n	8000660 <HAL_TIM_PeriodElapsedCallback+0x158>
	{
		if(Step_F1)
 8000632:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <HAL_TIM_PeriodElapsedCallback+0x13a>
		{
			Step_F2=true;
 800063a:	4b30      	ldr	r3, [pc, #192]	; (80006fc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800063c:	2201      	movs	r2, #1
 800063e:	701a      	strb	r2, [r3, #0]
		else if(Step_F5)
		{
			Step_F6=true;
		}
	}
}
 8000640:	e00e      	b.n	8000660 <HAL_TIM_PeriodElapsedCallback+0x158>
		else if(Step_F3)
 8000642:	4b2f      	ldr	r3, [pc, #188]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d003      	beq.n	8000652 <HAL_TIM_PeriodElapsedCallback+0x14a>
			Step_F4=true;
 800064a:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800064c:	2201      	movs	r2, #1
 800064e:	701a      	strb	r2, [r3, #0]
}
 8000650:	e006      	b.n	8000660 <HAL_TIM_PeriodElapsedCallback+0x158>
		else if(Step_F5)
 8000652:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <HAL_TIM_PeriodElapsedCallback+0x158>
			Step_F6=true;
 800065a:	4b2c      	ldr	r3, [pc, #176]	; (800070c <HAL_TIM_PeriodElapsedCallback+0x204>)
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	40010000 	.word	0x40010000
 8000670:	2000002c 	.word	0x2000002c
 8000674:	20000032 	.word	0x20000032
 8000678:	20000038 	.word	0x20000038
 800067c:	2000003e 	.word	0x2000003e
 8000680:	20000044 	.word	0x20000044
 8000684:	2000004a 	.word	0x2000004a
 8000688:	2000002d 	.word	0x2000002d
 800068c:	20000033 	.word	0x20000033
 8000690:	20000039 	.word	0x20000039
 8000694:	2000003f 	.word	0x2000003f
 8000698:	20000045 	.word	0x20000045
 800069c:	2000004b 	.word	0x2000004b
 80006a0:	40000400 	.word	0x40000400
 80006a4:	2000002e 	.word	0x2000002e
 80006a8:	20000034 	.word	0x20000034
 80006ac:	2000003a 	.word	0x2000003a
 80006b0:	20000040 	.word	0x20000040
 80006b4:	20000046 	.word	0x20000046
 80006b8:	2000004c 	.word	0x2000004c
 80006bc:	40000800 	.word	0x40000800
 80006c0:	2000002f 	.word	0x2000002f
 80006c4:	20000035 	.word	0x20000035
 80006c8:	2000003b 	.word	0x2000003b
 80006cc:	20000041 	.word	0x20000041
 80006d0:	20000047 	.word	0x20000047
 80006d4:	2000004d 	.word	0x2000004d
 80006d8:	40000c00 	.word	0x40000c00
 80006dc:	20000030 	.word	0x20000030
 80006e0:	20000036 	.word	0x20000036
 80006e4:	2000003c 	.word	0x2000003c
 80006e8:	20000042 	.word	0x20000042
 80006ec:	20000048 	.word	0x20000048
 80006f0:	2000004e 	.word	0x2000004e
 80006f4:	40001000 	.word	0x40001000
 80006f8:	20000031 	.word	0x20000031
 80006fc:	20000037 	.word	0x20000037
 8000700:	2000003d 	.word	0x2000003d
 8000704:	20000043 	.word	0x20000043
 8000708:	20000049 	.word	0x20000049
 800070c:	2000004f 	.word	0x2000004f

08000710 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_ETH_Init+0x78>)
 8000716:	4a1d      	ldr	r2, [pc, #116]	; (800078c <MX_ETH_Init+0x7c>)
 8000718:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800071a:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_ETH_Init+0x78>)
 800071c:	2201      	movs	r2, #1
 800071e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <MX_ETH_Init+0x78>)
 8000722:	2200      	movs	r2, #0
 8000724:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_ETH_Init+0x78>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_ETH_Init+0x78>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	3301      	adds	r3, #1
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_ETH_Init+0x78>)
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	3302      	adds	r3, #2
 800073e:	22e1      	movs	r2, #225	; 0xe1
 8000740:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_ETH_Init+0x78>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	3303      	adds	r3, #3
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_ETH_Init+0x78>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	3304      	adds	r3, #4
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_ETH_Init+0x78>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	3305      	adds	r3, #5
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_ETH_Init+0x78>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_ETH_Init+0x78>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_ETH_Init+0x78>)
 800076e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000772:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_ETH_Init+0x78>)
 8000776:	f001 f91b 	bl	80019b0 <HAL_ETH_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000780:	f000 faba 	bl	8000cf8 <Error_Handler>
  }

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000050 	.word	0x20000050
 800078c:	40028000 	.word	0x40028000

08000790 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08e      	sub	sp, #56	; 0x38
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a4e      	ldr	r2, [pc, #312]	; (80008e8 <HAL_ETH_MspInit+0x158>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	f040 8096 	bne.w	80008e0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80007b4:	4b4d      	ldr	r3, [pc, #308]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	4a4c      	ldr	r2, [pc, #304]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 80007ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007be:	6313      	str	r3, [r2, #48]	; 0x30
 80007c0:	4b4a      	ldr	r3, [pc, #296]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007c8:	623b      	str	r3, [r7, #32]
 80007ca:	6a3b      	ldr	r3, [r7, #32]
 80007cc:	4b47      	ldr	r3, [pc, #284]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	4a46      	ldr	r2, [pc, #280]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 80007d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007d6:	6313      	str	r3, [r2, #48]	; 0x30
 80007d8:	4b44      	ldr	r3, [pc, #272]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80007e0:	61fb      	str	r3, [r7, #28]
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	4b41      	ldr	r3, [pc, #260]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	4a40      	ldr	r2, [pc, #256]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 80007ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80007ee:	6313      	str	r3, [r2, #48]	; 0x30
 80007f0:	4b3e      	ldr	r3, [pc, #248]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 80007f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80007f8:	61bb      	str	r3, [r7, #24]
 80007fa:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fc:	4b3b      	ldr	r3, [pc, #236]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 80007fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000800:	4a3a      	ldr	r2, [pc, #232]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 8000802:	f043 0304 	orr.w	r3, r3, #4
 8000806:	6313      	str	r3, [r2, #48]	; 0x30
 8000808:	4b38      	ldr	r3, [pc, #224]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 800080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080c:	f003 0304 	and.w	r3, r3, #4
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b35      	ldr	r3, [pc, #212]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 8000816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000818:	4a34      	ldr	r2, [pc, #208]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	6313      	str	r3, [r2, #48]	; 0x30
 8000820:	4b32      	ldr	r3, [pc, #200]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 8000822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082c:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 800082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000830:	4a2e      	ldr	r2, [pc, #184]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 8000832:	f043 0302 	orr.w	r3, r3, #2
 8000836:	6313      	str	r3, [r2, #48]	; 0x30
 8000838:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 800083a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083c:	f003 0302 	and.w	r3, r3, #2
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000844:	4b29      	ldr	r3, [pc, #164]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 8000846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000848:	4a28      	ldr	r2, [pc, #160]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 800084a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800084e:	6313      	str	r3, [r2, #48]	; 0x30
 8000850:	4b26      	ldr	r3, [pc, #152]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800085c:	2332      	movs	r3, #50	; 0x32
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000868:	2303      	movs	r3, #3
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800086c:	230b      	movs	r3, #11
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000874:	4619      	mov	r1, r3
 8000876:	481e      	ldr	r0, [pc, #120]	; (80008f0 <HAL_ETH_MspInit+0x160>)
 8000878:	f001 fd06 	bl	8002288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800087c:	2386      	movs	r3, #134	; 0x86
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000888:	2303      	movs	r3, #3
 800088a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800088c:	230b      	movs	r3, #11
 800088e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000894:	4619      	mov	r1, r3
 8000896:	4817      	ldr	r0, [pc, #92]	; (80008f4 <HAL_ETH_MspInit+0x164>)
 8000898:	f001 fcf6 	bl	8002288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800089c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ae:	230b      	movs	r3, #11
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	4619      	mov	r1, r3
 80008b8:	480f      	ldr	r0, [pc, #60]	; (80008f8 <HAL_ETH_MspInit+0x168>)
 80008ba:	f001 fce5 	bl	8002288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008d0:	230b      	movs	r3, #11
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d8:	4619      	mov	r1, r3
 80008da:	4808      	ldr	r0, [pc, #32]	; (80008fc <HAL_ETH_MspInit+0x16c>)
 80008dc:	f001 fcd4 	bl	8002288 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80008e0:	bf00      	nop
 80008e2:	3738      	adds	r7, #56	; 0x38
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40028000 	.word	0x40028000
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020800 	.word	0x40020800
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40020400 	.word	0x40020400
 80008fc:	40021800 	.word	0x40021800

08000900 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08e      	sub	sp, #56	; 0x38
 8000904:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b83      	ldr	r3, [pc, #524]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a82      	ldr	r2, [pc, #520]	; (8000b24 <MX_GPIO_Init+0x224>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b80      	ldr	r3, [pc, #512]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	623b      	str	r3, [r7, #32]
 800092c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	4b7d      	ldr	r3, [pc, #500]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a7c      	ldr	r2, [pc, #496]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b7a      	ldr	r3, [pc, #488]	; (8000b24 <MX_GPIO_Init+0x224>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000942:	61fb      	str	r3, [r7, #28]
 8000944:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b77      	ldr	r3, [pc, #476]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a76      	ldr	r2, [pc, #472]	; (8000b24 <MX_GPIO_Init+0x224>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b74      	ldr	r3, [pc, #464]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
 800095c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	4b71      	ldr	r3, [pc, #452]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a70      	ldr	r2, [pc, #448]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b6e      	ldr	r3, [pc, #440]	; (8000b24 <MX_GPIO_Init+0x224>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000976:	4b6b      	ldr	r3, [pc, #428]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a6a      	ldr	r2, [pc, #424]	; (8000b24 <MX_GPIO_Init+0x224>)
 800097c:	f043 0320 	orr.w	r3, r3, #32
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b68      	ldr	r3, [pc, #416]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098e:	4b65      	ldr	r3, [pc, #404]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a64      	ldr	r2, [pc, #400]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b62      	ldr	r3, [pc, #392]	; (8000b24 <MX_GPIO_Init+0x224>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a6:	4b5f      	ldr	r3, [pc, #380]	; (8000b24 <MX_GPIO_Init+0x224>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a5e      	ldr	r2, [pc, #376]	; (8000b24 <MX_GPIO_Init+0x224>)
 80009ac:	f043 0310 	orr.w	r3, r3, #16
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b5c      	ldr	r3, [pc, #368]	; (8000b24 <MX_GPIO_Init+0x224>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0310 	and.w	r3, r3, #16
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	4b59      	ldr	r3, [pc, #356]	; (8000b24 <MX_GPIO_Init+0x224>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a58      	ldr	r2, [pc, #352]	; (8000b24 <MX_GPIO_Init+0x224>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b56      	ldr	r3, [pc, #344]	; (8000b24 <MX_GPIO_Init+0x224>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f244 0181 	movw	r1, #16513	; 0x4081
 80009dc:	4852      	ldr	r0, [pc, #328]	; (8000b28 <MX_GPIO_Init+0x228>)
 80009de:	f001 fdfd 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ALARM_Pin|USB_PowerSwitchOn_Pin|CYLINDER_1F_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f240 2141 	movw	r1, #577	; 0x241
 80009e8:	4850      	ldr	r0, [pc, #320]	; (8000b2c <MX_GPIO_Init+0x22c>)
 80009ea:	f001 fdf7 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MOTOR_1_Pin|MOTOR_2_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80009f4:	484e      	ldr	r0, [pc, #312]	; (8000b30 <MX_GPIO_Init+0x230>)
 80009f6:	f001 fdf1 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CYLINDER_6R_Pin|CYLINDER_6F_Pin|CYLINDER_5R_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000a00:	484c      	ldr	r0, [pc, #304]	; (8000b34 <MX_GPIO_Init+0x234>)
 8000a02:	f001 fdeb 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CYLINDER_5F_Pin|CYLINDER_4R_Pin|CYLINDER_4F_Pin|CYLINDER_3R_Pin 
 8000a06:	2200      	movs	r2, #0
 8000a08:	21ff      	movs	r1, #255	; 0xff
 8000a0a:	484b      	ldr	r0, [pc, #300]	; (8000b38 <MX_GPIO_Init+0x238>)
 8000a0c:	f001 fde6 	bl	80025dc <HAL_GPIO_WritePin>
                          |CYLINDER_3F_Pin|CYLINDER_2R_Pin|CYLINDER_2F_Pin|CYLINDER_1R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a10:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a26:	4619      	mov	r1, r3
 8000a28:	483f      	ldr	r0, [pc, #252]	; (8000b28 <MX_GPIO_Init+0x228>)
 8000a2a:	f001 fc2d 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = EMERGENCY_STOP_Pin|AUTOMATIC_MODE_Pin|MANUAL_MODE_Pin;
 8000a2e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a34:	4b41      	ldr	r3, [pc, #260]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a40:	4619      	mov	r1, r3
 8000a42:	483f      	ldr	r0, [pc, #252]	; (8000b40 <MX_GPIO_Init+0x240>)
 8000a44:	f001 fc20 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ALARM_Pin|USB_PowerSwitchOn_Pin|CYLINDER_1F_Pin;
 8000a48:	f240 2341 	movw	r3, #577	; 0x241
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4832      	ldr	r0, [pc, #200]	; (8000b2c <MX_GPIO_Init+0x22c>)
 8000a62:	f001 fc11 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = MOTOR_1_Pin|MOTOR_2_Pin;
 8000a66:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	482c      	ldr	r0, [pc, #176]	; (8000b30 <MX_GPIO_Init+0x230>)
 8000a80:	f001 fc02 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin */
  GPIO_InitStruct.Pin = PEDAL_A1_Pin|PEDAL_A2_Pin|PEDAL_B1_Pin|PEDAL_B2_Pin 
 8000a84:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
                          |PEDAL_C1_Pin|PEDAL_C2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	4825      	ldr	r0, [pc, #148]	; (8000b30 <MX_GPIO_Init+0x230>)
 8000a9a:	f001 fbf5 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PEDAL_F2_Pin|PEDAL_F1_Pin|PEDAL_E2_Pin|PEDAL_E1_Pin;
 8000a9e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4821      	ldr	r0, [pc, #132]	; (8000b38 <MX_GPIO_Init+0x238>)
 8000ab4:	f001 fbe8 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = PEDAL_D2_Pin|PEDAL_D1_Pin|USB_OverCurrent_Pin;
 8000ab8:	2398      	movs	r3, #152	; 0x98
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4818      	ldr	r0, [pc, #96]	; (8000b2c <MX_GPIO_Init+0x22c>)
 8000acc:	f001 fbdc 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CYLINDER_6R_Pin|CYLINDER_6F_Pin|CYLINDER_5R_Pin;
 8000ad0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4812      	ldr	r0, [pc, #72]	; (8000b34 <MX_GPIO_Init+0x234>)
 8000aea:	f001 fbcd 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CYLINDER_5F_Pin|CYLINDER_4R_Pin|CYLINDER_4F_Pin|CYLINDER_3R_Pin 
 8000aee:	23ff      	movs	r3, #255	; 0xff
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
                          |CYLINDER_3F_Pin|CYLINDER_2R_Pin|CYLINDER_2F_Pin|CYLINDER_1R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	4619      	mov	r1, r3
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <MX_GPIO_Init+0x238>)
 8000b06:	f001 fbbf 	bl	8002288 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2028      	movs	r0, #40	; 0x28
 8000b10:	f000 ff17 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b14:	2028      	movs	r0, #40	; 0x28
 8000b16:	f000 ff30 	bl	800197a <HAL_NVIC_EnableIRQ>

}
 8000b1a:	bf00      	nop
 8000b1c:	3738      	adds	r7, #56	; 0x38
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020400 	.word	0x40020400
 8000b2c:	40021800 	.word	0x40021800
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40020800 	.word	0x40020800
 8000b38:	40020c00 	.word	0x40020c00
 8000b3c:	10110000 	.word	0x10110000
 8000b40:	40021400 	.word	0x40021400

08000b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b48:	f000 fda1 	bl	800168e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4c:	f000 f840 	bl	8000bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b50:	f7ff fed6 	bl	8000900 <MX_GPIO_Init>
  MX_ETH_Init();
 8000b54:	f7ff fddc 	bl	8000710 <MX_ETH_Init>
  MX_TIM1_Init();
 8000b58:	f000 f9ec 	bl	8000f34 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b5c:	f000 fa3c 	bl	8000fd8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b60:	f000 fa86 	bl	8001070 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b64:	f000 fad2 	bl	800110c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000b68:	f000 fb1e 	bl	80011a8 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8000b6c:	f000 fc68 	bl	8001440 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b70:	f000 fcda 	bl	8001528 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8000b74:	f000 fb66 	bl	8001244 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
 while(1)
 {
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	4813      	ldr	r0, [pc, #76]	; (8000bcc <main+0x88>)
 8000b7e:	f001 fd2d 	bl	80025dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	4811      	ldr	r0, [pc, #68]	; (8000bcc <main+0x88>)
 8000b88:	f001 fd28 	bl	80025dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b92:	480e      	ldr	r0, [pc, #56]	; (8000bcc <main+0x88>)
 8000b94:	f001 fd22 	bl	80025dc <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000b98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b9c:	f000 fdd4 	bl	8001748 <HAL_Delay>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	4809      	ldr	r0, [pc, #36]	; (8000bcc <main+0x88>)
 8000ba6:	f001 fd19 	bl	80025dc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2180      	movs	r1, #128	; 0x80
 8000bae:	4807      	ldr	r0, [pc, #28]	; (8000bcc <main+0x88>)
 8000bb0:	f001 fd14 	bl	80025dc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bba:	4804      	ldr	r0, [pc, #16]	; (8000bcc <main+0x88>)
 8000bbc:	f001 fd0e 	bl	80025dc <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000bc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bc4:	f000 fdc0 	bl	8001748 <HAL_Delay>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000bc8:	e7d6      	b.n	8000b78 <main+0x34>
 8000bca:	bf00      	nop
 8000bcc:	40020400 	.word	0x40020400

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b0b4      	sub	sp, #208	; 0xd0
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bda:	2230      	movs	r2, #48	; 0x30
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f004 f9da 	bl	8004f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	2284      	movs	r2, #132	; 0x84
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f004 f9cb 	bl	8004f98 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b3a      	ldr	r3, [pc, #232]	; (8000cec <SystemClock_Config+0x11c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a39      	ldr	r2, [pc, #228]	; (8000cec <SystemClock_Config+0x11c>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b37      	ldr	r3, [pc, #220]	; (8000cec <SystemClock_Config+0x11c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c1a:	4b35      	ldr	r3, [pc, #212]	; (8000cf0 <SystemClock_Config+0x120>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a34      	ldr	r2, [pc, #208]	; (8000cf0 <SystemClock_Config+0x120>)
 8000c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <SystemClock_Config+0x120>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c32:	2302      	movs	r3, #2
 8000c34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c3e:	2310      	movs	r3, #16
 8000c40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c44:	2302      	movs	r3, #2
 8000c46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c50:	2308      	movs	r3, #8
 8000c52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000c56:	23d8      	movs	r3, #216	; 0xd8
 8000c58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8000c62:	230c      	movs	r3, #12
 8000c64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c68:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 fe73 	bl	8002958 <HAL_RCC_OscConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c78:	f000 f83e 	bl	8000cf8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c7c:	f001 fe1c 	bl	80028b8 <HAL_PWREx_EnableOverDrive>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000c86:	f000 f837 	bl	8000cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c90:	2302      	movs	r3, #2
 8000c92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000cac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000cb0:	2107      	movs	r1, #7
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f002 f8c0 	bl	8002e38 <HAL_RCC_ClockConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000cbe:	f000 f81b 	bl	8000cf8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <SystemClock_Config+0x124>)
 8000cc4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd0:	f107 0308 	add.w	r3, r7, #8
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f002 faa3 	bl	8003220 <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000ce0:	f000 f80a 	bl	8000cf8 <Error_Handler>
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	37d0      	adds	r7, #208	; 0xd0
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40007000 	.word	0x40007000
 8000cf4:	00200100 	.word	0x00200100

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_MspInit+0x44>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_MspInit+0x44>)
 8000d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_MspInit+0x44>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_MspInit+0x44>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_MspInit+0x44>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_MspInit+0x44>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da4:	f000 fcb0 	bl	8001708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}

08000dac <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000db2:	f002 fe4e 	bl	8003a52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000198 	.word	0x20000198

08000dc0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000dc6:	f002 fe44 	bl	8003a52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000198 	.word	0x20000198

08000dd4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000dda:	f002 fe3a 	bl	8003a52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000198 	.word	0x20000198

08000de8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <TIM1_CC_IRQHandler+0x10>)
 8000dee:	f002 fe30 	bl	8003a52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000198 	.word	0x20000198

08000dfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <TIM2_IRQHandler+0x10>)
 8000e02:	f002 fe26 	bl	8003a52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200001d8 	.word	0x200001d8

08000e10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <TIM3_IRQHandler+0x10>)
 8000e16:	f002 fe1c 	bl	8003a52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000118 	.word	0x20000118

08000e24 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <TIM4_IRQHandler+0x10>)
 8000e2a:	f002 fe12 	bl	8003a52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000098 	.word	0x20000098

08000e38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e40:	f001 fbe6 	bl	8002610 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000e44:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e48:	f001 fbe2 	bl	8002610 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000e4c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000e50:	f001 fbde 	bl	8002610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <TIM5_IRQHandler+0x10>)
 8000e5e:	f002 fdf8 	bl	8003a52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200000d8 	.word	0x200000d8

08000e6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <TIM6_DAC_IRQHandler+0x10>)
 8000e72:	f002 fdee 	bl	8003a52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000158 	.word	0x20000158

08000e80 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EMERGENCY_STOP_Pin)
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e90:	d103      	bne.n	8000e9a <HAL_GPIO_EXTI_Callback+0x1a>
	{
		Machine_Mode=EMERGENCY_STOP;
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000e94:	2203      	movs	r2, #3
 8000e96:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == MANUAL_MODE_Pin)
	{
		Machine_Mode=MANUAL;
	}
}
 8000e98:	e00e      	b.n	8000eb8 <HAL_GPIO_EXTI_Callback+0x38>
	else if(GPIO_Pin == AUTOMATIC_MODE_Pin)
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ea0:	d103      	bne.n	8000eaa <HAL_GPIO_EXTI_Callback+0x2a>
		Machine_Mode=AUTOMATIC;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	701a      	strb	r2, [r3, #0]
}
 8000ea8:	e006      	b.n	8000eb8 <HAL_GPIO_EXTI_Callback+0x38>
	else if(GPIO_Pin == MANUAL_MODE_Pin)
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000eb0:	d102      	bne.n	8000eb8 <HAL_GPIO_EXTI_Callback+0x38>
		Machine_Mode=MANUAL;
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	701a      	strb	r2, [r3, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	20000000 	.word	0x20000000

08000ec8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <SystemInit+0x5c>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed2:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <SystemInit+0x5c>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <SystemInit+0x60>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a11      	ldr	r2, [pc, #68]	; (8000f28 <SystemInit+0x60>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <SystemInit+0x60>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <SystemInit+0x60>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	490d      	ldr	r1, [pc, #52]	; (8000f28 <SystemInit+0x60>)
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <SystemInit+0x64>)
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <SystemInit+0x60>)
 8000efc:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <SystemInit+0x68>)
 8000efe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <SystemInit+0x60>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <SystemInit+0x60>)
 8000f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <SystemInit+0x60>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <SystemInit+0x5c>)
 8000f14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f18:	609a      	str	r2, [r3, #8]
#endif
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	fef6ffff 	.word	0xfef6ffff
 8000f30:	24003010 	.word	0x24003010

08000f34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 8000f52:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000f54:	4a1f      	ldr	r2, [pc, #124]	; (8000fd4 <MX_TIM1_Init+0xa0>)
 8000f56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f76:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f7c:	4814      	ldr	r0, [pc, #80]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000f7e:	f002 fd3d 	bl	80039fc <HAL_TIM_Base_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f88:	f7ff feb6 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f92:	f107 0310 	add.w	r3, r7, #16
 8000f96:	4619      	mov	r1, r3
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000f9a:	f002 fe79 	bl	8003c90 <HAL_TIM_ConfigClockSource>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000fa4:	f7ff fea8 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000fba:	f003 f885 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000fc4:	f7ff fe98 	bl	8000cf8 <Error_Handler>
  }

}
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000198 	.word	0x20000198
 8000fd4:	40010000 	.word	0x40010000

08000fd8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fde:	f107 0310 	add.w	r3, r7, #16
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <MX_TIM2_Init+0x94>)
 8000ff8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ffc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	; (800106c <MX_TIM2_Init+0x94>)
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <MX_TIM2_Init+0x94>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_TIM2_Init+0x94>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <MX_TIM2_Init+0x94>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_TIM2_Init+0x94>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800101c:	4813      	ldr	r0, [pc, #76]	; (800106c <MX_TIM2_Init+0x94>)
 800101e:	f002 fced 	bl	80039fc <HAL_TIM_Base_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001028:	f7ff fe66 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001030:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	4619      	mov	r1, r3
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <MX_TIM2_Init+0x94>)
 800103a:	f002 fe29 	bl	8003c90 <HAL_TIM_ConfigClockSource>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001044:	f7ff fe58 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_TIM2_Init+0x94>)
 8001056:	f003 f837 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001060:	f7ff fe4a 	bl	8000cf8 <Error_Handler>
  }

}
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200001d8 	.word	0x200001d8

08001070 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 800108e:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <MX_TIM3_Init+0x94>)
 8001090:	4a1d      	ldr	r2, [pc, #116]	; (8001108 <MX_TIM3_Init+0x98>)
 8001092:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <MX_TIM3_Init+0x94>)
 8001096:	2200      	movs	r2, #0
 8001098:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_TIM3_Init+0x94>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_TIM3_Init+0x94>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MX_TIM3_Init+0x94>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_TIM3_Init+0x94>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010b2:	4814      	ldr	r0, [pc, #80]	; (8001104 <MX_TIM3_Init+0x94>)
 80010b4:	f002 fca2 	bl	80039fc <HAL_TIM_Base_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80010be:	f7ff fe1b 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4619      	mov	r1, r3
 80010ce:	480d      	ldr	r0, [pc, #52]	; (8001104 <MX_TIM3_Init+0x94>)
 80010d0:	f002 fdde 	bl	8003c90 <HAL_TIM_ConfigClockSource>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80010da:	f7ff fe0d 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <MX_TIM3_Init+0x94>)
 80010ec:	f002 ffec 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80010f6:	f7ff fdff 	bl	8000cf8 <Error_Handler>
  }

}
 80010fa:	bf00      	nop
 80010fc:	3720      	adds	r7, #32
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000118 	.word	0x20000118
 8001108:	40000400 	.word	0x40000400

0800110c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <MX_TIM4_Init+0x94>)
 800112c:	4a1d      	ldr	r2, [pc, #116]	; (80011a4 <MX_TIM4_Init+0x98>)
 800112e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <MX_TIM4_Init+0x94>)
 8001132:	2200      	movs	r2, #0
 8001134:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_TIM4_Init+0x94>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <MX_TIM4_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_TIM4_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <MX_TIM4_Init+0x94>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800114e:	4814      	ldr	r0, [pc, #80]	; (80011a0 <MX_TIM4_Init+0x94>)
 8001150:	f002 fc54 	bl	80039fc <HAL_TIM_Base_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800115a:	f7ff fdcd 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001162:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	4619      	mov	r1, r3
 800116a:	480d      	ldr	r0, [pc, #52]	; (80011a0 <MX_TIM4_Init+0x94>)
 800116c:	f002 fd90 	bl	8003c90 <HAL_TIM_ConfigClockSource>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001176:	f7ff fdbf 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	4619      	mov	r1, r3
 8001186:	4806      	ldr	r0, [pc, #24]	; (80011a0 <MX_TIM4_Init+0x94>)
 8001188:	f002 ff9e 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001192:	f7ff fdb1 	bl	8000cf8 <Error_Handler>
  }

}
 8001196:	bf00      	nop
 8001198:	3720      	adds	r7, #32
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000098 	.word	0x20000098
 80011a4:	40000800 	.word	0x40000800

080011a8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <MX_TIM5_Init+0x94>)
 80011c8:	4a1d      	ldr	r2, [pc, #116]	; (8001240 <MX_TIM5_Init+0x98>)
 80011ca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80011cc:	4b1b      	ldr	r3, [pc, #108]	; (800123c <MX_TIM5_Init+0x94>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	4b1a      	ldr	r3, [pc, #104]	; (800123c <MX_TIM5_Init+0x94>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <MX_TIM5_Init+0x94>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_TIM5_Init+0x94>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_TIM5_Init+0x94>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011ea:	4814      	ldr	r0, [pc, #80]	; (800123c <MX_TIM5_Init+0x94>)
 80011ec:	f002 fc06 	bl	80039fc <HAL_TIM_Base_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80011f6:	f7ff fd7f 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	4619      	mov	r1, r3
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <MX_TIM5_Init+0x94>)
 8001208:	f002 fd42 	bl	8003c90 <HAL_TIM_ConfigClockSource>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001212:	f7ff fd71 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	4619      	mov	r1, r3
 8001222:	4806      	ldr	r0, [pc, #24]	; (800123c <MX_TIM5_Init+0x94>)
 8001224:	f002 ff50 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800122e:	f7ff fd63 	bl	8000cf8 <Error_Handler>
  }

}
 8001232:	bf00      	nop
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200000d8 	.word	0x200000d8
 8001240:	40000c00 	.word	0x40000c00

08001244 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <MX_TIM6_Init+0x64>)
 8001256:	4a15      	ldr	r2, [pc, #84]	; (80012ac <MX_TIM6_Init+0x68>)
 8001258:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800125a:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <MX_TIM6_Init+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_TIM6_Init+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <MX_TIM6_Init+0x64>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_TIM6_Init+0x64>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001272:	480d      	ldr	r0, [pc, #52]	; (80012a8 <MX_TIM6_Init+0x64>)
 8001274:	f002 fbc2 	bl	80039fc <HAL_TIM_Base_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800127e:	f7ff fd3b 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <MX_TIM6_Init+0x64>)
 8001290:	f002 ff1a 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800129a:	f7ff fd2d 	bl	8000cf8 <Error_Handler>
  }

}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000158 	.word	0x20000158
 80012ac:	40001000 	.word	0x40001000

080012b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a5a      	ldr	r2, [pc, #360]	; (8001428 <HAL_TIM_Base_MspInit+0x178>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d12c      	bne.n	800131c <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012c2:	4b5a      	ldr	r3, [pc, #360]	; (800142c <HAL_TIM_Base_MspInit+0x17c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a59      	ldr	r2, [pc, #356]	; (800142c <HAL_TIM_Base_MspInit+0x17c>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b57      	ldr	r3, [pc, #348]	; (800142c <HAL_TIM_Base_MspInit+0x17c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2018      	movs	r0, #24
 80012e0:	f000 fb2f 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80012e4:	2018      	movs	r0, #24
 80012e6:	f000 fb48 	bl	800197a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	2019      	movs	r0, #25
 80012f0:	f000 fb27 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012f4:	2019      	movs	r0, #25
 80012f6:	f000 fb40 	bl	800197a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	201a      	movs	r0, #26
 8001300:	f000 fb1f 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001304:	201a      	movs	r0, #26
 8001306:	f000 fb38 	bl	800197a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	201b      	movs	r0, #27
 8001310:	f000 fb17 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001314:	201b      	movs	r0, #27
 8001316:	f000 fb30 	bl	800197a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800131a:	e080      	b.n	800141e <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM2)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001324:	d114      	bne.n	8001350 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001326:	4b41      	ldr	r3, [pc, #260]	; (800142c <HAL_TIM_Base_MspInit+0x17c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a40      	ldr	r2, [pc, #256]	; (800142c <HAL_TIM_Base_MspInit+0x17c>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b3e      	ldr	r3, [pc, #248]	; (800142c <HAL_TIM_Base_MspInit+0x17c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	201c      	movs	r0, #28
 8001344:	f000 fafd 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001348:	201c      	movs	r0, #28
 800134a:	f000 fb16 	bl	800197a <HAL_NVIC_EnableIRQ>
}
 800134e:	e066      	b.n	800141e <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM3)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a36      	ldr	r2, [pc, #216]	; (8001430 <HAL_TIM_Base_MspInit+0x180>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d114      	bne.n	8001384 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800135a:	4b34      	ldr	r3, [pc, #208]	; (800142c <HAL_TIM_Base_MspInit+0x17c>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	4a33      	ldr	r2, [pc, #204]	; (800142c <HAL_TIM_Base_MspInit+0x17c>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	6413      	str	r3, [r2, #64]	; 0x40
 8001366:	4b31      	ldr	r3, [pc, #196]	; (800142c <HAL_TIM_Base_MspInit+0x17c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	201d      	movs	r0, #29
 8001378:	f000 fae3 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800137c:	201d      	movs	r0, #29
 800137e:	f000 fafc 	bl	800197a <HAL_NVIC_EnableIRQ>
}
 8001382:	e04c      	b.n	800141e <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM4)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a2a      	ldr	r2, [pc, #168]	; (8001434 <HAL_TIM_Base_MspInit+0x184>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d114      	bne.n	80013b8 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <HAL_TIM_Base_MspInit+0x17c>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a26      	ldr	r2, [pc, #152]	; (800142c <HAL_TIM_Base_MspInit+0x17c>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_TIM_Base_MspInit+0x17c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	201e      	movs	r0, #30
 80013ac:	f000 fac9 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013b0:	201e      	movs	r0, #30
 80013b2:	f000 fae2 	bl	800197a <HAL_NVIC_EnableIRQ>
}
 80013b6:	e032      	b.n	800141e <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM5)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a1e      	ldr	r2, [pc, #120]	; (8001438 <HAL_TIM_Base_MspInit+0x188>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d114      	bne.n	80013ec <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <HAL_TIM_Base_MspInit+0x17c>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a19      	ldr	r2, [pc, #100]	; (800142c <HAL_TIM_Base_MspInit+0x17c>)
 80013c8:	f043 0308 	orr.w	r3, r3, #8
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <HAL_TIM_Base_MspInit+0x17c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	2032      	movs	r0, #50	; 0x32
 80013e0:	f000 faaf 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80013e4:	2032      	movs	r0, #50	; 0x32
 80013e6:	f000 fac8 	bl	800197a <HAL_NVIC_EnableIRQ>
}
 80013ea:	e018      	b.n	800141e <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM6)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a12      	ldr	r2, [pc, #72]	; (800143c <HAL_TIM_Base_MspInit+0x18c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d113      	bne.n	800141e <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <HAL_TIM_Base_MspInit+0x17c>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a0c      	ldr	r2, [pc, #48]	; (800142c <HAL_TIM_Base_MspInit+0x17c>)
 80013fc:	f043 0310 	orr.w	r3, r3, #16
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_TIM_Base_MspInit+0x17c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	2036      	movs	r0, #54	; 0x36
 8001414:	f000 fa95 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001418:	2036      	movs	r0, #54	; 0x36
 800141a:	f000 faae 	bl	800197a <HAL_NVIC_EnableIRQ>
}
 800141e:	bf00      	nop
 8001420:	3720      	adds	r7, #32
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40010000 	.word	0x40010000
 800142c:	40023800 	.word	0x40023800
 8001430:	40000400 	.word	0x40000400
 8001434:	40000800 	.word	0x40000800
 8001438:	40000c00 	.word	0x40000c00
 800143c:	40001000 	.word	0x40001000

08001440 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_USART3_UART_Init+0x58>)
 8001446:	4a15      	ldr	r2, [pc, #84]	; (800149c <MX_USART3_UART_Init+0x5c>)
 8001448:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <MX_USART3_UART_Init+0x58>)
 800144c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001450:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_USART3_UART_Init+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_USART3_UART_Init+0x58>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_USART3_UART_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_USART3_UART_Init+0x58>)
 8001466:	220c      	movs	r2, #12
 8001468:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_USART3_UART_Init+0x58>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_USART3_UART_Init+0x58>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_USART3_UART_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_USART3_UART_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_USART3_UART_Init+0x58>)
 8001484:	f002 fe9a 	bl	80041bc <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800148e:	f7ff fc33 	bl	8000cf8 <Error_Handler>
  }

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000218 	.word	0x20000218
 800149c:	40004800 	.word	0x40004800

080014a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a17      	ldr	r2, [pc, #92]	; (800151c <HAL_UART_MspInit+0x7c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d128      	bne.n	8001514 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <HAL_UART_MspInit+0x80>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a16      	ldr	r2, [pc, #88]	; (8001520 <HAL_UART_MspInit+0x80>)
 80014c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <HAL_UART_MspInit+0x80>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_UART_MspInit+0x80>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a10      	ldr	r2, [pc, #64]	; (8001520 <HAL_UART_MspInit+0x80>)
 80014e0:	f043 0308 	orr.w	r3, r3, #8
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_UART_MspInit+0x80>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001504:	2307      	movs	r3, #7
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <HAL_UART_MspInit+0x84>)
 8001510:	f000 feba 	bl	8002288 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	; 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40004800 	.word	0x40004800
 8001520:	40023800 	.word	0x40023800
 8001524:	40020c00 	.word	0x40020c00

08001528 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800152e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001532:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001536:	2206      	movs	r2, #6
 8001538:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800153c:	2202      	movs	r2, #2
 800153e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001548:	2202      	movs	r2, #2
 800154a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800154e:	2201      	movs	r2, #1
 8001550:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001560:	2201      	movs	r2, #1
 8001562:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800156c:	f001 f868 	bl	8002640 <HAL_PCD_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001576:	f7ff fbbf 	bl	8000cf8 <Error_Handler>
  }

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000298 	.word	0x20000298

08001584 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015a4:	d141      	bne.n	800162a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <HAL_PCD_MspInit+0xb0>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a22      	ldr	r2, [pc, #136]	; (8001634 <HAL_PCD_MspInit+0xb0>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_PCD_MspInit+0xb0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80015be:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015d0:	230a      	movs	r3, #10
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4817      	ldr	r0, [pc, #92]	; (8001638 <HAL_PCD_MspInit+0xb4>)
 80015dc:	f000 fe54 	bl	8002288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	4810      	ldr	r0, [pc, #64]	; (8001638 <HAL_PCD_MspInit+0xb4>)
 80015f6:	f000 fe47 	bl	8002288 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <HAL_PCD_MspInit+0xb0>)
 80015fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fe:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <HAL_PCD_MspInit+0xb0>)
 8001600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001604:	6353      	str	r3, [r2, #52]	; 0x34
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_PCD_MspInit+0xb0>)
 8001608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800160a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_PCD_MspInit+0xb0>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	4a07      	ldr	r2, [pc, #28]	; (8001634 <HAL_PCD_MspInit+0xb0>)
 8001618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800161c:	6453      	str	r3, [r2, #68]	; 0x44
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_PCD_MspInit+0xb0>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800162a:	bf00      	nop
 800162c:	3728      	adds	r7, #40	; 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	40020000 	.word	0x40020000

0800163c <Reset_Handler>:
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001674 <LoopFillZerobss+0x14>
 8001640:	2100      	movs	r1, #0
 8001642:	e003      	b.n	800164c <LoopCopyDataInit>

08001644 <CopyDataInit>:
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <LoopFillZerobss+0x18>)
 8001646:	585b      	ldr	r3, [r3, r1]
 8001648:	5043      	str	r3, [r0, r1]
 800164a:	3104      	adds	r1, #4

0800164c <LoopCopyDataInit>:
 800164c:	480b      	ldr	r0, [pc, #44]	; (800167c <LoopFillZerobss+0x1c>)
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <LoopFillZerobss+0x20>)
 8001650:	1842      	adds	r2, r0, r1
 8001652:	429a      	cmp	r2, r3
 8001654:	d3f6      	bcc.n	8001644 <CopyDataInit>
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <LoopFillZerobss+0x24>)
 8001658:	e002      	b.n	8001660 <LoopFillZerobss>

0800165a <FillZerobss>:
 800165a:	2300      	movs	r3, #0
 800165c:	f842 3b04 	str.w	r3, [r2], #4

08001660 <LoopFillZerobss>:
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <LoopFillZerobss+0x28>)
 8001662:	429a      	cmp	r2, r3
 8001664:	d3f9      	bcc.n	800165a <FillZerobss>
 8001666:	f7ff fc2f 	bl	8000ec8 <SystemInit>
 800166a:	f003 fc71 	bl	8004f50 <__libc_init_array>
 800166e:	f7ff fa69 	bl	8000b44 <main>
 8001672:	4770      	bx	lr
 8001674:	20050000 	.word	0x20050000
 8001678:	08004fe8 	.word	0x08004fe8
 800167c:	20000000 	.word	0x20000000
 8001680:	20000010 	.word	0x20000010
 8001684:	20000010 	.word	0x20000010
 8001688:	200006a0 	.word	0x200006a0

0800168c <ADC_IRQHandler>:
 800168c:	e7fe      	b.n	800168c <ADC_IRQHandler>

0800168e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001692:	2003      	movs	r0, #3
 8001694:	f000 f94a 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001698:	2000      	movs	r0, #0
 800169a:	f000 f805 	bl	80016a8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800169e:	f7ff fb33 	bl	8000d08 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x54>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x58>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016be:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f965 	bl	8001996 <HAL_SYSTICK_Config>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00e      	b.n	80016f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d80a      	bhi.n	80016f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016dc:	2200      	movs	r2, #0
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f000 f92d 	bl	8001942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e8:	4a06      	ldr	r2, [pc, #24]	; (8001704 <HAL_InitTick+0x5c>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e000      	b.n	80016f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000004 	.word	0x20000004
 8001700:	2000000c 	.word	0x2000000c
 8001704:	20000008 	.word	0x20000008

08001708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x20>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x24>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4413      	add	r3, r2
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_IncTick+0x24>)
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	2000000c 	.word	0x2000000c
 800172c:	2000069c 	.word	0x2000069c

08001730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <HAL_GetTick+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	2000069c 	.word	0x2000069c

08001748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001750:	f7ff ffee 	bl	8001730 <HAL_GetTick>
 8001754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001760:	d005      	beq.n	800176e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_Delay+0x40>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800176e:	bf00      	nop
 8001770:	f7ff ffde 	bl	8001730 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	429a      	cmp	r2, r3
 800177e:	d8f7      	bhi.n	8001770 <HAL_Delay+0x28>
  {
  }
}
 8001780:	bf00      	nop
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2000000c 	.word	0x2000000c

0800178c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <__NVIC_SetPriorityGrouping+0x40>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <__NVIC_SetPriorityGrouping+0x40>)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	60d3      	str	r3, [r2, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00
 80017d0:	05fa0000 	.word	0x05fa0000

080017d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db0b      	blt.n	800181a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 021f 	and.w	r2, r3, #31
 8001808:	4907      	ldr	r1, [pc, #28]	; (8001828 <__NVIC_EnableIRQ+0x38>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	2001      	movs	r0, #1
 8001812:	fa00 f202 	lsl.w	r2, r0, r2
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000e100 	.word	0xe000e100

0800182c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0a      	blt.n	8001856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <__NVIC_SetPriority+0x4c>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	440b      	add	r3, r1
 8001850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001854:	e00a      	b.n	800186c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4908      	ldr	r1, [pc, #32]	; (800187c <__NVIC_SetPriority+0x50>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3b04      	subs	r3, #4
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	440b      	add	r3, r1
 800186a:	761a      	strb	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f1c3 0307 	rsb	r3, r3, #7
 800189a:	2b04      	cmp	r3, #4
 800189c:	bf28      	it	cs
 800189e:	2304      	movcs	r3, #4
 80018a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3304      	adds	r3, #4
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d902      	bls.n	80018b0 <NVIC_EncodePriority+0x30>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3b03      	subs	r3, #3
 80018ae:	e000      	b.n	80018b2 <NVIC_EncodePriority+0x32>
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	401a      	ands	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4313      	orrs	r3, r2
         );
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f8:	d301      	bcc.n	80018fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <SysTick_Config+0x40>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	210f      	movs	r1, #15
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f7ff ff8e 	bl	800182c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <SysTick_Config+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SysTick_Config+0x40>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff29 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001954:	f7ff ff3e 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 8001958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7ff ff8e 	bl	8001880 <NVIC_EncodePriority>
 8001964:	4602      	mov	r2, r0
 8001966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff5d 	bl	800182c <__NVIC_SetPriority>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff31 	bl	80017f0 <__NVIC_EnableIRQ>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ffa2 	bl	80018e8 <SysTick_Config>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80019c0:	4ba9      	ldr	r3, [pc, #676]	; (8001c68 <HAL_ETH_Init+0x2b8>)
 80019c2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e183      	b.n	8001cde <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d106      	bne.n	80019f0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7fe fed0 	bl	8000790 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f0:	4b9e      	ldr	r3, [pc, #632]	; (8001c6c <HAL_ETH_Init+0x2bc>)
 80019f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f4:	4a9d      	ldr	r2, [pc, #628]	; (8001c6c <HAL_ETH_Init+0x2bc>)
 80019f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fa:	6453      	str	r3, [r2, #68]	; 0x44
 80019fc:	4b9b      	ldr	r3, [pc, #620]	; (8001c6c <HAL_ETH_Init+0x2bc>)
 80019fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a08:	4b99      	ldr	r3, [pc, #612]	; (8001c70 <HAL_ETH_Init+0x2c0>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4a98      	ldr	r2, [pc, #608]	; (8001c70 <HAL_ETH_Init+0x2c0>)
 8001a0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a12:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a14:	4b96      	ldr	r3, [pc, #600]	; (8001c70 <HAL_ETH_Init+0x2c0>)
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4994      	ldr	r1, [pc, #592]	; (8001c70 <HAL_ETH_Init+0x2c0>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 0201 	orr.w	r2, r2, #1
 8001a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a38:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a3a:	f7ff fe79 	bl	8001730 <HAL_GetTick>
 8001a3e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001a40:	e011      	b.n	8001a66 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001a42:	f7ff fe75 	bl	8001730 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a50:	d909      	bls.n	8001a66 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2203      	movs	r2, #3
 8001a56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e13b      	b.n	8001cde <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1e4      	bne.n	8001a42 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f023 031c 	bic.w	r3, r3, #28
 8001a86:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a88:	f001 fb96 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 8001a8c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4a78      	ldr	r2, [pc, #480]	; (8001c74 <HAL_ETH_Init+0x2c4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d908      	bls.n	8001aa8 <HAL_ETH_Init+0xf8>
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	4a77      	ldr	r2, [pc, #476]	; (8001c78 <HAL_ETH_Init+0x2c8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d804      	bhi.n	8001aa8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f043 0308 	orr.w	r3, r3, #8
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e027      	b.n	8001af8 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	4a73      	ldr	r2, [pc, #460]	; (8001c78 <HAL_ETH_Init+0x2c8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d908      	bls.n	8001ac2 <HAL_ETH_Init+0x112>
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	4a72      	ldr	r2, [pc, #456]	; (8001c7c <HAL_ETH_Init+0x2cc>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d804      	bhi.n	8001ac2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f043 030c 	orr.w	r3, r3, #12
 8001abe:	61fb      	str	r3, [r7, #28]
 8001ac0:	e01a      	b.n	8001af8 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	4a6d      	ldr	r2, [pc, #436]	; (8001c7c <HAL_ETH_Init+0x2cc>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d903      	bls.n	8001ad2 <HAL_ETH_Init+0x122>
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4a6c      	ldr	r2, [pc, #432]	; (8001c80 <HAL_ETH_Init+0x2d0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d911      	bls.n	8001af6 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4a6a      	ldr	r2, [pc, #424]	; (8001c80 <HAL_ETH_Init+0x2d0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d908      	bls.n	8001aec <HAL_ETH_Init+0x13c>
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4a69      	ldr	r2, [pc, #420]	; (8001c84 <HAL_ETH_Init+0x2d4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d804      	bhi.n	8001aec <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	e005      	b.n	8001af8 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f043 0310 	orr.w	r3, r3, #16
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	e000      	b.n	8001af8 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001af6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	69fa      	ldr	r2, [r7, #28]
 8001afe:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001b00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b04:	2100      	movs	r1, #0
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f956 	bl	8001db8 <HAL_ETH_WritePHYRegister>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00b      	beq.n	8001b2a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001b16:	6939      	ldr	r1, [r7, #16]
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f9b3 	bl	8001e84 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e0d9      	b.n	8001cde <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001b2a:	20ff      	movs	r0, #255	; 0xff
 8001b2c:	f7ff fe0c 	bl	8001748 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80a7 	beq.w	8001c88 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b3a:	f7ff fdf9 	bl	8001730 <HAL_GetTick>
 8001b3e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	461a      	mov	r2, r3
 8001b46:	2101      	movs	r1, #1
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f8cd 	bl	8001ce8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001b4e:	f7ff fdef 	bl	8001730 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d90f      	bls.n	8001b80 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001b64:	6939      	ldr	r1, [r7, #16]
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f98c 	bl	8001e84 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e0ae      	b.n	8001cde <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0da      	beq.n	8001b40 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001b8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b8e:	2100      	movs	r1, #0
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f911 	bl	8001db8 <HAL_ETH_WritePHYRegister>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00b      	beq.n	8001bb4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ba0:	6939      	ldr	r1, [r7, #16]
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f96e 	bl	8001e84 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e094      	b.n	8001cde <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bb4:	f7ff fdbc 	bl	8001730 <HAL_GetTick>
 8001bb8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f890 	bl	8001ce8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001bc8:	f7ff fdb2 	bl	8001730 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d90f      	bls.n	8001bfa <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001bde:	6939      	ldr	r1, [r7, #16]
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f94f 	bl	8001e84 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e071      	b.n	8001cde <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0da      	beq.n	8001bba <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001c04:	f107 030c 	add.w	r3, r7, #12
 8001c08:	461a      	mov	r2, r3
 8001c0a:	211f      	movs	r1, #31
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f86b 	bl	8001ce8 <HAL_ETH_ReadPHYRegister>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00b      	beq.n	8001c30 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c1c:	6939      	ldr	r1, [r7, #16]
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f930 	bl	8001e84 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e056      	b.n	8001cde <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0310 	and.w	r3, r3, #16
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d004      	beq.n	8001c44 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	e002      	b.n	8001c4a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	e037      	b.n	8001ccc <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	e032      	b.n	8001ccc <HAL_ETH_Init+0x31c>
 8001c66:	bf00      	nop
 8001c68:	03938700 	.word	0x03938700
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40013800 	.word	0x40013800
 8001c74:	01312cff 	.word	0x01312cff
 8001c78:	02160ebf 	.word	0x02160ebf
 8001c7c:	039386ff 	.word	0x039386ff
 8001c80:	05f5e0ff 	.word	0x05f5e0ff
 8001c84:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	085b      	lsrs	r3, r3, #1
 8001c96:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f889 	bl	8001db8 <HAL_ETH_WritePHYRegister>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00b      	beq.n	8001cc4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001cb0:	6939      	ldr	r1, [r7, #16]
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8e6 	bl	8001e84 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e00c      	b.n	8001cde <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001cc4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001cc8:	f7ff fd3e 	bl	8001748 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001ccc:	6939      	ldr	r1, [r7, #16]
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f8d8 	bl	8001e84 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3720      	adds	r7, #32
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop

08001ce8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b82      	cmp	r3, #130	; 0x82
 8001d08:	d101      	bne.n	8001d0e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e050      	b.n	8001db0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2282      	movs	r2, #130	; 0x82
 8001d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f003 031c 	and.w	r3, r3, #28
 8001d24:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8a1b      	ldrh	r3, [r3, #16]
 8001d2a:	02db      	lsls	r3, r3, #11
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001d34:	897b      	ldrh	r3, [r7, #10]
 8001d36:	019b      	lsls	r3, r3, #6
 8001d38:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f023 0302 	bic.w	r3, r3, #2
 8001d48:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d5a:	f7ff fce9 	bl	8001730 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d60:	e015      	b.n	8001d8e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001d62:	f7ff fce5 	bl	8001730 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d70:	d309      	bcc.n	8001d86 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e014      	b.n	8001db0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1e4      	bne.n	8001d62 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b42      	cmp	r3, #66	; 0x42
 8001dd8:	d101      	bne.n	8001dde <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e04e      	b.n	8001e7c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2242      	movs	r2, #66	; 0x42
 8001de2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f003 031c 	and.w	r3, r3, #28
 8001df4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8a1b      	ldrh	r3, [r3, #16]
 8001dfa:	02db      	lsls	r3, r3, #11
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001e04:	897b      	ldrh	r3, [r7, #10]
 8001e06:	019b      	lsls	r3, r3, #6
 8001e08:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e34:	f7ff fc7c 	bl	8001730 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e3a:	e015      	b.n	8001e68 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001e3c:	f7ff fc78 	bl	8001730 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4a:	d309      	bcc.n	8001e60 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e00d      	b.n	8001e7c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1e4      	bne.n	8001e3c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b0b0      	sub	sp, #192	; 0xc0
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d007      	beq.n	8001eaa <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ea0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ea8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d103      	bne.n	8001ed2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ece:	663b      	str	r3, [r7, #96]	; 0x60
 8001ed0:	e001      	b.n	8001ed6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001ed6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eda:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001f58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f5c:	4bab      	ldr	r3, [pc, #684]	; (800220c <ETH_MACDMAConfig+0x388>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001f68:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001f6c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001f70:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001f76:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001f78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001f7a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001f7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001f7e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001f84:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001f86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001f88:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001f8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001f8c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001f8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001f90:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001f94:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001f98:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001f9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fac:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fb8:	2001      	movs	r0, #1
 8001fba:	f7ff fbc5 	bl	8001748 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fc6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fc8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001fca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fcc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001fce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001fd0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001fd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001fd6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001fdc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001fde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001fe2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001fe8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001fec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001ff4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ff6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002002:	2001      	movs	r0, #1
 8002004:	f7ff fba0 	bl	8001748 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002010:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800201a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002024:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002030:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002034:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002038:	4013      	ands	r3, r2
 800203a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800203e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002042:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002044:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002048:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800204a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800204e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002050:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002054:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800205a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800205c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002060:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002062:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002066:	4313      	orrs	r3, r2
 8002068:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002074:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002080:	2001      	movs	r0, #1
 8002082:	f7ff fb61 	bl	8001748 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800208e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002090:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002094:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020aa:	2001      	movs	r0, #1
 80020ac:	f7ff fb4c 	bl	8001748 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020b8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80020be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020c2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80020c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020cc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80020de:	2304      	movs	r3, #4
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80020e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80020e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020ec:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020f2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020f8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80020fe:	2300      	movs	r3, #0
 8002100:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002102:	2300      	movs	r3, #0
 8002104:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	f241 0318 	movw	r3, #4120	; 0x1018
 800210e:	4413      	add	r3, r2
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002116:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800211a:	4b3d      	ldr	r3, [pc, #244]	; (8002210 <ETH_MACDMAConfig+0x38c>)
 800211c:	4013      	ands	r3, r2
 800211e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002122:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002124:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002126:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002128:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800212a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800212c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800212e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002130:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002132:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002134:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002136:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002138:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800213a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800213e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002140:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002142:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002144:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	f241 0318 	movw	r3, #4120	; 0x1018
 8002156:	4413      	add	r3, r2
 8002158:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800215c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	f241 0318 	movw	r3, #4120	; 0x1018
 8002166:	4413      	add	r3, r2
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800216e:	2001      	movs	r0, #1
 8002170:	f7ff faea 	bl	8001748 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	f241 0318 	movw	r3, #4120	; 0x1018
 800217c:	4413      	add	r3, r2
 800217e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002182:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002188:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800218a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800218c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800218e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002190:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002194:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002198:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800219a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800219c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800219e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ac:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80021bc:	2001      	movs	r0, #1
 80021be:	f7ff fac3 	bl	8001748 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ce:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d10d      	bne.n	80021f4 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	f241 031c 	movw	r3, #4124	; 0x101c
 80021e0:	4413      	add	r3, r2
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6811      	ldr	r1, [r2, #0]
 80021e8:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <ETH_MACDMAConfig+0x390>)
 80021ea:	431a      	orrs	r2, r3
 80021ec:	f241 031c 	movw	r3, #4124	; 0x101c
 80021f0:	440b      	add	r3, r1
 80021f2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	461a      	mov	r2, r3
 80021fa:	2100      	movs	r1, #0
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f80b 	bl	8002218 <ETH_MACAddressConfig>
}
 8002202:	bf00      	nop
 8002204:	37c0      	adds	r7, #192	; 0xc0
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	ff20810f 	.word	0xff20810f
 8002210:	f8de3f23 	.word	0xf8de3f23
 8002214:	00010040 	.word	0x00010040

08002218 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3305      	adds	r3, #5
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	3204      	adds	r2, #4
 8002230:	7812      	ldrb	r2, [r2, #0]
 8002232:	4313      	orrs	r3, r2
 8002234:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	4b11      	ldr	r3, [pc, #68]	; (8002280 <ETH_MACAddressConfig+0x68>)
 800223a:	4413      	add	r3, r2
 800223c:	461a      	mov	r2, r3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3303      	adds	r3, #3
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	061a      	lsls	r2, r3, #24
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3302      	adds	r3, #2
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	041b      	lsls	r3, r3, #16
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3301      	adds	r3, #1
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	021b      	lsls	r3, r3, #8
 800225c:	4313      	orrs	r3, r2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	7812      	ldrb	r2, [r2, #0]
 8002262:	4313      	orrs	r3, r2
 8002264:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <ETH_MACAddressConfig+0x6c>)
 800226a:	4413      	add	r3, r2
 800226c:	461a      	mov	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	6013      	str	r3, [r2, #0]
}
 8002272:	bf00      	nop
 8002274:	371c      	adds	r7, #28
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40028040 	.word	0x40028040
 8002284:	40028044 	.word	0x40028044

08002288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	e175      	b.n	8002594 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80022a8:	2201      	movs	r2, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4013      	ands	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	f040 8164 	bne.w	800258e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x4e>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b12      	cmp	r3, #18
 80022d4:	d123      	bne.n	800231e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	08da      	lsrs	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3208      	adds	r2, #8
 80022de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	220f      	movs	r2, #15
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	691a      	ldr	r2, [r3, #16]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	08da      	lsrs	r2, r3, #3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3208      	adds	r2, #8
 8002318:	69b9      	ldr	r1, [r7, #24]
 800231a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	2203      	movs	r2, #3
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 0203 	and.w	r2, r3, #3
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d00b      	beq.n	8002372 <HAL_GPIO_Init+0xea>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d007      	beq.n	8002372 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002366:	2b11      	cmp	r3, #17
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b12      	cmp	r3, #18
 8002370:	d130      	bne.n	80023d4 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	2203      	movs	r2, #3
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023a8:	2201      	movs	r2, #1
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f003 0201 	and.w	r2, r3, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80be 	beq.w	800258e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002412:	4b65      	ldr	r3, [pc, #404]	; (80025a8 <HAL_GPIO_Init+0x320>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	4a64      	ldr	r2, [pc, #400]	; (80025a8 <HAL_GPIO_Init+0x320>)
 8002418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800241c:	6453      	str	r3, [r2, #68]	; 0x44
 800241e:	4b62      	ldr	r3, [pc, #392]	; (80025a8 <HAL_GPIO_Init+0x320>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800242a:	4a60      	ldr	r2, [pc, #384]	; (80025ac <HAL_GPIO_Init+0x324>)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	3302      	adds	r3, #2
 8002432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	220f      	movs	r2, #15
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a57      	ldr	r2, [pc, #348]	; (80025b0 <HAL_GPIO_Init+0x328>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d037      	beq.n	80024c6 <HAL_GPIO_Init+0x23e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a56      	ldr	r2, [pc, #344]	; (80025b4 <HAL_GPIO_Init+0x32c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d031      	beq.n	80024c2 <HAL_GPIO_Init+0x23a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a55      	ldr	r2, [pc, #340]	; (80025b8 <HAL_GPIO_Init+0x330>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d02b      	beq.n	80024be <HAL_GPIO_Init+0x236>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a54      	ldr	r2, [pc, #336]	; (80025bc <HAL_GPIO_Init+0x334>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d025      	beq.n	80024ba <HAL_GPIO_Init+0x232>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a53      	ldr	r2, [pc, #332]	; (80025c0 <HAL_GPIO_Init+0x338>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d01f      	beq.n	80024b6 <HAL_GPIO_Init+0x22e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a52      	ldr	r2, [pc, #328]	; (80025c4 <HAL_GPIO_Init+0x33c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d019      	beq.n	80024b2 <HAL_GPIO_Init+0x22a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a51      	ldr	r2, [pc, #324]	; (80025c8 <HAL_GPIO_Init+0x340>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d013      	beq.n	80024ae <HAL_GPIO_Init+0x226>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a50      	ldr	r2, [pc, #320]	; (80025cc <HAL_GPIO_Init+0x344>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d00d      	beq.n	80024aa <HAL_GPIO_Init+0x222>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4f      	ldr	r2, [pc, #316]	; (80025d0 <HAL_GPIO_Init+0x348>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d007      	beq.n	80024a6 <HAL_GPIO_Init+0x21e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a4e      	ldr	r2, [pc, #312]	; (80025d4 <HAL_GPIO_Init+0x34c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d101      	bne.n	80024a2 <HAL_GPIO_Init+0x21a>
 800249e:	2309      	movs	r3, #9
 80024a0:	e012      	b.n	80024c8 <HAL_GPIO_Init+0x240>
 80024a2:	230a      	movs	r3, #10
 80024a4:	e010      	b.n	80024c8 <HAL_GPIO_Init+0x240>
 80024a6:	2308      	movs	r3, #8
 80024a8:	e00e      	b.n	80024c8 <HAL_GPIO_Init+0x240>
 80024aa:	2307      	movs	r3, #7
 80024ac:	e00c      	b.n	80024c8 <HAL_GPIO_Init+0x240>
 80024ae:	2306      	movs	r3, #6
 80024b0:	e00a      	b.n	80024c8 <HAL_GPIO_Init+0x240>
 80024b2:	2305      	movs	r3, #5
 80024b4:	e008      	b.n	80024c8 <HAL_GPIO_Init+0x240>
 80024b6:	2304      	movs	r3, #4
 80024b8:	e006      	b.n	80024c8 <HAL_GPIO_Init+0x240>
 80024ba:	2303      	movs	r3, #3
 80024bc:	e004      	b.n	80024c8 <HAL_GPIO_Init+0x240>
 80024be:	2302      	movs	r3, #2
 80024c0:	e002      	b.n	80024c8 <HAL_GPIO_Init+0x240>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <HAL_GPIO_Init+0x240>
 80024c6:	2300      	movs	r3, #0
 80024c8:	69fa      	ldr	r2, [r7, #28]
 80024ca:	f002 0203 	and.w	r2, r2, #3
 80024ce:	0092      	lsls	r2, r2, #2
 80024d0:	4093      	lsls	r3, r2
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024d8:	4934      	ldr	r1, [pc, #208]	; (80025ac <HAL_GPIO_Init+0x324>)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	089b      	lsrs	r3, r3, #2
 80024de:	3302      	adds	r3, #2
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e6:	4b3c      	ldr	r3, [pc, #240]	; (80025d8 <HAL_GPIO_Init+0x350>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800250a:	4a33      	ldr	r2, [pc, #204]	; (80025d8 <HAL_GPIO_Init+0x350>)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002510:	4b31      	ldr	r3, [pc, #196]	; (80025d8 <HAL_GPIO_Init+0x350>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002534:	4a28      	ldr	r2, [pc, #160]	; (80025d8 <HAL_GPIO_Init+0x350>)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800253a:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <HAL_GPIO_Init+0x350>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800255e:	4a1e      	ldr	r2, [pc, #120]	; (80025d8 <HAL_GPIO_Init+0x350>)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002564:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <HAL_GPIO_Init+0x350>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002588:	4a13      	ldr	r2, [pc, #76]	; (80025d8 <HAL_GPIO_Init+0x350>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3301      	adds	r3, #1
 8002592:	61fb      	str	r3, [r7, #28]
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	2b0f      	cmp	r3, #15
 8002598:	f67f ae86 	bls.w	80022a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800259c:	bf00      	nop
 800259e:	3724      	adds	r7, #36	; 0x24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40013800 	.word	0x40013800
 80025b0:	40020000 	.word	0x40020000
 80025b4:	40020400 	.word	0x40020400
 80025b8:	40020800 	.word	0x40020800
 80025bc:	40020c00 	.word	0x40020c00
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40021400 	.word	0x40021400
 80025c8:	40021800 	.word	0x40021800
 80025cc:	40021c00 	.word	0x40021c00
 80025d0:	40022000 	.word	0x40022000
 80025d4:	40022400 	.word	0x40022400
 80025d8:	40013c00 	.word	0x40013c00

080025dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	807b      	strh	r3, [r7, #2]
 80025e8:	4613      	mov	r3, r2
 80025ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025ec:	787b      	ldrb	r3, [r7, #1]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025f2:	887a      	ldrh	r2, [r7, #2]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80025f8:	e003      	b.n	8002602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80025fa:	887b      	ldrh	r3, [r7, #2]
 80025fc:	041a      	lsls	r2, r3, #16
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	619a      	str	r2, [r3, #24]
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800261a:	4b08      	ldr	r3, [pc, #32]	; (800263c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	4013      	ands	r3, r2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d006      	beq.n	8002634 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002626:	4a05      	ldr	r2, [pc, #20]	; (800263c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fc26 	bl	8000e80 <HAL_GPIO_EXTI_Callback>
  }
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40013c00 	.word	0x40013c00

08002640 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002642:	b08f      	sub	sp, #60	; 0x3c
 8002644:	af0a      	add	r7, sp, #40	; 0x28
 8002646:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e10a      	b.n	8002868 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe ff8c 	bl	8001584 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2203      	movs	r2, #3
 8002670:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f002 fa03 	bl	8004a84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	687e      	ldr	r6, [r7, #4]
 8002686:	466d      	mov	r5, sp
 8002688:	f106 0410 	add.w	r4, r6, #16
 800268c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800268e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002694:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002698:	e885 0003 	stmia.w	r5, {r0, r1}
 800269c:	1d33      	adds	r3, r6, #4
 800269e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026a0:	6838      	ldr	r0, [r7, #0]
 80026a2:	f002 f997 	bl	80049d4 <USB_CoreInit>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0d7      	b.n	8002868 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f002 f9f1 	bl	8004aa6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	73fb      	strb	r3, [r7, #15]
 80026c8:	e04a      	b.n	8002760 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026ca:	7bfa      	ldrb	r2, [r7, #15]
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	1a9b      	subs	r3, r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	333d      	adds	r3, #61	; 0x3d
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	333c      	adds	r3, #60	; 0x3c
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026f2:	7bfa      	ldrb	r2, [r7, #15]
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	b298      	uxth	r0, r3
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	1a9b      	subs	r3, r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	3342      	adds	r3, #66	; 0x42
 8002706:	4602      	mov	r2, r0
 8002708:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	333f      	adds	r3, #63	; 0x3f
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	3344      	adds	r3, #68	; 0x44
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	3348      	adds	r3, #72	; 0x48
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002746:	7bfa      	ldrb	r2, [r7, #15]
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	1a9b      	subs	r3, r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	3350      	adds	r3, #80	; 0x50
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	3301      	adds	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	429a      	cmp	r2, r3
 8002768:	d3af      	bcc.n	80026ca <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800276a:	2300      	movs	r3, #0
 800276c:	73fb      	strb	r3, [r7, #15]
 800276e:	e044      	b.n	80027fa <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002798:	7bfa      	ldrb	r2, [r7, #15]
 800279a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800279c:	7bfa      	ldrb	r2, [r7, #15]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	3301      	adds	r3, #1
 80027f8:	73fb      	strb	r3, [r7, #15]
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	429a      	cmp	r2, r3
 8002802:	d3b5      	bcc.n	8002770 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	603b      	str	r3, [r7, #0]
 800280a:	687e      	ldr	r6, [r7, #4]
 800280c:	466d      	mov	r5, sp
 800280e:	f106 0410 	add.w	r4, r6, #16
 8002812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800281a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800281e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002822:	1d33      	adds	r3, r6, #4
 8002824:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002826:	6838      	ldr	r0, [r7, #0]
 8002828:	f002 f968 	bl	8004afc <USB_DevInit>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d005      	beq.n	800283e <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2202      	movs	r2, #2
 8002836:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e014      	b.n	8002868 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	2b01      	cmp	r3, #1
 8002854:	d102      	bne.n	800285c <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f80a 	bl	8002870 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f002 fb28 	bl	8004eb6 <USB_DevDisconnect>

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002870 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800289e:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_PCDEx_ActivateLPM+0x44>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	10000003 	.word	0x10000003

080028b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80028c2:	4b23      	ldr	r3, [pc, #140]	; (8002950 <HAL_PWREx_EnableOverDrive+0x98>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a22      	ldr	r2, [pc, #136]	; (8002950 <HAL_PWREx_EnableOverDrive+0x98>)
 80028c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
 80028ce:	4b20      	ldr	r3, [pc, #128]	; (8002950 <HAL_PWREx_EnableOverDrive+0x98>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80028da:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028e6:	f7fe ff23 	bl	8001730 <HAL_GetTick>
 80028ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028ec:	e009      	b.n	8002902 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028ee:	f7fe ff1f 	bl	8001730 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028fc:	d901      	bls.n	8002902 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e022      	b.n	8002948 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002902:	4b14      	ldr	r3, [pc, #80]	; (8002954 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290e:	d1ee      	bne.n	80028ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002910:	4b10      	ldr	r3, [pc, #64]	; (8002954 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a0f      	ldr	r2, [pc, #60]	; (8002954 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800291c:	f7fe ff08 	bl	8001730 <HAL_GetTick>
 8002920:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002922:	e009      	b.n	8002938 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002924:	f7fe ff04 	bl	8001730 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002932:	d901      	bls.n	8002938 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e007      	b.n	8002948 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_PWREx_EnableOverDrive+0x9c>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002940:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002944:	d1ee      	bne.n	8002924 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800
 8002954:	40007000 	.word	0x40007000

08002958 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8002960:	2300      	movs	r3, #0
 8002962:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e25c      	b.n	8002e28 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8087 	beq.w	8002a8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800297c:	4b96      	ldr	r3, [pc, #600]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 030c 	and.w	r3, r3, #12
 8002984:	2b04      	cmp	r3, #4
 8002986:	d00c      	beq.n	80029a2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002988:	4b93      	ldr	r3, [pc, #588]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b08      	cmp	r3, #8
 8002992:	d112      	bne.n	80029ba <HAL_RCC_OscConfig+0x62>
 8002994:	4b90      	ldr	r3, [pc, #576]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a0:	d10b      	bne.n	80029ba <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a2:	4b8d      	ldr	r3, [pc, #564]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d06c      	beq.n	8002a88 <HAL_RCC_OscConfig+0x130>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d168      	bne.n	8002a88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e236      	b.n	8002e28 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x7a>
 80029c4:	4b84      	ldr	r3, [pc, #528]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a83      	ldr	r2, [pc, #524]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 80029ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	e02e      	b.n	8002a30 <HAL_RCC_OscConfig+0xd8>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x9c>
 80029da:	4b7f      	ldr	r3, [pc, #508]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a7e      	ldr	r2, [pc, #504]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 80029e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b7c      	ldr	r3, [pc, #496]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a7b      	ldr	r2, [pc, #492]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 80029ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e01d      	b.n	8002a30 <HAL_RCC_OscConfig+0xd8>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0xc0>
 80029fe:	4b76      	ldr	r3, [pc, #472]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a75      	ldr	r2, [pc, #468]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	4b73      	ldr	r3, [pc, #460]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a72      	ldr	r2, [pc, #456]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e00b      	b.n	8002a30 <HAL_RCC_OscConfig+0xd8>
 8002a18:	4b6f      	ldr	r3, [pc, #444]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a6e      	ldr	r2, [pc, #440]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	4b6c      	ldr	r3, [pc, #432]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a6b      	ldr	r2, [pc, #428]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d013      	beq.n	8002a60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fe fe7a 	bl	8001730 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a40:	f7fe fe76 	bl	8001730 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	; 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e1ea      	b.n	8002e28 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a52:	4b61      	ldr	r3, [pc, #388]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0xe8>
 8002a5e:	e014      	b.n	8002a8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fe fe66 	bl	8001730 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a68:	f7fe fe62 	bl	8001730 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e1d6      	b.n	8002e28 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7a:	4b57      	ldr	r3, [pc, #348]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x110>
 8002a86:	e000      	b.n	8002a8a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d069      	beq.n	8002b6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a96:	4b50      	ldr	r3, [pc, #320]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00b      	beq.n	8002aba <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa2:	4b4d      	ldr	r3, [pc, #308]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d11c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x190>
 8002aae:	4b4a      	ldr	r3, [pc, #296]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d116      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aba:	4b47      	ldr	r3, [pc, #284]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x17a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d001      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e1aa      	b.n	8002e28 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad2:	4b41      	ldr	r3, [pc, #260]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	493d      	ldr	r1, [pc, #244]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae6:	e040      	b.n	8002b6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d023      	beq.n	8002b38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af0:	4b39      	ldr	r3, [pc, #228]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a38      	ldr	r2, [pc, #224]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe fe18 	bl	8001730 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b04:	f7fe fe14 	bl	8001730 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e188      	b.n	8002e28 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b16:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b22:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4929      	ldr	r1, [pc, #164]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]
 8002b36:	e018      	b.n	8002b6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b38:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a26      	ldr	r2, [pc, #152]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002b3e:	f023 0301 	bic.w	r3, r3, #1
 8002b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fe fdf4 	bl	8001730 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4c:	f7fe fdf0 	bl	8001730 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e164      	b.n	8002e28 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d038      	beq.n	8002be8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d019      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b82:	4a15      	ldr	r2, [pc, #84]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8a:	f7fe fdd1 	bl	8001730 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b92:	f7fe fdcd 	bl	8001730 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e141      	b.n	8002e28 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x23a>
 8002bb0:	e01a      	b.n	8002be8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb6:	4a08      	ldr	r2, [pc, #32]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbe:	f7fe fdb7 	bl	8001730 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc4:	e00a      	b.n	8002bdc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc6:	f7fe fdb3 	bl	8001730 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d903      	bls.n	8002bdc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e127      	b.n	8002e28 <HAL_RCC_OscConfig+0x4d0>
 8002bd8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bdc:	4b94      	ldr	r3, [pc, #592]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1ee      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80a4 	beq.w	8002d3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf6:	4b8e      	ldr	r3, [pc, #568]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10d      	bne.n	8002c1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	4b8b      	ldr	r3, [pc, #556]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	4a8a      	ldr	r2, [pc, #552]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0e:	4b88      	ldr	r3, [pc, #544]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1e:	4b85      	ldr	r3, [pc, #532]	; (8002e34 <HAL_RCC_OscConfig+0x4dc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d118      	bne.n	8002c5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c2a:	4b82      	ldr	r3, [pc, #520]	; (8002e34 <HAL_RCC_OscConfig+0x4dc>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a81      	ldr	r2, [pc, #516]	; (8002e34 <HAL_RCC_OscConfig+0x4dc>)
 8002c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c36:	f7fe fd7b 	bl	8001730 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c3e:	f7fe fd77 	bl	8001730 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b64      	cmp	r3, #100	; 0x64
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e0eb      	b.n	8002e28 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c50:	4b78      	ldr	r3, [pc, #480]	; (8002e34 <HAL_RCC_OscConfig+0x4dc>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d106      	bne.n	8002c72 <HAL_RCC_OscConfig+0x31a>
 8002c64:	4b72      	ldr	r3, [pc, #456]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	4a71      	ldr	r2, [pc, #452]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c70:	e02d      	b.n	8002cce <HAL_RCC_OscConfig+0x376>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x33c>
 8002c7a:	4b6d      	ldr	r3, [pc, #436]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7e:	4a6c      	ldr	r2, [pc, #432]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	6713      	str	r3, [r2, #112]	; 0x70
 8002c86:	4b6a      	ldr	r3, [pc, #424]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	4a69      	ldr	r2, [pc, #420]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002c8c:	f023 0304 	bic.w	r3, r3, #4
 8002c90:	6713      	str	r3, [r2, #112]	; 0x70
 8002c92:	e01c      	b.n	8002cce <HAL_RCC_OscConfig+0x376>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d10c      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x35e>
 8002c9c:	4b64      	ldr	r3, [pc, #400]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	4a63      	ldr	r2, [pc, #396]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002ca2:	f043 0304 	orr.w	r3, r3, #4
 8002ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca8:	4b61      	ldr	r3, [pc, #388]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	4a60      	ldr	r2, [pc, #384]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb4:	e00b      	b.n	8002cce <HAL_RCC_OscConfig+0x376>
 8002cb6:	4b5e      	ldr	r3, [pc, #376]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	4a5d      	ldr	r2, [pc, #372]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc2:	4b5b      	ldr	r3, [pc, #364]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	4a5a      	ldr	r2, [pc, #360]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d015      	beq.n	8002d02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd6:	f7fe fd2b 	bl	8001730 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7fe fd27 	bl	8001730 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e099      	b.n	8002e28 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf4:	4b4e      	ldr	r3, [pc, #312]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ee      	beq.n	8002cde <HAL_RCC_OscConfig+0x386>
 8002d00:	e014      	b.n	8002d2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d02:	f7fe fd15 	bl	8001730 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7fe fd11 	bl	8001730 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e083      	b.n	8002e28 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d20:	4b43      	ldr	r3, [pc, #268]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ee      	bne.n	8002d0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d105      	bne.n	8002d3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d32:	4b3f      	ldr	r3, [pc, #252]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	4a3e      	ldr	r2, [pc, #248]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d06f      	beq.n	8002e26 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d46:	4b3a      	ldr	r3, [pc, #232]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d067      	beq.n	8002e22 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d149      	bne.n	8002dee <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5a:	4b35      	ldr	r3, [pc, #212]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a34      	ldr	r2, [pc, #208]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002d60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d66:	f7fe fce3 	bl	8001730 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6e:	f7fe fcdf 	bl	8001730 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e053      	b.n	8002e28 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d80:	4b2b      	ldr	r3, [pc, #172]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	019b      	lsls	r3, r3, #6
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	085b      	lsrs	r3, r3, #1
 8002da4:	3b01      	subs	r3, #1
 8002da6:	041b      	lsls	r3, r3, #16
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	061b      	lsls	r3, r3, #24
 8002db0:	4313      	orrs	r3, r2
 8002db2:	4a1f      	ldr	r2, [pc, #124]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002db4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002db8:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dba:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a1c      	ldr	r2, [pc, #112]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002dc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc6:	f7fe fcb3 	bl	8001730 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dce:	f7fe fcaf 	bl	8001730 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e023      	b.n	8002e28 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de0:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x476>
 8002dec:	e01b      	b.n	8002e26 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dee:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a0f      	ldr	r2, [pc, #60]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002df4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfa:	f7fe fc99 	bl	8001730 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e02:	f7fe fc95 	bl	8001730 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e009      	b.n	8002e28 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <HAL_RCC_OscConfig+0x4d8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f0      	bne.n	8002e02 <HAL_RCC_OscConfig+0x4aa>
 8002e20:	e001      	b.n	8002e26 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40007000 	.word	0x40007000

08002e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0ce      	b.n	8002fee <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e50:	4b69      	ldr	r3, [pc, #420]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d910      	bls.n	8002e80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b66      	ldr	r3, [pc, #408]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 020f 	bic.w	r2, r3, #15
 8002e66:	4964      	ldr	r1, [pc, #400]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b62      	ldr	r3, [pc, #392]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0b6      	b.n	8002fee <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d020      	beq.n	8002ece <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e98:	4b58      	ldr	r3, [pc, #352]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	4a57      	ldr	r2, [pc, #348]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ea2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eb0:	4b52      	ldr	r3, [pc, #328]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	4a51      	ldr	r2, [pc, #324]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002eb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ebc:	4b4f      	ldr	r3, [pc, #316]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	494c      	ldr	r1, [pc, #304]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d040      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	4b46      	ldr	r3, [pc, #280]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d115      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e07d      	b.n	8002fee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efa:	4b40      	ldr	r3, [pc, #256]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e071      	b.n	8002fee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0a:	4b3c      	ldr	r3, [pc, #240]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e069      	b.n	8002fee <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f1a:	4b38      	ldr	r3, [pc, #224]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f023 0203 	bic.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4935      	ldr	r1, [pc, #212]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f2c:	f7fe fc00 	bl	8001730 <HAL_GetTick>
 8002f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f34:	f7fe fbfc 	bl	8001730 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e051      	b.n	8002fee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	4b2c      	ldr	r3, [pc, #176]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 020c 	and.w	r2, r3, #12
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d1eb      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b26      	ldr	r3, [pc, #152]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d210      	bcs.n	8002f8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b23      	ldr	r3, [pc, #140]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 020f 	bic.w	r2, r3, #15
 8002f72:	4921      	ldr	r1, [pc, #132]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	4b1f      	ldr	r3, [pc, #124]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e030      	b.n	8002fee <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d008      	beq.n	8002faa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f98:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4915      	ldr	r1, [pc, #84]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fb6:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	490d      	ldr	r1, [pc, #52]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fca:	f000 f81d 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8002fce:	4601      	mov	r1, r0
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	4a09      	ldr	r2, [pc, #36]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002fdc:	5cd3      	ldrb	r3, [r2, r3]
 8002fde:	fa21 f303 	lsr.w	r3, r1, r3
 8002fe2:	4a08      	ldr	r2, [pc, #32]	; (8003004 <HAL_RCC_ClockConfig+0x1cc>)
 8002fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f7fe fb5e 	bl	80016a8 <HAL_InitTick>

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40023c00 	.word	0x40023c00
 8002ffc:	40023800 	.word	0x40023800
 8003000:	08004fc0 	.word	0x08004fc0
 8003004:	20000004 	.word	0x20000004

08003008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	2300      	movs	r3, #0
 8003018:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800301e:	4b63      	ldr	r3, [pc, #396]	; (80031ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b04      	cmp	r3, #4
 8003028:	d007      	beq.n	800303a <HAL_RCC_GetSysClockFreq+0x32>
 800302a:	2b08      	cmp	r3, #8
 800302c:	d008      	beq.n	8003040 <HAL_RCC_GetSysClockFreq+0x38>
 800302e:	2b00      	cmp	r3, #0
 8003030:	f040 80b4 	bne.w	800319c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003034:	4b5e      	ldr	r3, [pc, #376]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003036:	60bb      	str	r3, [r7, #8]
       break;
 8003038:	e0b3      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800303a:	4b5e      	ldr	r3, [pc, #376]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800303c:	60bb      	str	r3, [r7, #8]
      break;
 800303e:	e0b0      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003040:	4b5a      	ldr	r3, [pc, #360]	; (80031ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003048:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800304a:	4b58      	ldr	r3, [pc, #352]	; (80031ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d04a      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003056:	4b55      	ldr	r3, [pc, #340]	; (80031ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	099b      	lsrs	r3, r3, #6
 800305c:	f04f 0400 	mov.w	r4, #0
 8003060:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	ea03 0501 	and.w	r5, r3, r1
 800306c:	ea04 0602 	and.w	r6, r4, r2
 8003070:	4629      	mov	r1, r5
 8003072:	4632      	mov	r2, r6
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	f04f 0400 	mov.w	r4, #0
 800307c:	0154      	lsls	r4, r2, #5
 800307e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003082:	014b      	lsls	r3, r1, #5
 8003084:	4619      	mov	r1, r3
 8003086:	4622      	mov	r2, r4
 8003088:	1b49      	subs	r1, r1, r5
 800308a:	eb62 0206 	sbc.w	r2, r2, r6
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	f04f 0400 	mov.w	r4, #0
 8003096:	0194      	lsls	r4, r2, #6
 8003098:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800309c:	018b      	lsls	r3, r1, #6
 800309e:	1a5b      	subs	r3, r3, r1
 80030a0:	eb64 0402 	sbc.w	r4, r4, r2
 80030a4:	f04f 0100 	mov.w	r1, #0
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	00e2      	lsls	r2, r4, #3
 80030ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030b2:	00d9      	lsls	r1, r3, #3
 80030b4:	460b      	mov	r3, r1
 80030b6:	4614      	mov	r4, r2
 80030b8:	195b      	adds	r3, r3, r5
 80030ba:	eb44 0406 	adc.w	r4, r4, r6
 80030be:	f04f 0100 	mov.w	r1, #0
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	0262      	lsls	r2, r4, #9
 80030c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80030cc:	0259      	lsls	r1, r3, #9
 80030ce:	460b      	mov	r3, r1
 80030d0:	4614      	mov	r4, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	4621      	mov	r1, r4
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f04f 0400 	mov.w	r4, #0
 80030dc:	461a      	mov	r2, r3
 80030de:	4623      	mov	r3, r4
 80030e0:	f7fd f892 	bl	8000208 <__aeabi_uldivmod>
 80030e4:	4603      	mov	r3, r0
 80030e6:	460c      	mov	r4, r1
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	e049      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ec:	4b2f      	ldr	r3, [pc, #188]	; (80031ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	099b      	lsrs	r3, r3, #6
 80030f2:	f04f 0400 	mov.w	r4, #0
 80030f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	ea03 0501 	and.w	r5, r3, r1
 8003102:	ea04 0602 	and.w	r6, r4, r2
 8003106:	4629      	mov	r1, r5
 8003108:	4632      	mov	r2, r6
 800310a:	f04f 0300 	mov.w	r3, #0
 800310e:	f04f 0400 	mov.w	r4, #0
 8003112:	0154      	lsls	r4, r2, #5
 8003114:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003118:	014b      	lsls	r3, r1, #5
 800311a:	4619      	mov	r1, r3
 800311c:	4622      	mov	r2, r4
 800311e:	1b49      	subs	r1, r1, r5
 8003120:	eb62 0206 	sbc.w	r2, r2, r6
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	f04f 0400 	mov.w	r4, #0
 800312c:	0194      	lsls	r4, r2, #6
 800312e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003132:	018b      	lsls	r3, r1, #6
 8003134:	1a5b      	subs	r3, r3, r1
 8003136:	eb64 0402 	sbc.w	r4, r4, r2
 800313a:	f04f 0100 	mov.w	r1, #0
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	00e2      	lsls	r2, r4, #3
 8003144:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003148:	00d9      	lsls	r1, r3, #3
 800314a:	460b      	mov	r3, r1
 800314c:	4614      	mov	r4, r2
 800314e:	195b      	adds	r3, r3, r5
 8003150:	eb44 0406 	adc.w	r4, r4, r6
 8003154:	f04f 0100 	mov.w	r1, #0
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	02a2      	lsls	r2, r4, #10
 800315e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003162:	0299      	lsls	r1, r3, #10
 8003164:	460b      	mov	r3, r1
 8003166:	4614      	mov	r4, r2
 8003168:	4618      	mov	r0, r3
 800316a:	4621      	mov	r1, r4
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f04f 0400 	mov.w	r4, #0
 8003172:	461a      	mov	r2, r3
 8003174:	4623      	mov	r3, r4
 8003176:	f7fd f847 	bl	8000208 <__aeabi_uldivmod>
 800317a:	4603      	mov	r3, r0
 800317c:	460c      	mov	r4, r1
 800317e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003180:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	0c1b      	lsrs	r3, r3, #16
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	3301      	adds	r3, #1
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	60bb      	str	r3, [r7, #8]
      break;
 800319a:	e002      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800319c:	4b04      	ldr	r3, [pc, #16]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800319e:	60bb      	str	r3, [r7, #8]
      break;
 80031a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a2:	68bb      	ldr	r3, [r7, #8]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ac:	40023800 	.word	0x40023800
 80031b0:	00f42400 	.word	0x00f42400
 80031b4:	007a1200 	.word	0x007a1200

080031b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031bc:	4b03      	ldr	r3, [pc, #12]	; (80031cc <HAL_RCC_GetHCLKFreq+0x14>)
 80031be:	681b      	ldr	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	20000004 	.word	0x20000004

080031d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031d4:	f7ff fff0 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 80031d8:	4601      	mov	r1, r0
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	0a9b      	lsrs	r3, r3, #10
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	4a03      	ldr	r2, [pc, #12]	; (80031f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e6:	5cd3      	ldrb	r3, [r2, r3]
 80031e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40023800 	.word	0x40023800
 80031f4:	08004fd0 	.word	0x08004fd0

080031f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031fc:	f7ff ffdc 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 8003200:	4601      	mov	r1, r0
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	0b5b      	lsrs	r3, r3, #13
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	4a03      	ldr	r2, [pc, #12]	; (800321c <HAL_RCC_GetPCLK2Freq+0x24>)
 800320e:	5cd3      	ldrb	r3, [r2, r3]
 8003210:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003214:	4618      	mov	r0, r3
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40023800 	.word	0x40023800
 800321c:	08004fd0 	.word	0x08004fd0

08003220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d012      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003248:	4b69      	ldr	r3, [pc, #420]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a68      	ldr	r2, [pc, #416]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003252:	6093      	str	r3, [r2, #8]
 8003254:	4b66      	ldr	r3, [pc, #408]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325c:	4964      	ldr	r1, [pc, #400]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800326a:	2301      	movs	r3, #1
 800326c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d017      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800327a:	4b5d      	ldr	r3, [pc, #372]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003280:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003288:	4959      	ldr	r1, [pc, #356]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003294:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003298:	d101      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800329a:	2301      	movs	r3, #1
 800329c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80032a6:	2301      	movs	r3, #1
 80032a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d017      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032b6:	4b4e      	ldr	r3, [pc, #312]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	494a      	ldr	r1, [pc, #296]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032d4:	d101      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80032d6:	2301      	movs	r3, #1
 80032d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80032e2:	2301      	movs	r3, #1
 80032e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80032f2:	2301      	movs	r3, #1
 80032f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 808b 	beq.w	800341a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003304:	4b3a      	ldr	r3, [pc, #232]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	4a39      	ldr	r2, [pc, #228]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330e:	6413      	str	r3, [r2, #64]	; 0x40
 8003310:	4b37      	ldr	r3, [pc, #220]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800331c:	4b35      	ldr	r3, [pc, #212]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a34      	ldr	r2, [pc, #208]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003326:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003328:	f7fe fa02 	bl	8001730 <HAL_GetTick>
 800332c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003330:	f7fe f9fe 	bl	8001730 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b64      	cmp	r3, #100	; 0x64
 800333c:	d901      	bls.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e355      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003342:	4b2c      	ldr	r3, [pc, #176]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800334e:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003356:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d035      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	429a      	cmp	r2, r3
 800336a:	d02e      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800336c:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003374:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003376:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337a:	4a1d      	ldr	r2, [pc, #116]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003382:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	4a1a      	ldr	r2, [pc, #104]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800338e:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003394:	4b16      	ldr	r3, [pc, #88]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b01      	cmp	r3, #1
 800339e:	d114      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fe f9c6 	bl	8001730 <HAL_GetTick>
 80033a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a6:	e00a      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a8:	f7fe f9c2 	bl	8001730 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e317      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033be:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0ee      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033d6:	d111      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033e4:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033e6:	400b      	ands	r3, r1
 80033e8:	4901      	ldr	r1, [pc, #4]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
 80033ee:	e00b      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40007000 	.word	0x40007000
 80033f8:	0ffffcff 	.word	0x0ffffcff
 80033fc:	4bb0      	ldr	r3, [pc, #704]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4aaf      	ldr	r2, [pc, #700]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003402:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003406:	6093      	str	r3, [r2, #8]
 8003408:	4bad      	ldr	r3, [pc, #692]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800340a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003414:	49aa      	ldr	r1, [pc, #680]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003416:	4313      	orrs	r3, r2
 8003418:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	2b00      	cmp	r3, #0
 8003424:	d010      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003426:	4ba6      	ldr	r3, [pc, #664]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800342c:	4aa4      	ldr	r2, [pc, #656]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800342e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003432:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003436:	4ba2      	ldr	r3, [pc, #648]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003438:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	499f      	ldr	r1, [pc, #636]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003454:	4b9a      	ldr	r3, [pc, #616]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003462:	4997      	ldr	r1, [pc, #604]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003476:	4b92      	ldr	r3, [pc, #584]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003484:	498e      	ldr	r1, [pc, #568]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003498:	4b89      	ldr	r3, [pc, #548]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a6:	4986      	ldr	r1, [pc, #536]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034ba:	4b81      	ldr	r3, [pc, #516]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c8:	497d      	ldr	r1, [pc, #500]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034dc:	4b78      	ldr	r3, [pc, #480]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e2:	f023 0203 	bic.w	r2, r3, #3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	4975      	ldr	r1, [pc, #468]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034fe:	4b70      	ldr	r3, [pc, #448]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003504:	f023 020c 	bic.w	r2, r3, #12
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350c:	496c      	ldr	r1, [pc, #432]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003520:	4b67      	ldr	r3, [pc, #412]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352e:	4964      	ldr	r1, [pc, #400]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003542:	4b5f      	ldr	r3, [pc, #380]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003548:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003550:	495b      	ldr	r1, [pc, #364]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003564:	4b56      	ldr	r3, [pc, #344]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	4953      	ldr	r1, [pc, #332]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003586:	4b4e      	ldr	r3, [pc, #312]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003594:	494a      	ldr	r1, [pc, #296]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80035a8:	4b45      	ldr	r3, [pc, #276]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b6:	4942      	ldr	r1, [pc, #264]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80035ca:	4b3d      	ldr	r3, [pc, #244]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d8:	4939      	ldr	r1, [pc, #228]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035ec:	4b34      	ldr	r3, [pc, #208]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035fa:	4931      	ldr	r1, [pc, #196]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d011      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800360e:	4b2c      	ldr	r3, [pc, #176]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003614:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800361c:	4928      	ldr	r1, [pc, #160]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800362c:	d101      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800362e:	2301      	movs	r3, #1
 8003630:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800363e:	2301      	movs	r3, #1
 8003640:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800364e:	4b1c      	ldr	r3, [pc, #112]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003654:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365c:	4918      	ldr	r1, [pc, #96]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00b      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003670:	4b13      	ldr	r3, [pc, #76]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003676:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003680:	490f      	ldr	r1, [pc, #60]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d005      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003696:	f040 80d8 	bne.w	800384a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a6:	f7fe f843 	bl	8001730 <HAL_GetTick>
 80036aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036ac:	e00a      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036ae:	f7fe f83f 	bl	8001730 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b64      	cmp	r3, #100	; 0x64
 80036ba:	d903      	bls.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e196      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80036c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036c4:	4b6c      	ldr	r3, [pc, #432]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1ee      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d021      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d11d      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036e4:	4b64      	ldr	r3, [pc, #400]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80036e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ea:	0c1b      	lsrs	r3, r3, #16
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036f2:	4b61      	ldr	r3, [pc, #388]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80036f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f8:	0e1b      	lsrs	r3, r3, #24
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	019a      	lsls	r2, r3, #6
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	041b      	lsls	r3, r3, #16
 800370a:	431a      	orrs	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	061b      	lsls	r3, r3, #24
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	071b      	lsls	r3, r3, #28
 8003718:	4957      	ldr	r1, [pc, #348]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d004      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003730:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003734:	d00a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800373e:	2b00      	cmp	r3, #0
 8003740:	d02e      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800374a:	d129      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800374c:	4b4a      	ldr	r3, [pc, #296]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800374e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003752:	0c1b      	lsrs	r3, r3, #16
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800375a:	4b47      	ldr	r3, [pc, #284]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800375c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003760:	0f1b      	lsrs	r3, r3, #28
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	019a      	lsls	r2, r3, #6
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	041b      	lsls	r3, r3, #16
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	061b      	lsls	r3, r3, #24
 800377a:	431a      	orrs	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	071b      	lsls	r3, r3, #28
 8003780:	493d      	ldr	r1, [pc, #244]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003788:	4b3b      	ldr	r3, [pc, #236]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800378a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800378e:	f023 021f 	bic.w	r2, r3, #31
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	3b01      	subs	r3, #1
 8003798:	4937      	ldr	r1, [pc, #220]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01d      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037ac:	4b32      	ldr	r3, [pc, #200]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037b2:	0e1b      	lsrs	r3, r3, #24
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037ba:	4b2f      	ldr	r3, [pc, #188]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c0:	0f1b      	lsrs	r3, r3, #28
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	019a      	lsls	r2, r3, #6
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	041b      	lsls	r3, r3, #16
 80037d4:	431a      	orrs	r2, r3
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	061b      	lsls	r3, r3, #24
 80037da:	431a      	orrs	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	071b      	lsls	r3, r3, #28
 80037e0:	4925      	ldr	r1, [pc, #148]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d011      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	019a      	lsls	r2, r3, #6
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	041b      	lsls	r3, r3, #16
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	061b      	lsls	r3, r3, #24
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	071b      	lsls	r3, r3, #28
 8003810:	4919      	ldr	r1, [pc, #100]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003818:	4b17      	ldr	r3, [pc, #92]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a16      	ldr	r2, [pc, #88]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800381e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003822:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003824:	f7fd ff84 	bl	8001730 <HAL_GetTick>
 8003828:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800382a:	e008      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800382c:	f7fd ff80 	bl	8001730 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b64      	cmp	r3, #100	; 0x64
 8003838:	d901      	bls.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e0d7      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800383e:	4b0e      	ldr	r3, [pc, #56]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f0      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b01      	cmp	r3, #1
 800384e:	f040 80cd 	bne.w	80039ec <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a08      	ldr	r2, [pc, #32]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800385c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800385e:	f7fd ff67 	bl	8001730 <HAL_GetTick>
 8003862:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003864:	e00a      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003866:	f7fd ff63 	bl	8001730 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b64      	cmp	r3, #100	; 0x64
 8003872:	d903      	bls.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e0ba      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003878:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800387c:	4b5e      	ldr	r3, [pc, #376]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003888:	d0ed      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389a:	2b00      	cmp	r3, #0
 800389c:	d009      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d02e      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d12a      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038b2:	4b51      	ldr	r3, [pc, #324]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b8:	0c1b      	lsrs	r3, r3, #16
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038c0:	4b4d      	ldr	r3, [pc, #308]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	0f1b      	lsrs	r3, r3, #28
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	019a      	lsls	r2, r3, #6
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	041b      	lsls	r3, r3, #16
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	061b      	lsls	r3, r3, #24
 80038e0:	431a      	orrs	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	071b      	lsls	r3, r3, #28
 80038e6:	4944      	ldr	r1, [pc, #272]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038ee:	4b42      	ldr	r3, [pc, #264]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	3b01      	subs	r3, #1
 80038fe:	021b      	lsls	r3, r3, #8
 8003900:	493d      	ldr	r1, [pc, #244]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d022      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003918:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800391c:	d11d      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800391e:	4b36      	ldr	r3, [pc, #216]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	0e1b      	lsrs	r3, r3, #24
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800392c:	4b32      	ldr	r3, [pc, #200]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003932:	0f1b      	lsrs	r3, r3, #28
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	019a      	lsls	r2, r3, #6
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	041b      	lsls	r3, r3, #16
 8003946:	431a      	orrs	r2, r3
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	061b      	lsls	r3, r3, #24
 800394c:	431a      	orrs	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	071b      	lsls	r3, r3, #28
 8003952:	4929      	ldr	r1, [pc, #164]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d028      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003966:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396c:	0e1b      	lsrs	r3, r3, #24
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003974:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397a:	0c1b      	lsrs	r3, r3, #16
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	019a      	lsls	r2, r3, #6
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	041b      	lsls	r3, r3, #16
 800398c:	431a      	orrs	r2, r3
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	061b      	lsls	r3, r3, #24
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	071b      	lsls	r3, r3, #28
 800399a:	4917      	ldr	r1, [pc, #92]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80039a2:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	4911      	ldr	r1, [pc, #68]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039b8:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a0e      	ldr	r2, [pc, #56]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c4:	f7fd feb4 	bl	8001730 <HAL_GetTick>
 80039c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039cc:	f7fd feb0 	bl	8001730 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	; 0x64
 80039d8:	d901      	bls.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e007      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ea:	d1ef      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3720      	adds	r7, #32
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800

080039fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e01d      	b.n	8003a4a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fd fc44 	bl	80012b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f000 fa0a 	bl	8003e54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d122      	bne.n	8003aae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d11b      	bne.n	8003aae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f06f 0202 	mvn.w	r2, #2
 8003a7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f9bf 	bl	8003e18 <HAL_TIM_IC_CaptureCallback>
 8003a9a:	e005      	b.n	8003aa8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f9b1 	bl	8003e04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f9c2 	bl	8003e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d122      	bne.n	8003b02 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d11b      	bne.n	8003b02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f06f 0204 	mvn.w	r2, #4
 8003ad2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f995 	bl	8003e18 <HAL_TIM_IC_CaptureCallback>
 8003aee:	e005      	b.n	8003afc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f987 	bl	8003e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f998 	bl	8003e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d122      	bne.n	8003b56 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d11b      	bne.n	8003b56 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f06f 0208 	mvn.w	r2, #8
 8003b26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f96b 	bl	8003e18 <HAL_TIM_IC_CaptureCallback>
 8003b42:	e005      	b.n	8003b50 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f95d 	bl	8003e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f96e 	bl	8003e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d122      	bne.n	8003baa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	2b10      	cmp	r3, #16
 8003b70:	d11b      	bne.n	8003baa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f06f 0210 	mvn.w	r2, #16
 8003b7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2208      	movs	r2, #8
 8003b80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f941 	bl	8003e18 <HAL_TIM_IC_CaptureCallback>
 8003b96:	e005      	b.n	8003ba4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f933 	bl	8003e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f944 	bl	8003e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d10e      	bne.n	8003bd6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d107      	bne.n	8003bd6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f06f 0201 	mvn.w	r2, #1
 8003bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7fc fc99 	bl	8000508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be0:	2b80      	cmp	r3, #128	; 0x80
 8003be2:	d10e      	bne.n	8003c02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bee:	2b80      	cmp	r3, #128	; 0x80
 8003bf0:	d107      	bne.n	8003c02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fac9 	bl	8004194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c10:	d10e      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1c:	2b80      	cmp	r3, #128	; 0x80
 8003c1e:	d107      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fabc 	bl	80041a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b40      	cmp	r3, #64	; 0x40
 8003c3c:	d10e      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c48:	2b40      	cmp	r3, #64	; 0x40
 8003c4a:	d107      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8f2 	bl	8003e40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d10e      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d107      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0220 	mvn.w	r2, #32
 8003c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fa7c 	bl	8004180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_TIM_ConfigClockSource+0x18>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e0a6      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x166>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4b4f      	ldr	r3, [pc, #316]	; (8003e00 <HAL_TIM_ConfigClockSource+0x170>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b40      	cmp	r3, #64	; 0x40
 8003cde:	d067      	beq.n	8003db0 <HAL_TIM_ConfigClockSource+0x120>
 8003ce0:	2b40      	cmp	r3, #64	; 0x40
 8003ce2:	d80b      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x6c>
 8003ce4:	2b10      	cmp	r3, #16
 8003ce6:	d073      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0x140>
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	d802      	bhi.n	8003cf2 <HAL_TIM_ConfigClockSource+0x62>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d06f      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003cf0:	e078      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d06c      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0x140>
 8003cf6:	2b30      	cmp	r3, #48	; 0x30
 8003cf8:	d06a      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003cfa:	e073      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cfc:	2b70      	cmp	r3, #112	; 0x70
 8003cfe:	d00d      	beq.n	8003d1c <HAL_TIM_ConfigClockSource+0x8c>
 8003d00:	2b70      	cmp	r3, #112	; 0x70
 8003d02:	d804      	bhi.n	8003d0e <HAL_TIM_ConfigClockSource+0x7e>
 8003d04:	2b50      	cmp	r3, #80	; 0x50
 8003d06:	d033      	beq.n	8003d70 <HAL_TIM_ConfigClockSource+0xe0>
 8003d08:	2b60      	cmp	r3, #96	; 0x60
 8003d0a:	d041      	beq.n	8003d90 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d0c:	e06a      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d12:	d066      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x152>
 8003d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d18:	d017      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d1a:	e063      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	6899      	ldr	r1, [r3, #8]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f000 f9ac 	bl	8004088 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	609a      	str	r2, [r3, #8]
      break;
 8003d48:	e04c      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6899      	ldr	r1, [r3, #8]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f000 f995 	bl	8004088 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d6c:	609a      	str	r2, [r3, #8]
      break;
 8003d6e:	e039      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	6859      	ldr	r1, [r3, #4]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	f000 f909 	bl	8003f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2150      	movs	r1, #80	; 0x50
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 f962 	bl	8004052 <TIM_ITRx_SetConfig>
      break;
 8003d8e:	e029      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6818      	ldr	r0, [r3, #0]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	6859      	ldr	r1, [r3, #4]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f000 f928 	bl	8003ff2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2160      	movs	r1, #96	; 0x60
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 f952 	bl	8004052 <TIM_ITRx_SetConfig>
      break;
 8003dae:	e019      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f000 f8e9 	bl	8003f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2140      	movs	r1, #64	; 0x40
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 f942 	bl	8004052 <TIM_ITRx_SetConfig>
      break;
 8003dce:	e009      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4610      	mov	r0, r2
 8003ddc:	f000 f939 	bl	8004052 <TIM_ITRx_SetConfig>
      break;
 8003de0:	e000      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003de2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	fffeff88 	.word	0xfffeff88

08003e04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a40      	ldr	r2, [pc, #256]	; (8003f68 <TIM_Base_SetConfig+0x114>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d013      	beq.n	8003e94 <TIM_Base_SetConfig+0x40>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e72:	d00f      	beq.n	8003e94 <TIM_Base_SetConfig+0x40>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a3d      	ldr	r2, [pc, #244]	; (8003f6c <TIM_Base_SetConfig+0x118>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d00b      	beq.n	8003e94 <TIM_Base_SetConfig+0x40>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a3c      	ldr	r2, [pc, #240]	; (8003f70 <TIM_Base_SetConfig+0x11c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d007      	beq.n	8003e94 <TIM_Base_SetConfig+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a3b      	ldr	r2, [pc, #236]	; (8003f74 <TIM_Base_SetConfig+0x120>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d003      	beq.n	8003e94 <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a3a      	ldr	r2, [pc, #232]	; (8003f78 <TIM_Base_SetConfig+0x124>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d108      	bne.n	8003ea6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a2f      	ldr	r2, [pc, #188]	; (8003f68 <TIM_Base_SetConfig+0x114>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d02b      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb4:	d027      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a2c      	ldr	r2, [pc, #176]	; (8003f6c <TIM_Base_SetConfig+0x118>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d023      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a2b      	ldr	r2, [pc, #172]	; (8003f70 <TIM_Base_SetConfig+0x11c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d01f      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a2a      	ldr	r2, [pc, #168]	; (8003f74 <TIM_Base_SetConfig+0x120>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d01b      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a29      	ldr	r2, [pc, #164]	; (8003f78 <TIM_Base_SetConfig+0x124>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d017      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a28      	ldr	r2, [pc, #160]	; (8003f7c <TIM_Base_SetConfig+0x128>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d013      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a27      	ldr	r2, [pc, #156]	; (8003f80 <TIM_Base_SetConfig+0x12c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00f      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a26      	ldr	r2, [pc, #152]	; (8003f84 <TIM_Base_SetConfig+0x130>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00b      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a25      	ldr	r2, [pc, #148]	; (8003f88 <TIM_Base_SetConfig+0x134>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d007      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a24      	ldr	r2, [pc, #144]	; (8003f8c <TIM_Base_SetConfig+0x138>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d003      	beq.n	8003f06 <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a23      	ldr	r2, [pc, #140]	; (8003f90 <TIM_Base_SetConfig+0x13c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d108      	bne.n	8003f18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a0a      	ldr	r2, [pc, #40]	; (8003f68 <TIM_Base_SetConfig+0x114>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d003      	beq.n	8003f4c <TIM_Base_SetConfig+0xf8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a0c      	ldr	r2, [pc, #48]	; (8003f78 <TIM_Base_SetConfig+0x124>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d103      	bne.n	8003f54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	615a      	str	r2, [r3, #20]
}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40010000 	.word	0x40010000
 8003f6c:	40000400 	.word	0x40000400
 8003f70:	40000800 	.word	0x40000800
 8003f74:	40000c00 	.word	0x40000c00
 8003f78:	40010400 	.word	0x40010400
 8003f7c:	40014000 	.word	0x40014000
 8003f80:	40014400 	.word	0x40014400
 8003f84:	40014800 	.word	0x40014800
 8003f88:	40001800 	.word	0x40001800
 8003f8c:	40001c00 	.word	0x40001c00
 8003f90:	40002000 	.word	0x40002000

08003f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f023 0201 	bic.w	r2, r3, #1
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f023 030a 	bic.w	r3, r3, #10
 8003fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	621a      	str	r2, [r3, #32]
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b087      	sub	sp, #28
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f023 0210 	bic.w	r2, r3, #16
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800401c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	031b      	lsls	r3, r3, #12
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800402e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	621a      	str	r2, [r3, #32]
}
 8004046:	bf00      	nop
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004052:	b480      	push	{r7}
 8004054:	b085      	sub	sp, #20
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	f043 0307 	orr.w	r3, r3, #7
 8004074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	609a      	str	r2, [r3, #8]
}
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	021a      	lsls	r2, r3, #8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	609a      	str	r2, [r3, #8]
}
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040dc:	2302      	movs	r3, #2
 80040de:	e045      	b.n	800416c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1c      	ldr	r2, [pc, #112]	; (8004178 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1b      	ldr	r2, [pc, #108]	; (800417c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d108      	bne.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800411a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800413e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	4313      	orrs	r3, r2
 8004148:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	40010000 	.word	0x40010000
 800417c:	40010400 	.word	0x40010400

08004180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e040      	b.n	8004250 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d106      	bne.n	80041e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7fd f95e 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2224      	movs	r2, #36	; 0x24
 80041e8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0201 	bic.w	r2, r2, #1
 80041f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f82c 	bl	8004258 <UART_SetConfig>
 8004200:	4603      	mov	r3, r0
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e022      	b.n	8004250 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fac4 	bl	80047a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004226:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004236:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 fb4b 	bl	80048e4 <UART_CheckIdleState>
 800424e:	4603      	mov	r3, r0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004260:	2300      	movs	r3, #0
 8004262:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	431a      	orrs	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4bb1      	ldr	r3, [pc, #708]	; (800454c <UART_SetConfig+0x2f4>)
 8004288:	4013      	ands	r3, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	6939      	ldr	r1, [r7, #16]
 8004290:	430b      	orrs	r3, r1
 8004292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a9f      	ldr	r2, [pc, #636]	; (8004550 <UART_SetConfig+0x2f8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d121      	bne.n	800431c <UART_SetConfig+0xc4>
 80042d8:	4b9e      	ldr	r3, [pc, #632]	; (8004554 <UART_SetConfig+0x2fc>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d816      	bhi.n	8004314 <UART_SetConfig+0xbc>
 80042e6:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <UART_SetConfig+0x94>)
 80042e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ec:	080042fd 	.word	0x080042fd
 80042f0:	08004309 	.word	0x08004309
 80042f4:	08004303 	.word	0x08004303
 80042f8:	0800430f 	.word	0x0800430f
 80042fc:	2301      	movs	r3, #1
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e151      	b.n	80045a6 <UART_SetConfig+0x34e>
 8004302:	2302      	movs	r3, #2
 8004304:	77fb      	strb	r3, [r7, #31]
 8004306:	e14e      	b.n	80045a6 <UART_SetConfig+0x34e>
 8004308:	2304      	movs	r3, #4
 800430a:	77fb      	strb	r3, [r7, #31]
 800430c:	e14b      	b.n	80045a6 <UART_SetConfig+0x34e>
 800430e:	2308      	movs	r3, #8
 8004310:	77fb      	strb	r3, [r7, #31]
 8004312:	e148      	b.n	80045a6 <UART_SetConfig+0x34e>
 8004314:	2310      	movs	r3, #16
 8004316:	77fb      	strb	r3, [r7, #31]
 8004318:	bf00      	nop
 800431a:	e144      	b.n	80045a6 <UART_SetConfig+0x34e>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a8d      	ldr	r2, [pc, #564]	; (8004558 <UART_SetConfig+0x300>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d134      	bne.n	8004390 <UART_SetConfig+0x138>
 8004326:	4b8b      	ldr	r3, [pc, #556]	; (8004554 <UART_SetConfig+0x2fc>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432c:	f003 030c 	and.w	r3, r3, #12
 8004330:	2b0c      	cmp	r3, #12
 8004332:	d829      	bhi.n	8004388 <UART_SetConfig+0x130>
 8004334:	a201      	add	r2, pc, #4	; (adr r2, 800433c <UART_SetConfig+0xe4>)
 8004336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433a:	bf00      	nop
 800433c:	08004371 	.word	0x08004371
 8004340:	08004389 	.word	0x08004389
 8004344:	08004389 	.word	0x08004389
 8004348:	08004389 	.word	0x08004389
 800434c:	0800437d 	.word	0x0800437d
 8004350:	08004389 	.word	0x08004389
 8004354:	08004389 	.word	0x08004389
 8004358:	08004389 	.word	0x08004389
 800435c:	08004377 	.word	0x08004377
 8004360:	08004389 	.word	0x08004389
 8004364:	08004389 	.word	0x08004389
 8004368:	08004389 	.word	0x08004389
 800436c:	08004383 	.word	0x08004383
 8004370:	2300      	movs	r3, #0
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e117      	b.n	80045a6 <UART_SetConfig+0x34e>
 8004376:	2302      	movs	r3, #2
 8004378:	77fb      	strb	r3, [r7, #31]
 800437a:	e114      	b.n	80045a6 <UART_SetConfig+0x34e>
 800437c:	2304      	movs	r3, #4
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	e111      	b.n	80045a6 <UART_SetConfig+0x34e>
 8004382:	2308      	movs	r3, #8
 8004384:	77fb      	strb	r3, [r7, #31]
 8004386:	e10e      	b.n	80045a6 <UART_SetConfig+0x34e>
 8004388:	2310      	movs	r3, #16
 800438a:	77fb      	strb	r3, [r7, #31]
 800438c:	bf00      	nop
 800438e:	e10a      	b.n	80045a6 <UART_SetConfig+0x34e>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a71      	ldr	r2, [pc, #452]	; (800455c <UART_SetConfig+0x304>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d120      	bne.n	80043dc <UART_SetConfig+0x184>
 800439a:	4b6e      	ldr	r3, [pc, #440]	; (8004554 <UART_SetConfig+0x2fc>)
 800439c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	d00f      	beq.n	80043c8 <UART_SetConfig+0x170>
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d802      	bhi.n	80043b2 <UART_SetConfig+0x15a>
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <UART_SetConfig+0x164>
 80043b0:	e010      	b.n	80043d4 <UART_SetConfig+0x17c>
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	d005      	beq.n	80043c2 <UART_SetConfig+0x16a>
 80043b6:	2b30      	cmp	r3, #48	; 0x30
 80043b8:	d009      	beq.n	80043ce <UART_SetConfig+0x176>
 80043ba:	e00b      	b.n	80043d4 <UART_SetConfig+0x17c>
 80043bc:	2300      	movs	r3, #0
 80043be:	77fb      	strb	r3, [r7, #31]
 80043c0:	e0f1      	b.n	80045a6 <UART_SetConfig+0x34e>
 80043c2:	2302      	movs	r3, #2
 80043c4:	77fb      	strb	r3, [r7, #31]
 80043c6:	e0ee      	b.n	80045a6 <UART_SetConfig+0x34e>
 80043c8:	2304      	movs	r3, #4
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	e0eb      	b.n	80045a6 <UART_SetConfig+0x34e>
 80043ce:	2308      	movs	r3, #8
 80043d0:	77fb      	strb	r3, [r7, #31]
 80043d2:	e0e8      	b.n	80045a6 <UART_SetConfig+0x34e>
 80043d4:	2310      	movs	r3, #16
 80043d6:	77fb      	strb	r3, [r7, #31]
 80043d8:	bf00      	nop
 80043da:	e0e4      	b.n	80045a6 <UART_SetConfig+0x34e>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a5f      	ldr	r2, [pc, #380]	; (8004560 <UART_SetConfig+0x308>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d120      	bne.n	8004428 <UART_SetConfig+0x1d0>
 80043e6:	4b5b      	ldr	r3, [pc, #364]	; (8004554 <UART_SetConfig+0x2fc>)
 80043e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043f0:	2b40      	cmp	r3, #64	; 0x40
 80043f2:	d00f      	beq.n	8004414 <UART_SetConfig+0x1bc>
 80043f4:	2b40      	cmp	r3, #64	; 0x40
 80043f6:	d802      	bhi.n	80043fe <UART_SetConfig+0x1a6>
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <UART_SetConfig+0x1b0>
 80043fc:	e010      	b.n	8004420 <UART_SetConfig+0x1c8>
 80043fe:	2b80      	cmp	r3, #128	; 0x80
 8004400:	d005      	beq.n	800440e <UART_SetConfig+0x1b6>
 8004402:	2bc0      	cmp	r3, #192	; 0xc0
 8004404:	d009      	beq.n	800441a <UART_SetConfig+0x1c2>
 8004406:	e00b      	b.n	8004420 <UART_SetConfig+0x1c8>
 8004408:	2300      	movs	r3, #0
 800440a:	77fb      	strb	r3, [r7, #31]
 800440c:	e0cb      	b.n	80045a6 <UART_SetConfig+0x34e>
 800440e:	2302      	movs	r3, #2
 8004410:	77fb      	strb	r3, [r7, #31]
 8004412:	e0c8      	b.n	80045a6 <UART_SetConfig+0x34e>
 8004414:	2304      	movs	r3, #4
 8004416:	77fb      	strb	r3, [r7, #31]
 8004418:	e0c5      	b.n	80045a6 <UART_SetConfig+0x34e>
 800441a:	2308      	movs	r3, #8
 800441c:	77fb      	strb	r3, [r7, #31]
 800441e:	e0c2      	b.n	80045a6 <UART_SetConfig+0x34e>
 8004420:	2310      	movs	r3, #16
 8004422:	77fb      	strb	r3, [r7, #31]
 8004424:	bf00      	nop
 8004426:	e0be      	b.n	80045a6 <UART_SetConfig+0x34e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a4d      	ldr	r2, [pc, #308]	; (8004564 <UART_SetConfig+0x30c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d124      	bne.n	800447c <UART_SetConfig+0x224>
 8004432:	4b48      	ldr	r3, [pc, #288]	; (8004554 <UART_SetConfig+0x2fc>)
 8004434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004438:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800443c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004440:	d012      	beq.n	8004468 <UART_SetConfig+0x210>
 8004442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004446:	d802      	bhi.n	800444e <UART_SetConfig+0x1f6>
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <UART_SetConfig+0x204>
 800444c:	e012      	b.n	8004474 <UART_SetConfig+0x21c>
 800444e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004452:	d006      	beq.n	8004462 <UART_SetConfig+0x20a>
 8004454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004458:	d009      	beq.n	800446e <UART_SetConfig+0x216>
 800445a:	e00b      	b.n	8004474 <UART_SetConfig+0x21c>
 800445c:	2300      	movs	r3, #0
 800445e:	77fb      	strb	r3, [r7, #31]
 8004460:	e0a1      	b.n	80045a6 <UART_SetConfig+0x34e>
 8004462:	2302      	movs	r3, #2
 8004464:	77fb      	strb	r3, [r7, #31]
 8004466:	e09e      	b.n	80045a6 <UART_SetConfig+0x34e>
 8004468:	2304      	movs	r3, #4
 800446a:	77fb      	strb	r3, [r7, #31]
 800446c:	e09b      	b.n	80045a6 <UART_SetConfig+0x34e>
 800446e:	2308      	movs	r3, #8
 8004470:	77fb      	strb	r3, [r7, #31]
 8004472:	e098      	b.n	80045a6 <UART_SetConfig+0x34e>
 8004474:	2310      	movs	r3, #16
 8004476:	77fb      	strb	r3, [r7, #31]
 8004478:	bf00      	nop
 800447a:	e094      	b.n	80045a6 <UART_SetConfig+0x34e>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a39      	ldr	r2, [pc, #228]	; (8004568 <UART_SetConfig+0x310>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d124      	bne.n	80044d0 <UART_SetConfig+0x278>
 8004486:	4b33      	ldr	r3, [pc, #204]	; (8004554 <UART_SetConfig+0x2fc>)
 8004488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004494:	d012      	beq.n	80044bc <UART_SetConfig+0x264>
 8004496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449a:	d802      	bhi.n	80044a2 <UART_SetConfig+0x24a>
 800449c:	2b00      	cmp	r3, #0
 800449e:	d007      	beq.n	80044b0 <UART_SetConfig+0x258>
 80044a0:	e012      	b.n	80044c8 <UART_SetConfig+0x270>
 80044a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a6:	d006      	beq.n	80044b6 <UART_SetConfig+0x25e>
 80044a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044ac:	d009      	beq.n	80044c2 <UART_SetConfig+0x26a>
 80044ae:	e00b      	b.n	80044c8 <UART_SetConfig+0x270>
 80044b0:	2301      	movs	r3, #1
 80044b2:	77fb      	strb	r3, [r7, #31]
 80044b4:	e077      	b.n	80045a6 <UART_SetConfig+0x34e>
 80044b6:	2302      	movs	r3, #2
 80044b8:	77fb      	strb	r3, [r7, #31]
 80044ba:	e074      	b.n	80045a6 <UART_SetConfig+0x34e>
 80044bc:	2304      	movs	r3, #4
 80044be:	77fb      	strb	r3, [r7, #31]
 80044c0:	e071      	b.n	80045a6 <UART_SetConfig+0x34e>
 80044c2:	2308      	movs	r3, #8
 80044c4:	77fb      	strb	r3, [r7, #31]
 80044c6:	e06e      	b.n	80045a6 <UART_SetConfig+0x34e>
 80044c8:	2310      	movs	r3, #16
 80044ca:	77fb      	strb	r3, [r7, #31]
 80044cc:	bf00      	nop
 80044ce:	e06a      	b.n	80045a6 <UART_SetConfig+0x34e>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a25      	ldr	r2, [pc, #148]	; (800456c <UART_SetConfig+0x314>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d124      	bne.n	8004524 <UART_SetConfig+0x2cc>
 80044da:	4b1e      	ldr	r3, [pc, #120]	; (8004554 <UART_SetConfig+0x2fc>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80044e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e8:	d012      	beq.n	8004510 <UART_SetConfig+0x2b8>
 80044ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ee:	d802      	bhi.n	80044f6 <UART_SetConfig+0x29e>
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d007      	beq.n	8004504 <UART_SetConfig+0x2ac>
 80044f4:	e012      	b.n	800451c <UART_SetConfig+0x2c4>
 80044f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044fa:	d006      	beq.n	800450a <UART_SetConfig+0x2b2>
 80044fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004500:	d009      	beq.n	8004516 <UART_SetConfig+0x2be>
 8004502:	e00b      	b.n	800451c <UART_SetConfig+0x2c4>
 8004504:	2300      	movs	r3, #0
 8004506:	77fb      	strb	r3, [r7, #31]
 8004508:	e04d      	b.n	80045a6 <UART_SetConfig+0x34e>
 800450a:	2302      	movs	r3, #2
 800450c:	77fb      	strb	r3, [r7, #31]
 800450e:	e04a      	b.n	80045a6 <UART_SetConfig+0x34e>
 8004510:	2304      	movs	r3, #4
 8004512:	77fb      	strb	r3, [r7, #31]
 8004514:	e047      	b.n	80045a6 <UART_SetConfig+0x34e>
 8004516:	2308      	movs	r3, #8
 8004518:	77fb      	strb	r3, [r7, #31]
 800451a:	e044      	b.n	80045a6 <UART_SetConfig+0x34e>
 800451c:	2310      	movs	r3, #16
 800451e:	77fb      	strb	r3, [r7, #31]
 8004520:	bf00      	nop
 8004522:	e040      	b.n	80045a6 <UART_SetConfig+0x34e>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a11      	ldr	r2, [pc, #68]	; (8004570 <UART_SetConfig+0x318>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d139      	bne.n	80045a2 <UART_SetConfig+0x34a>
 800452e:	4b09      	ldr	r3, [pc, #36]	; (8004554 <UART_SetConfig+0x2fc>)
 8004530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004534:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800453c:	d027      	beq.n	800458e <UART_SetConfig+0x336>
 800453e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004542:	d817      	bhi.n	8004574 <UART_SetConfig+0x31c>
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01c      	beq.n	8004582 <UART_SetConfig+0x32a>
 8004548:	e027      	b.n	800459a <UART_SetConfig+0x342>
 800454a:	bf00      	nop
 800454c:	efff69f3 	.word	0xefff69f3
 8004550:	40011000 	.word	0x40011000
 8004554:	40023800 	.word	0x40023800
 8004558:	40004400 	.word	0x40004400
 800455c:	40004800 	.word	0x40004800
 8004560:	40004c00 	.word	0x40004c00
 8004564:	40005000 	.word	0x40005000
 8004568:	40011400 	.word	0x40011400
 800456c:	40007800 	.word	0x40007800
 8004570:	40007c00 	.word	0x40007c00
 8004574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004578:	d006      	beq.n	8004588 <UART_SetConfig+0x330>
 800457a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800457e:	d009      	beq.n	8004594 <UART_SetConfig+0x33c>
 8004580:	e00b      	b.n	800459a <UART_SetConfig+0x342>
 8004582:	2300      	movs	r3, #0
 8004584:	77fb      	strb	r3, [r7, #31]
 8004586:	e00e      	b.n	80045a6 <UART_SetConfig+0x34e>
 8004588:	2302      	movs	r3, #2
 800458a:	77fb      	strb	r3, [r7, #31]
 800458c:	e00b      	b.n	80045a6 <UART_SetConfig+0x34e>
 800458e:	2304      	movs	r3, #4
 8004590:	77fb      	strb	r3, [r7, #31]
 8004592:	e008      	b.n	80045a6 <UART_SetConfig+0x34e>
 8004594:	2308      	movs	r3, #8
 8004596:	77fb      	strb	r3, [r7, #31]
 8004598:	e005      	b.n	80045a6 <UART_SetConfig+0x34e>
 800459a:	2310      	movs	r3, #16
 800459c:	77fb      	strb	r3, [r7, #31]
 800459e:	bf00      	nop
 80045a0:	e001      	b.n	80045a6 <UART_SetConfig+0x34e>
 80045a2:	2310      	movs	r3, #16
 80045a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ae:	d17c      	bne.n	80046aa <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80045b0:	7ffb      	ldrb	r3, [r7, #31]
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d859      	bhi.n	800466a <UART_SetConfig+0x412>
 80045b6:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <UART_SetConfig+0x364>)
 80045b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045bc:	080045e1 	.word	0x080045e1
 80045c0:	080045ff 	.word	0x080045ff
 80045c4:	0800461d 	.word	0x0800461d
 80045c8:	0800466b 	.word	0x0800466b
 80045cc:	08004635 	.word	0x08004635
 80045d0:	0800466b 	.word	0x0800466b
 80045d4:	0800466b 	.word	0x0800466b
 80045d8:	0800466b 	.word	0x0800466b
 80045dc:	08004653 	.word	0x08004653
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80045e0:	f7fe fdf6 	bl	80031d0 <HAL_RCC_GetPCLK1Freq>
 80045e4:	4603      	mov	r3, r0
 80045e6:	005a      	lsls	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	085b      	lsrs	r3, r3, #1
 80045ee:	441a      	add	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	61bb      	str	r3, [r7, #24]
        break;
 80045fc:	e038      	b.n	8004670 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80045fe:	f7fe fdfb 	bl	80031f8 <HAL_RCC_GetPCLK2Freq>
 8004602:	4603      	mov	r3, r0
 8004604:	005a      	lsls	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	441a      	add	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	fbb2 f3f3 	udiv	r3, r2, r3
 8004616:	b29b      	uxth	r3, r3
 8004618:	61bb      	str	r3, [r7, #24]
        break;
 800461a:	e029      	b.n	8004670 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	085a      	lsrs	r2, r3, #1
 8004622:	4b5d      	ldr	r3, [pc, #372]	; (8004798 <UART_SetConfig+0x540>)
 8004624:	4413      	add	r3, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6852      	ldr	r2, [r2, #4]
 800462a:	fbb3 f3f2 	udiv	r3, r3, r2
 800462e:	b29b      	uxth	r3, r3
 8004630:	61bb      	str	r3, [r7, #24]
        break;
 8004632:	e01d      	b.n	8004670 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004634:	f7fe fce8 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8004638:	4603      	mov	r3, r0
 800463a:	005a      	lsls	r2, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	085b      	lsrs	r3, r3, #1
 8004642:	441a      	add	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	b29b      	uxth	r3, r3
 800464e:	61bb      	str	r3, [r7, #24]
        break;
 8004650:	e00e      	b.n	8004670 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	085b      	lsrs	r3, r3, #1
 8004658:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	b29b      	uxth	r3, r3
 8004666:	61bb      	str	r3, [r7, #24]
        break;
 8004668:	e002      	b.n	8004670 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	75fb      	strb	r3, [r7, #23]
        break;
 800466e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2b0f      	cmp	r3, #15
 8004674:	d916      	bls.n	80046a4 <UART_SetConfig+0x44c>
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467c:	d212      	bcs.n	80046a4 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	b29b      	uxth	r3, r3
 8004682:	f023 030f 	bic.w	r3, r3, #15
 8004686:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	085b      	lsrs	r3, r3, #1
 800468c:	b29b      	uxth	r3, r3
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	b29a      	uxth	r2, r3
 8004694:	89fb      	ldrh	r3, [r7, #14]
 8004696:	4313      	orrs	r3, r2
 8004698:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	89fa      	ldrh	r2, [r7, #14]
 80046a0:	60da      	str	r2, [r3, #12]
 80046a2:	e06e      	b.n	8004782 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	75fb      	strb	r3, [r7, #23]
 80046a8:	e06b      	b.n	8004782 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 80046aa:	7ffb      	ldrb	r3, [r7, #31]
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d857      	bhi.n	8004760 <UART_SetConfig+0x508>
 80046b0:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <UART_SetConfig+0x460>)
 80046b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b6:	bf00      	nop
 80046b8:	080046dd 	.word	0x080046dd
 80046bc:	080046f9 	.word	0x080046f9
 80046c0:	08004715 	.word	0x08004715
 80046c4:	08004761 	.word	0x08004761
 80046c8:	0800472d 	.word	0x0800472d
 80046cc:	08004761 	.word	0x08004761
 80046d0:	08004761 	.word	0x08004761
 80046d4:	08004761 	.word	0x08004761
 80046d8:	08004749 	.word	0x08004749
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80046dc:	f7fe fd78 	bl	80031d0 <HAL_RCC_GetPCLK1Freq>
 80046e0:	4602      	mov	r2, r0
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	085b      	lsrs	r3, r3, #1
 80046e8:	441a      	add	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	61bb      	str	r3, [r7, #24]
        break;
 80046f6:	e036      	b.n	8004766 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80046f8:	f7fe fd7e 	bl	80031f8 <HAL_RCC_GetPCLK2Freq>
 80046fc:	4602      	mov	r2, r0
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	085b      	lsrs	r3, r3, #1
 8004704:	441a      	add	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	fbb2 f3f3 	udiv	r3, r2, r3
 800470e:	b29b      	uxth	r3, r3
 8004710:	61bb      	str	r3, [r7, #24]
        break;
 8004712:	e028      	b.n	8004766 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	085a      	lsrs	r2, r3, #1
 800471a:	4b20      	ldr	r3, [pc, #128]	; (800479c <UART_SetConfig+0x544>)
 800471c:	4413      	add	r3, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6852      	ldr	r2, [r2, #4]
 8004722:	fbb3 f3f2 	udiv	r3, r3, r2
 8004726:	b29b      	uxth	r3, r3
 8004728:	61bb      	str	r3, [r7, #24]
        break;
 800472a:	e01c      	b.n	8004766 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800472c:	f7fe fc6c 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8004730:	4602      	mov	r2, r0
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	085b      	lsrs	r3, r3, #1
 8004738:	441a      	add	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	b29b      	uxth	r3, r3
 8004744:	61bb      	str	r3, [r7, #24]
        break;
 8004746:	e00e      	b.n	8004766 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	085b      	lsrs	r3, r3, #1
 800474e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	fbb2 f3f3 	udiv	r3, r2, r3
 800475a:	b29b      	uxth	r3, r3
 800475c:	61bb      	str	r3, [r7, #24]
        break;
 800475e:	e002      	b.n	8004766 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	75fb      	strb	r3, [r7, #23]
        break;
 8004764:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	2b0f      	cmp	r3, #15
 800476a:	d908      	bls.n	800477e <UART_SetConfig+0x526>
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004772:	d204      	bcs.n	800477e <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	60da      	str	r2, [r3, #12]
 800477c:	e001      	b.n	8004782 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800478e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3720      	adds	r7, #32
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	01e84800 	.word	0x01e84800
 800479c:	00f42400 	.word	0x00f42400

080047a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00a      	beq.n	8004852 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01a      	beq.n	80048b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800489e:	d10a      	bne.n	80048b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	605a      	str	r2, [r3, #4]
  }
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80048f2:	f7fc ff1d 	bl	8001730 <HAL_GetTick>
 80048f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b08      	cmp	r3, #8
 8004904:	d10e      	bne.n	8004924 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004906:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f814 	bl	8004942 <UART_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e00a      	b.n	800493a <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2220      	movs	r2, #32
 800492e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b084      	sub	sp, #16
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	603b      	str	r3, [r7, #0]
 800494e:	4613      	mov	r3, r2
 8004950:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004952:	e02a      	b.n	80049aa <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495a:	d026      	beq.n	80049aa <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800495c:	f7fc fee8 	bl	8001730 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	429a      	cmp	r2, r3
 800496a:	d302      	bcc.n	8004972 <UART_WaitOnFlagUntilTimeout+0x30>
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d11b      	bne.n	80049aa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004980:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0201 	bic.w	r2, r2, #1
 8004990:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2220      	movs	r2, #32
 8004996:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2220      	movs	r2, #32
 800499c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e00f      	b.n	80049ca <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69da      	ldr	r2, [r3, #28]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4013      	ands	r3, r2
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	bf0c      	ite	eq
 80049ba:	2301      	moveq	r3, #1
 80049bc:	2300      	movne	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d0c5      	beq.n	8004954 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049d4:	b084      	sub	sp, #16
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	f107 001c 	add.w	r0, r7, #28
 80049e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d120      	bne.n	8004a2e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	4b20      	ldr	r3, [pc, #128]	; (8004a80 <USB_CoreInit+0xac>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d105      	bne.n	8004a22 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fa60 	bl	8004ee8 <USB_CoreReset>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	73fb      	strb	r3, [r7, #15]
 8004a2c:	e010      	b.n	8004a50 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fa54 	bl	8004ee8 <USB_CoreReset>
 8004a40:	4603      	mov	r3, r0
 8004a42:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d10b      	bne.n	8004a6e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f043 0206 	orr.w	r2, r3, #6
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f043 0220 	orr.w	r2, r3, #32
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a7a:	b004      	add	sp, #16
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	ffbdffbf 	.word	0xffbdffbf

08004a84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f023 0201 	bic.w	r2, r3, #1
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	460b      	mov	r3, r1
 8004ab0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004abe:	78fb      	ldrb	r3, [r7, #3]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d106      	bne.n	8004ad2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	60da      	str	r2, [r3, #12]
 8004ad0:	e00b      	b.n	8004aea <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ad2:	78fb      	ldrb	r3, [r7, #3]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d106      	bne.n	8004ae6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	60da      	str	r2, [r3, #12]
 8004ae4:	e001      	b.n	8004aea <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e003      	b.n	8004af2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004aea:	2032      	movs	r0, #50	; 0x32
 8004aec:	f7fc fe2c 	bl	8001748 <HAL_Delay>

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004afc:	b084      	sub	sp, #16
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b086      	sub	sp, #24
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b16:	2300      	movs	r3, #0
 8004b18:	613b      	str	r3, [r7, #16]
 8004b1a:	e009      	b.n	8004b30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	3340      	adds	r3, #64	; 0x40
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	2200      	movs	r2, #0
 8004b28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	2b0e      	cmp	r3, #14
 8004b34:	d9f2      	bls.n	8004b1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d112      	bne.n	8004b62 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e005      	b.n	8004b6e <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b74:	461a      	mov	r2, r3
 8004b76:	2300      	movs	r3, #0
 8004b78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b80:	4619      	mov	r1, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b88:	461a      	mov	r2, r3
 8004b8a:	680b      	ldr	r3, [r1, #0]
 8004b8c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d10c      	bne.n	8004bae <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d104      	bne.n	8004ba4 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f971 	bl	8004e84 <USB_SetDevSpeed>
 8004ba2:	e018      	b.n	8004bd6 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f96c 	bl	8004e84 <USB_SetDevSpeed>
 8004bac:	e013      	b.n	8004bd6 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d10c      	bne.n	8004bce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d104      	bne.n	8004bc4 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004bba:	2100      	movs	r1, #0
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f961 	bl	8004e84 <USB_SetDevSpeed>
 8004bc2:	e008      	b.n	8004bd6 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f95c 	bl	8004e84 <USB_SetDevSpeed>
 8004bcc:	e003      	b.n	8004bd6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bce:	2103      	movs	r1, #3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f957 	bl	8004e84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bd6:	2110      	movs	r1, #16
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f90b 	bl	8004df4 <USB_FlushTxFifo>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f929 	bl	8004e40 <USB_FlushRxFifo>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfe:	461a      	mov	r2, r3
 8004c00:	2300      	movs	r3, #0
 8004c02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c16:	461a      	mov	r2, r3
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	e043      	b.n	8004caa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c38:	d118      	bne.n	8004c6c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	e013      	b.n	8004c7e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c62:	461a      	mov	r2, r3
 8004c64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	e008      	b.n	8004c7e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c78:	461a      	mov	r2, r3
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ca2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d3b7      	bcc.n	8004c22 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	e043      	b.n	8004d40 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cce:	d118      	bne.n	8004d02 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10a      	bne.n	8004cec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e013      	b.n	8004d14 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	e008      	b.n	8004d14 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0e:	461a      	mov	r2, r3
 8004d10:	2300      	movs	r3, #0
 8004d12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d20:	461a      	mov	r2, r3
 8004d22:	2300      	movs	r3, #0
 8004d24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d32:	461a      	mov	r2, r3
 8004d34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d3b7      	bcc.n	8004cb8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d5a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d110      	bne.n	8004d84 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4b1e      	ldr	r3, [pc, #120]	; (8004de4 <USB_DevInit+0x2e8>)
 8004d6c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4b1a      	ldr	r3, [pc, #104]	; (8004de8 <USB_DevInit+0x2ec>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d105      	bne.n	8004da4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	f043 0210 	orr.w	r2, r3, #16
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699a      	ldr	r2, [r3, #24]
 8004da8:	4b10      	ldr	r3, [pc, #64]	; (8004dec <USB_DevInit+0x2f0>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d005      	beq.n	8004dc2 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	f043 0208 	orr.w	r2, r3, #8
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d105      	bne.n	8004dd4 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699a      	ldr	r2, [r3, #24]
 8004dcc:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <USB_DevInit+0x2f4>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004de0:	b004      	add	sp, #16
 8004de2:	4770      	bx	lr
 8004de4:	00800100 	.word	0x00800100
 8004de8:	00010003 	.word	0x00010003
 8004dec:	803c3800 	.word	0x803c3800
 8004df0:	40000004 	.word	0x40000004

08004df4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	019b      	lsls	r3, r3, #6
 8004e06:	f043 0220 	orr.w	r2, r3, #32
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3301      	adds	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4a09      	ldr	r2, [pc, #36]	; (8004e3c <USB_FlushTxFifo+0x48>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d901      	bls.n	8004e20 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e006      	b.n	8004e2e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	d0f0      	beq.n	8004e0e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	00030d40 	.word	0x00030d40

08004e40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2210      	movs	r2, #16
 8004e50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3301      	adds	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <USB_FlushRxFifo+0x40>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d901      	bls.n	8004e64 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e006      	b.n	8004e72 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f003 0310 	and.w	r3, r3, #16
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d0f0      	beq.n	8004e52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	00030d40 	.word	0x00030d40

08004e84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	68f9      	ldr	r1, [r7, #12]
 8004ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b084      	sub	sp, #16
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ed0:	f043 0302 	orr.w	r3, r3, #2
 8004ed4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004ed6:	2003      	movs	r0, #3
 8004ed8:	f7fc fc36 	bl	8001748 <HAL_Delay>

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4a13      	ldr	r2, [pc, #76]	; (8004f4c <USB_CoreReset+0x64>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e01b      	b.n	8004f3e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	daf2      	bge.n	8004ef4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f043 0201 	orr.w	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3301      	adds	r3, #1
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4a09      	ldr	r2, [pc, #36]	; (8004f4c <USB_CoreReset+0x64>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d901      	bls.n	8004f30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e006      	b.n	8004f3e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d0f0      	beq.n	8004f1e <USB_CoreReset+0x36>

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	00030d40 	.word	0x00030d40

08004f50 <__libc_init_array>:
 8004f50:	b570      	push	{r4, r5, r6, lr}
 8004f52:	4e0d      	ldr	r6, [pc, #52]	; (8004f88 <__libc_init_array+0x38>)
 8004f54:	4c0d      	ldr	r4, [pc, #52]	; (8004f8c <__libc_init_array+0x3c>)
 8004f56:	1ba4      	subs	r4, r4, r6
 8004f58:	10a4      	asrs	r4, r4, #2
 8004f5a:	2500      	movs	r5, #0
 8004f5c:	42a5      	cmp	r5, r4
 8004f5e:	d109      	bne.n	8004f74 <__libc_init_array+0x24>
 8004f60:	4e0b      	ldr	r6, [pc, #44]	; (8004f90 <__libc_init_array+0x40>)
 8004f62:	4c0c      	ldr	r4, [pc, #48]	; (8004f94 <__libc_init_array+0x44>)
 8004f64:	f000 f820 	bl	8004fa8 <_init>
 8004f68:	1ba4      	subs	r4, r4, r6
 8004f6a:	10a4      	asrs	r4, r4, #2
 8004f6c:	2500      	movs	r5, #0
 8004f6e:	42a5      	cmp	r5, r4
 8004f70:	d105      	bne.n	8004f7e <__libc_init_array+0x2e>
 8004f72:	bd70      	pop	{r4, r5, r6, pc}
 8004f74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f78:	4798      	blx	r3
 8004f7a:	3501      	adds	r5, #1
 8004f7c:	e7ee      	b.n	8004f5c <__libc_init_array+0xc>
 8004f7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f82:	4798      	blx	r3
 8004f84:	3501      	adds	r5, #1
 8004f86:	e7f2      	b.n	8004f6e <__libc_init_array+0x1e>
 8004f88:	08004fe0 	.word	0x08004fe0
 8004f8c:	08004fe0 	.word	0x08004fe0
 8004f90:	08004fe0 	.word	0x08004fe0
 8004f94:	08004fe4 	.word	0x08004fe4

08004f98 <memset>:
 8004f98:	4402      	add	r2, r0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d100      	bne.n	8004fa2 <memset+0xa>
 8004fa0:	4770      	bx	lr
 8004fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8004fa6:	e7f9      	b.n	8004f9c <memset+0x4>

08004fa8 <_init>:
 8004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004faa:	bf00      	nop
 8004fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fae:	bc08      	pop	{r3}
 8004fb0:	469e      	mov	lr, r3
 8004fb2:	4770      	bx	lr

08004fb4 <_fini>:
 8004fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb6:	bf00      	nop
 8004fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fba:	bc08      	pop	{r3}
 8004fbc:	469e      	mov	lr, r3
 8004fbe:	4770      	bx	lr
