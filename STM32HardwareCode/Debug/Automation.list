
Automation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fb4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800617c  0800617c  0001617c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006194  08006194  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006194  08006194  00016194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800619c  0800619c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061a0  080061a0  000161a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080061a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  2000000c  080061b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  080061b0  00020740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151cf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ebe  00000000  00000000  0003520b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012c8  00000000  00000000  000380d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001130  00000000  00000000  00039398  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002739d  00000000  00000000  0003a4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000109e5  00000000  00000000  00061865  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f25a8  00000000  00000000  0007224a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001647f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d44  00000000  00000000  00164870  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006164 	.word	0x08006164

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08006164 	.word	0x08006164

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Run_AutomaticMode>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void Run_AutomaticMode(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
	/* Automatic Mode for Unit 1 starts here */

	for(int Id=0;Id<6;Id++)
 800050e:	2300      	movs	r3, #0
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	e00c      	b.n	800052e <Run_AutomaticMode+0x26>
	{
		if(Cylinder_position[Id] != SET_OFF)
 8000514:	4a09      	ldr	r2, [pc, #36]	; (800053c <Run_AutomaticMode+0x34>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800051c:	2b04      	cmp	r3, #4
 800051e:	d003      	beq.n	8000528 <Run_AutomaticMode+0x20>
		{
			Start_Machine(Id);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f80c 	bl	8000540 <Start_Machine>
	for(int Id=0;Id<6;Id++)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	3301      	adds	r3, #1
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b05      	cmp	r3, #5
 8000532:	ddef      	ble.n	8000514 <Run_AutomaticMode+0xc>
			//running_Automatic=AUTOMATIC;
		}
	}
    /* Automatic Mode for Unit 1 ends here */
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	200000a4 	.word	0x200000a4

08000540 <Start_Machine>:


void Start_Machine(uint32_t Id)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	switch(Cylinder_position[Id])
 8000548:	4a8b      	ldr	r2, [pc, #556]	; (8000778 <Start_Machine+0x238>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000550:	2b03      	cmp	r3, #3
 8000552:	f200 8104 	bhi.w	800075e <Start_Machine+0x21e>
 8000556:	a201      	add	r2, pc, #4	; (adr r2, 800055c <Start_Machine+0x1c>)
 8000558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055c:	0800056d 	.word	0x0800056d
 8000560:	0800067f 	.word	0x0800067f
 8000564:	080006d3 	.word	0x080006d3
 8000568:	08000727 	.word	0x08000727
//			  			  	  	  	  Set_Cylinder_Direction(Id,FORWARD);
//			  			  	  	  	  Set_Cylinder_Position(Id,POSITION_2);
//			  			  	  	      Start_APBx_Timer_Interrupt(Id,Machine_information.Station_Information[Id].Down_Movement_Duration);
//			  			  	}

			  	  	  	  	if(Get_Pedal_State(Id,FORWARD)==GPIO_PIN_RESET)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f001 f9be 	bl	80018f4 <Get_Pedal_State>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d125      	bne.n	80005ca <Start_Machine+0x8a>
			  	  	  	  	{
			  	  	  	              Set_Cylinder_Direction(Id,FORWARD);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f000 fd85 	bl	8001094 <Set_Cylinder_Direction>
			  	  	  	  			  Start_APBx_Timer_Interrupt(Id,Machine_information.Station_Information[Id].Down_Movement_Duration);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	b2d8      	uxtb	r0, r3
 800058e:	497b      	ldr	r1, [pc, #492]	; (800077c <Start_Machine+0x23c>)
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	4613      	mov	r3, r2
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	4413      	add	r3, r2
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	440b      	add	r3, r1
 800059c:	330c      	adds	r3, #12
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4619      	mov	r1, r3
 80005a2:	f000 fa37 	bl	8000a14 <Start_APBx_Timer_Interrupt>

			  	  	  	  			  if(Timer_counter[Id]>=Timer_timeout[Id])
 80005a6:	4a76      	ldr	r2, [pc, #472]	; (8000780 <Start_Machine+0x240>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ae:	4975      	ldr	r1, [pc, #468]	; (8000784 <Start_Machine+0x244>)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	f0c0 80d3 	bcc.w	8000762 <Start_Machine+0x222>
			  	  	  	  			  {
			  	  	  	  				  Set_Cylinder_Position(Id,POSITION_2);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2101      	movs	r1, #1
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fa12 	bl	80009ec <Set_Cylinder_Position>
			  	  	  	  	{
			  	  	  	  			  Stop_APBx_Timer_Interrupt(Id);
			  	  	  	  			  Set_Cylinder_Direction(Id,STOP);
			  	  	  	  	}
			  	  	  	   }
		  	  	  	  	  	break;
 80005c8:	e0cb      	b.n	8000762 <Start_Machine+0x222>
			  	  	  	    else if(Get_Pedal_State(Id,REVERSE)==GPIO_PIN_RESET)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2101      	movs	r1, #1
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 f98f 	bl	80018f4 <Get_Pedal_State>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d132      	bne.n	8000642 <Start_Machine+0x102>
			  	  	  	  			  if(Timer_counter[Id]>0)
 80005dc:	4a68      	ldr	r2, [pc, #416]	; (8000780 <Start_Machine+0x240>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d025      	beq.n	8000634 <Start_Machine+0xf4>
			  	  	  	  				  Start_APBx_Timer_Interrupt(Id,Machine_information.Station_Information[Id].Down_Movement_Duration);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	b2d8      	uxtb	r0, r3
 80005ec:	4963      	ldr	r1, [pc, #396]	; (800077c <Start_Machine+0x23c>)
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	4613      	mov	r3, r2
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	4413      	add	r3, r2
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	440b      	add	r3, r1
 80005fa:	330c      	adds	r3, #12
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4619      	mov	r1, r3
 8000600:	f000 fa08 	bl	8000a14 <Start_APBx_Timer_Interrupt>
			  	  	  	  				  Set_Cylinder_Direction(Id,REVERSE);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	2101      	movs	r1, #1
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fd42 	bl	8001094 <Set_Cylinder_Direction>
			  	  	  	  				  if(Timer_counter[Id]>=Timer_timeout[Id])
 8000610:	4a5b      	ldr	r2, [pc, #364]	; (8000780 <Start_Machine+0x240>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000618:	495a      	ldr	r1, [pc, #360]	; (8000784 <Start_Machine+0x244>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000620:	429a      	cmp	r2, r3
 8000622:	f0c0 809e 	bcc.w	8000762 <Start_Machine+0x222>
			  	  	  	  					  Set_Cylinder_Position(Id,POSITION_1);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f000 f9dd 	bl	80009ec <Set_Cylinder_Position>
		  	  	  	  	  	break;
 8000632:	e096      	b.n	8000762 <Start_Machine+0x222>
			  	  	  	  				  Set_Cylinder_Direction(Id,STOP);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2102      	movs	r1, #2
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fd2a 	bl	8001094 <Set_Cylinder_Direction>
		  	  	  	  	  	break;
 8000640:	e08f      	b.n	8000762 <Start_Machine+0x222>
			  	  	  	  	else if(Get_Pedal_State(Id,FORWARD)==GPIO_PIN_SET || Get_Pedal_State(Id,REVERSE)==GPIO_PIN_SET)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f001 f953 	bl	80018f4 <Get_Pedal_State>
 800064e:	4603      	mov	r3, r0
 8000650:	2b01      	cmp	r3, #1
 8000652:	d008      	beq.n	8000666 <Start_Machine+0x126>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2101      	movs	r1, #1
 800065a:	4618      	mov	r0, r3
 800065c:	f001 f94a 	bl	80018f4 <Get_Pedal_State>
 8000660:	4603      	mov	r3, r0
 8000662:	2b01      	cmp	r3, #1
 8000664:	d17d      	bne.n	8000762 <Start_Machine+0x222>
			  	  	  	  			  Stop_APBx_Timer_Interrupt(Id);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fa54 	bl	8000b18 <Stop_APBx_Timer_Interrupt>
			  	  	  	  			  Set_Cylinder_Direction(Id,STOP);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2102      	movs	r1, #2
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fd0c 	bl	8001094 <Set_Cylinder_Direction>
		  	  	  	  	  	break;
 800067c:	e071      	b.n	8000762 <Start_Machine+0x222>

		  case POSITION_2:  if(Timer_counter[Id]>=Timer_timeout[Id])
 800067e:	4a40      	ldr	r2, [pc, #256]	; (8000780 <Start_Machine+0x240>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000686:	493f      	ldr	r1, [pc, #252]	; (8000784 <Start_Machine+0x244>)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800068e:	429a      	cmp	r2, r3
 8000690:	d369      	bcc.n	8000766 <Start_Machine+0x226>
		    				{
			  	  	  	  	  	Stop_APBx_Timer_Interrupt(Id);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4618      	mov	r0, r3
 8000698:	f000 fa3e 	bl	8000b18 <Stop_APBx_Timer_Interrupt>
		    					Set_Cylinder_Direction(Id,STOP);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2102      	movs	r1, #2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 fcf6 	bl	8001094 <Set_Cylinder_Direction>
		    					Set_Cylinder_Position(Id,POSITION_3);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2102      	movs	r1, #2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f99c 	bl	80009ec <Set_Cylinder_Position>
		    					Start_APBx_Timer_Interrupt(Id,Machine_information.Station_Information[Id].Stop_Movement_Duration);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	b2d8      	uxtb	r0, r3
 80006b8:	4930      	ldr	r1, [pc, #192]	; (800077c <Start_Machine+0x23c>)
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	4613      	mov	r3, r2
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4413      	add	r3, r2
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	440b      	add	r3, r1
 80006c6:	3310      	adds	r3, #16
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4619      	mov	r1, r3
 80006cc:	f000 f9a2 	bl	8000a14 <Start_APBx_Timer_Interrupt>
		    				}
		  	  	  	  	  	break;
 80006d0:	e049      	b.n	8000766 <Start_Machine+0x226>

		  case POSITION_3: if(Timer_counter[Id]>=Timer_timeout[Id])
 80006d2:	4a2b      	ldr	r2, [pc, #172]	; (8000780 <Start_Machine+0x240>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006da:	492a      	ldr	r1, [pc, #168]	; (8000784 <Start_Machine+0x244>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d341      	bcc.n	800076a <Start_Machine+0x22a>
		  	  	  	  	   {
			  	  	  	  	  	Stop_APBx_Timer_Interrupt(Id);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fa14 	bl	8000b18 <Stop_APBx_Timer_Interrupt>
			  	  	  	  	  	Start_APBx_Timer_Interrupt(Id,Machine_information.Station_Information[Id].Up_Movement_Duration);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	b2d8      	uxtb	r0, r3
 80006f4:	4921      	ldr	r1, [pc, #132]	; (800077c <Start_Machine+0x23c>)
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	4613      	mov	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4413      	add	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	440b      	add	r3, r1
 8000702:	3314      	adds	r3, #20
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4619      	mov	r1, r3
 8000708:	f000 f984 	bl	8000a14 <Start_APBx_Timer_Interrupt>
								Set_Cylinder_Position(Id,POSITION_4);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2103      	movs	r1, #3
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f96a 	bl	80009ec <Set_Cylinder_Position>
								Set_Cylinder_Direction(Id,REVERSE);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2101      	movs	r1, #1
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fcb8 	bl	8001094 <Set_Cylinder_Direction>
		  	  	  	  	   }
		  	  	  	  	  	break;
 8000724:	e021      	b.n	800076a <Start_Machine+0x22a>

		  case POSITION_4: if(Timer_counter[Id]>=Timer_timeout[Id])
 8000726:	4a16      	ldr	r2, [pc, #88]	; (8000780 <Start_Machine+0x240>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800072e:	4915      	ldr	r1, [pc, #84]	; (8000784 <Start_Machine+0x244>)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000736:	429a      	cmp	r2, r3
 8000738:	d319      	bcc.n	800076e <Start_Machine+0x22e>
		  	  	  	  	   {
			  	  	  	  	  	Stop_APBx_Timer_Interrupt(Id);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f9ea 	bl	8000b18 <Stop_APBx_Timer_Interrupt>
		    					Set_Cylinder_Direction(Id,STOP);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2102      	movs	r1, #2
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fca2 	bl	8001094 <Set_Cylinder_Direction>
		    					Set_Cylinder_Position(Id,POSITION_1);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f948 	bl	80009ec <Set_Cylinder_Position>
		  	  	  	  	   }
		  	  	  	  	   break;
 800075c:	e007      	b.n	800076e <Start_Machine+0x22e>

		  default         : break;
 800075e:	bf00      	nop
 8000760:	e006      	b.n	8000770 <Start_Machine+0x230>
		  	  	  	  	  	break;
 8000762:	bf00      	nop
 8000764:	e004      	b.n	8000770 <Start_Machine+0x230>
		  	  	  	  	  	break;
 8000766:	bf00      	nop
 8000768:	e002      	b.n	8000770 <Start_Machine+0x230>
		  	  	  	  	  	break;
 800076a:	bf00      	nop
 800076c:	e000      	b.n	8000770 <Start_Machine+0x230>
		  	  	  	  	   break;
 800076e:	bf00      	nop
		}

}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200000a4 	.word	0x200000a4
 800077c:	20000028 	.word	0x20000028
 8000780:	200000bc 	.word	0x200000bc
 8000784:	200000d4 	.word	0x200000d4

08000788 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a77      	ldr	r2, [pc, #476]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d120      	bne.n	80007dc <HAL_TIM_PeriodElapsedCallback+0x54>
	{
		if(Cylinder_position[STATION_1]==POSITION_1)
 800079a:	4b77      	ldr	r3, [pc, #476]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d117      	bne.n	80007d2 <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			if(Machine_information.Station_Information[STATION_1].Cylinder_direction==FORWARD)
 80007a2:	4b76      	ldr	r3, [pc, #472]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80007a4:	7a1b      	ldrb	r3, [r3, #8]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d105      	bne.n	80007b6 <HAL_TIM_PeriodElapsedCallback+0x2e>
			{
				Timer_counter[STATION_1]++;
 80007aa:	4b75      	ldr	r3, [pc, #468]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	4a73      	ldr	r2, [pc, #460]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	e012      	b.n	80007dc <HAL_TIM_PeriodElapsedCallback+0x54>
			}
			else if(Machine_information.Station_Information[STATION_1].Cylinder_direction==REVERSE)
 80007b6:	4b71      	ldr	r3, [pc, #452]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80007b8:	7a1b      	ldrb	r3, [r3, #8]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d10e      	bne.n	80007dc <HAL_TIM_PeriodElapsedCallback+0x54>
			{
				if(Timer_counter[STATION_1]>0)
 80007be:	4b70      	ldr	r3, [pc, #448]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00a      	beq.n	80007dc <HAL_TIM_PeriodElapsedCallback+0x54>
				  Timer_counter[STATION_1]--;
 80007c6:	4b6e      	ldr	r3, [pc, #440]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	4a6c      	ldr	r2, [pc, #432]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	e004      	b.n	80007dc <HAL_TIM_PeriodElapsedCallback+0x54>

			}
		}
		else
		{
			Timer_counter[STATION_1]++;
 80007d2:	4b6b      	ldr	r3, [pc, #428]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	4a69      	ldr	r2, [pc, #420]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80007da:	6013      	str	r3, [r2, #0]
		}
	}

	if(htim->Instance == TIM2)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007e4:	d120      	bne.n	8000828 <HAL_TIM_PeriodElapsedCallback+0xa0>
	{
		if(Cylinder_position[STATION_2]==POSITION_1)
 80007e6:	4b64      	ldr	r3, [pc, #400]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d117      	bne.n	800081e <HAL_TIM_PeriodElapsedCallback+0x96>
		{
			if(Machine_information.Station_Information[STATION_2].Cylinder_direction==FORWARD)
 80007ee:	4b63      	ldr	r3, [pc, #396]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80007f0:	7f1b      	ldrb	r3, [r3, #28]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d105      	bne.n	8000802 <HAL_TIM_PeriodElapsedCallback+0x7a>
			{
				Timer_counter[STATION_2]++;
 80007f6:	4b62      	ldr	r3, [pc, #392]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	3301      	adds	r3, #1
 80007fc:	4a60      	ldr	r2, [pc, #384]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80007fe:	6053      	str	r3, [r2, #4]
 8000800:	e012      	b.n	8000828 <HAL_TIM_PeriodElapsedCallback+0xa0>
			}
			else if(Machine_information.Station_Information[STATION_2].Cylinder_direction==REVERSE)
 8000802:	4b5e      	ldr	r3, [pc, #376]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000804:	7f1b      	ldrb	r3, [r3, #28]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d10e      	bne.n	8000828 <HAL_TIM_PeriodElapsedCallback+0xa0>
			{
				if(Timer_counter[STATION_2]>0)
 800080a:	4b5d      	ldr	r3, [pc, #372]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d00a      	beq.n	8000828 <HAL_TIM_PeriodElapsedCallback+0xa0>
				  Timer_counter[STATION_2]--;
 8000812:	4b5b      	ldr	r3, [pc, #364]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	4a59      	ldr	r2, [pc, #356]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800081a:	6053      	str	r3, [r2, #4]
 800081c:	e004      	b.n	8000828 <HAL_TIM_PeriodElapsedCallback+0xa0>

			}
		}
		else
		{
			Timer_counter[STATION_2]++;
 800081e:	4b58      	ldr	r3, [pc, #352]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	3301      	adds	r3, #1
 8000824:	4a56      	ldr	r2, [pc, #344]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000826:	6053      	str	r3, [r2, #4]
		}
	}

	if(htim->Instance == TIM3)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a55      	ldr	r2, [pc, #340]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d122      	bne.n	8000878 <HAL_TIM_PeriodElapsedCallback+0xf0>
	{
		if(Cylinder_position[STATION_3]==POSITION_1)
 8000832:	4b51      	ldr	r3, [pc, #324]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d119      	bne.n	800086e <HAL_TIM_PeriodElapsedCallback+0xe6>
		{
			if(Machine_information.Station_Information[STATION_3].Cylinder_direction==FORWARD)
 800083a:	4b50      	ldr	r3, [pc, #320]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800083c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000840:	2b00      	cmp	r3, #0
 8000842:	d105      	bne.n	8000850 <HAL_TIM_PeriodElapsedCallback+0xc8>
			{
				Timer_counter[STATION_3]++;
 8000844:	4b4e      	ldr	r3, [pc, #312]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	3301      	adds	r3, #1
 800084a:	4a4d      	ldr	r2, [pc, #308]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800084c:	6093      	str	r3, [r2, #8]
 800084e:	e013      	b.n	8000878 <HAL_TIM_PeriodElapsedCallback+0xf0>
			}
			else if(Machine_information.Station_Information[STATION_3].Cylinder_direction==REVERSE)
 8000850:	4b4a      	ldr	r3, [pc, #296]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000852:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000856:	2b01      	cmp	r3, #1
 8000858:	d10e      	bne.n	8000878 <HAL_TIM_PeriodElapsedCallback+0xf0>
			{
				if(Timer_counter[STATION_3]>0)
 800085a:	4b49      	ldr	r3, [pc, #292]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d00a      	beq.n	8000878 <HAL_TIM_PeriodElapsedCallback+0xf0>
				  Timer_counter[STATION_3]--;
 8000862:	4b47      	ldr	r3, [pc, #284]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	3b01      	subs	r3, #1
 8000868:	4a45      	ldr	r2, [pc, #276]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800086a:	6093      	str	r3, [r2, #8]
 800086c:	e004      	b.n	8000878 <HAL_TIM_PeriodElapsedCallback+0xf0>

			}
		}
		else
		{
			Timer_counter[STATION_3]++;
 800086e:	4b44      	ldr	r3, [pc, #272]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	3301      	adds	r3, #1
 8000874:	4a42      	ldr	r2, [pc, #264]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000876:	6093      	str	r3, [r2, #8]
		}
	}

	if(htim->Instance == TIM4)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a42      	ldr	r2, [pc, #264]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d122      	bne.n	80008c8 <HAL_TIM_PeriodElapsedCallback+0x140>
	{
		if(Cylinder_position[STATION_4]==POSITION_1)
 8000882:	4b3d      	ldr	r3, [pc, #244]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d119      	bne.n	80008be <HAL_TIM_PeriodElapsedCallback+0x136>
		{
			if(Machine_information.Station_Information[STATION_4].Cylinder_direction==FORWARD)
 800088a:	4b3c      	ldr	r3, [pc, #240]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800088c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000890:	2b00      	cmp	r3, #0
 8000892:	d105      	bne.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x118>
			{
				Timer_counter[STATION_4]++;
 8000894:	4b3a      	ldr	r3, [pc, #232]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	3301      	adds	r3, #1
 800089a:	4a39      	ldr	r2, [pc, #228]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800089c:	60d3      	str	r3, [r2, #12]
 800089e:	e013      	b.n	80008c8 <HAL_TIM_PeriodElapsedCallback+0x140>
			}
			else if(Machine_information.Station_Information[STATION_4].Cylinder_direction==REVERSE)
 80008a0:	4b36      	ldr	r3, [pc, #216]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80008a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d10e      	bne.n	80008c8 <HAL_TIM_PeriodElapsedCallback+0x140>
			{
				if(Timer_counter[STATION_4]>0)
 80008aa:	4b35      	ldr	r3, [pc, #212]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d00a      	beq.n	80008c8 <HAL_TIM_PeriodElapsedCallback+0x140>
				  Timer_counter[STATION_4]--;
 80008b2:	4b33      	ldr	r3, [pc, #204]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	4a31      	ldr	r2, [pc, #196]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80008ba:	60d3      	str	r3, [r2, #12]
 80008bc:	e004      	b.n	80008c8 <HAL_TIM_PeriodElapsedCallback+0x140>

			}
		}
		else
		{
			Timer_counter[STATION_4]++;
 80008be:	4b30      	ldr	r3, [pc, #192]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a2e      	ldr	r2, [pc, #184]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80008c6:	60d3      	str	r3, [r2, #12]
		}
	}

	if(htim->Instance == TIM5)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a2f      	ldr	r2, [pc, #188]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x204>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d122      	bne.n	8000918 <HAL_TIM_PeriodElapsedCallback+0x190>
	{
		if(Cylinder_position[STATION_5]==POSITION_1)
 80008d2:	4b29      	ldr	r3, [pc, #164]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80008d4:	691b      	ldr	r3, [r3, #16]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d119      	bne.n	800090e <HAL_TIM_PeriodElapsedCallback+0x186>
		{
			if(Machine_information.Station_Information[STATION_5].Cylinder_direction==FORWARD)
 80008da:	4b28      	ldr	r3, [pc, #160]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80008dc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d105      	bne.n	80008f0 <HAL_TIM_PeriodElapsedCallback+0x168>
			{
				Timer_counter[STATION_5]++;
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80008e6:	691b      	ldr	r3, [r3, #16]
 80008e8:	3301      	adds	r3, #1
 80008ea:	4a25      	ldr	r2, [pc, #148]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80008ec:	6113      	str	r3, [r2, #16]
 80008ee:	e013      	b.n	8000918 <HAL_TIM_PeriodElapsedCallback+0x190>
			}
			else if(Machine_information.Station_Information[STATION_5].Cylinder_direction==REVERSE)
 80008f0:	4b22      	ldr	r3, [pc, #136]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80008f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d10e      	bne.n	8000918 <HAL_TIM_PeriodElapsedCallback+0x190>
			{
				if(Timer_counter[STATION_5]>0)
 80008fa:	4b21      	ldr	r3, [pc, #132]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80008fc:	691b      	ldr	r3, [r3, #16]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d00a      	beq.n	8000918 <HAL_TIM_PeriodElapsedCallback+0x190>
				  Timer_counter[STATION_5]--;
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000904:	691b      	ldr	r3, [r3, #16]
 8000906:	3b01      	subs	r3, #1
 8000908:	4a1d      	ldr	r2, [pc, #116]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800090a:	6113      	str	r3, [r2, #16]
 800090c:	e004      	b.n	8000918 <HAL_TIM_PeriodElapsedCallback+0x190>

			}
		}
		else
		{
			Timer_counter[STATION_5]++;
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000910:	691b      	ldr	r3, [r3, #16]
 8000912:	3301      	adds	r3, #1
 8000914:	4a1a      	ldr	r2, [pc, #104]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000916:	6113      	str	r3, [r2, #16]
		}
	}

	if(htim->Instance == TIM6)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a1c      	ldr	r2, [pc, #112]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d122      	bne.n	8000968 <HAL_TIM_PeriodElapsedCallback+0x1e0>
	{
		if(Cylinder_position[STATION_6]==POSITION_1)
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d119      	bne.n	800095e <HAL_TIM_PeriodElapsedCallback+0x1d6>
		{
			if(Machine_information.Station_Information[STATION_6].Cylinder_direction==FORWARD)
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800092c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8000930:	2b00      	cmp	r3, #0
 8000932:	d105      	bne.n	8000940 <HAL_TIM_PeriodElapsedCallback+0x1b8>
			{
				Timer_counter[STATION_6]++;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	3301      	adds	r3, #1
 800093a:	4a11      	ldr	r2, [pc, #68]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800093c:	6153      	str	r3, [r2, #20]
		else
		{
			Timer_counter[STATION_6]++;
		}
	}
}
 800093e:	e013      	b.n	8000968 <HAL_TIM_PeriodElapsedCallback+0x1e0>
			else if(Machine_information.Station_Information[STATION_6].Cylinder_direction==REVERSE)
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000942:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8000946:	2b01      	cmp	r3, #1
 8000948:	d10e      	bne.n	8000968 <HAL_TIM_PeriodElapsedCallback+0x1e0>
				if(Timer_counter[STATION_6]>0)
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d00a      	beq.n	8000968 <HAL_TIM_PeriodElapsedCallback+0x1e0>
				  Timer_counter[STATION_6]--;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	3b01      	subs	r3, #1
 8000958:	4a09      	ldr	r2, [pc, #36]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800095a:	6153      	str	r3, [r2, #20]
}
 800095c:	e004      	b.n	8000968 <HAL_TIM_PeriodElapsedCallback+0x1e0>
			Timer_counter[STATION_6]++;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	3301      	adds	r3, #1
 8000964:	4a06      	ldr	r2, [pc, #24]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000966:	6153      	str	r3, [r2, #20]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	40010000 	.word	0x40010000
 8000978:	200000a4 	.word	0x200000a4
 800097c:	20000028 	.word	0x20000028
 8000980:	200000bc 	.word	0x200000bc
 8000984:	40000400 	.word	0x40000400
 8000988:	40000800 	.word	0x40000800
 800098c:	40000c00 	.word	0x40000c00
 8000990:	40001000 	.word	0x40001000

08000994 <Stop_Machine>:


void Stop_Machine(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

	Device_init();
 8000998:	f001 f93a 	bl	8001c10 <Device_init>

	while(1)
	{
		HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2101      	movs	r1, #1
 80009a0:	4807      	ldr	r0, [pc, #28]	; (80009c0 <Stop_Machine+0x2c>)
 80009a2:	f002 fe93 	bl	80036cc <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80009a6:	20c8      	movs	r0, #200	; 0xc8
 80009a8:	f001 ff2e 	bl	8002808 <HAL_Delay>
		HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2101      	movs	r1, #1
 80009b0:	4803      	ldr	r0, [pc, #12]	; (80009c0 <Stop_Machine+0x2c>)
 80009b2:	f002 fe8b 	bl	80036cc <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80009b6:	20c8      	movs	r0, #200	; 0xc8
 80009b8:	f001 ff26 	bl	8002808 <HAL_Delay>
		HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_SET);
 80009bc:	e7ee      	b.n	800099c <Stop_Machine+0x8>
 80009be:	bf00      	nop
 80009c0:	40021800 	.word	0x40021800

080009c4 <Get_Cylinder_Position>:




uint32_t Get_Cylinder_Position(Station_Id Id)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
	uint32_t temp;

	temp=Cylinder_position[Id];
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <Get_Cylinder_Position+0x24>)
 80009d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d6:	60fb      	str	r3, [r7, #12]

	return temp;
 80009d8:	68fb      	ldr	r3, [r7, #12]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	200000a4 	.word	0x200000a4

080009ec <Set_Cylinder_Position>:

void Set_Cylinder_Position(Station_Id Id,uint32_t Position)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	6039      	str	r1, [r7, #0]
 80009f6:	71fb      	strb	r3, [r7, #7]

	Cylinder_position[Id]=Position;
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	4905      	ldr	r1, [pc, #20]	; (8000a10 <Set_Cylinder_Position+0x24>)
 80009fc:	683a      	ldr	r2, [r7, #0]
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	200000a4 	.word	0x200000a4

08000a14 <Start_APBx_Timer_Interrupt>:




void Start_APBx_Timer_Interrupt(Station_Id Id,uint32_t Duration)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
	Timer_timeout[Id]=Duration;
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	4930      	ldr	r1, [pc, #192]	; (8000ae4 <Start_APBx_Timer_Interrupt+0xd0>)
 8000a24:	683a      	ldr	r2, [r7, #0]
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	switch(Id)
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b05      	cmp	r3, #5
 8000a2e:	d853      	bhi.n	8000ad8 <Start_APBx_Timer_Interrupt+0xc4>
 8000a30:	a201      	add	r2, pc, #4	; (adr r2, 8000a38 <Start_APBx_Timer_Interrupt+0x24>)
 8000a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a36:	bf00      	nop
 8000a38:	08000a51 	.word	0x08000a51
 8000a3c:	08000a67 	.word	0x08000a67
 8000a40:	08000a81 	.word	0x08000a81
 8000a44:	08000a97 	.word	0x08000a97
 8000a48:	08000aad 	.word	0x08000aad
 8000a4c:	08000ac3 	.word	0x08000ac3
	{
		case STATION_1: {TIM1->PSC = APB1_CLOCK_FREQ;
 8000a50:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <Start_APBx_Timer_Interrupt+0xd4>)
 8000a52:	4a26      	ldr	r2, [pc, #152]	; (8000aec <Start_APBx_Timer_Interrupt+0xd8>)
 8000a54:	629a      	str	r2, [r3, #40]	; 0x28
						 TIM1->ARR = TIMER_CALLBACK_TIMEOUT;
 8000a56:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <Start_APBx_Timer_Interrupt+0xd4>)
 8000a58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a5c:	62da      	str	r2, [r3, #44]	; 0x2c
						 HAL_TIM_Base_Start_IT(&htim1);}
 8000a5e:	4824      	ldr	r0, [pc, #144]	; (8000af0 <Start_APBx_Timer_Interrupt+0xdc>)
 8000a60:	f004 f880 	bl	8004b64 <HAL_TIM_Base_Start_IT>
						 break;
 8000a64:	e039      	b.n	8000ada <Start_APBx_Timer_Interrupt+0xc6>

		case STATION_2: {TIM2->PSC = APB1_CLOCK_FREQ;
 8000a66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a6a:	4a20      	ldr	r2, [pc, #128]	; (8000aec <Start_APBx_Timer_Interrupt+0xd8>)
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28
						 TIM2->ARR = TIMER_CALLBACK_TIMEOUT;
 8000a6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a76:	62da      	str	r2, [r3, #44]	; 0x2c
						 HAL_TIM_Base_Start_IT(&htim2);}
 8000a78:	481e      	ldr	r0, [pc, #120]	; (8000af4 <Start_APBx_Timer_Interrupt+0xe0>)
 8000a7a:	f004 f873 	bl	8004b64 <HAL_TIM_Base_Start_IT>
						 break;
 8000a7e:	e02c      	b.n	8000ada <Start_APBx_Timer_Interrupt+0xc6>

		case STATION_3: {TIM3->PSC = APB1_CLOCK_FREQ;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <Start_APBx_Timer_Interrupt+0xe4>)
 8000a82:	4a1a      	ldr	r2, [pc, #104]	; (8000aec <Start_APBx_Timer_Interrupt+0xd8>)
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28
						 TIM3->ARR = TIMER_CALLBACK_TIMEOUT;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <Start_APBx_Timer_Interrupt+0xe4>)
 8000a88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a8c:	62da      	str	r2, [r3, #44]	; 0x2c
						 HAL_TIM_Base_Start_IT(&htim3);}
 8000a8e:	481b      	ldr	r0, [pc, #108]	; (8000afc <Start_APBx_Timer_Interrupt+0xe8>)
 8000a90:	f004 f868 	bl	8004b64 <HAL_TIM_Base_Start_IT>
						 break;
 8000a94:	e021      	b.n	8000ada <Start_APBx_Timer_Interrupt+0xc6>

		case STATION_4: {TIM4->PSC = APB1_CLOCK_FREQ;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <Start_APBx_Timer_Interrupt+0xec>)
 8000a98:	4a14      	ldr	r2, [pc, #80]	; (8000aec <Start_APBx_Timer_Interrupt+0xd8>)
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
						 TIM4->ARR = TIMER_CALLBACK_TIMEOUT;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <Start_APBx_Timer_Interrupt+0xec>)
 8000a9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aa2:	62da      	str	r2, [r3, #44]	; 0x2c
						 HAL_TIM_Base_Start_IT(&htim4);}
 8000aa4:	4817      	ldr	r0, [pc, #92]	; (8000b04 <Start_APBx_Timer_Interrupt+0xf0>)
 8000aa6:	f004 f85d 	bl	8004b64 <HAL_TIM_Base_Start_IT>
						 break;
 8000aaa:	e016      	b.n	8000ada <Start_APBx_Timer_Interrupt+0xc6>

		case STATION_5: {TIM5->PSC = APB1_CLOCK_FREQ;
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <Start_APBx_Timer_Interrupt+0xf4>)
 8000aae:	4a0f      	ldr	r2, [pc, #60]	; (8000aec <Start_APBx_Timer_Interrupt+0xd8>)
 8000ab0:	629a      	str	r2, [r3, #40]	; 0x28
						 TIM5->ARR = TIMER_CALLBACK_TIMEOUT;
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <Start_APBx_Timer_Interrupt+0xf4>)
 8000ab4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ab8:	62da      	str	r2, [r3, #44]	; 0x2c
						 HAL_TIM_Base_Start_IT(&htim5);}
 8000aba:	4814      	ldr	r0, [pc, #80]	; (8000b0c <Start_APBx_Timer_Interrupt+0xf8>)
 8000abc:	f004 f852 	bl	8004b64 <HAL_TIM_Base_Start_IT>
						 break;
 8000ac0:	e00b      	b.n	8000ada <Start_APBx_Timer_Interrupt+0xc6>

		case STATION_6: {TIM6->PSC = APB1_CLOCK_FREQ;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <Start_APBx_Timer_Interrupt+0xfc>)
 8000ac4:	4a09      	ldr	r2, [pc, #36]	; (8000aec <Start_APBx_Timer_Interrupt+0xd8>)
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
						 TIM6->ARR = TIMER_CALLBACK_TIMEOUT;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <Start_APBx_Timer_Interrupt+0xfc>)
 8000aca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
						 HAL_TIM_Base_Start_IT(&htim6);}
 8000ad0:	4810      	ldr	r0, [pc, #64]	; (8000b14 <Start_APBx_Timer_Interrupt+0x100>)
 8000ad2:	f004 f847 	bl	8004b64 <HAL_TIM_Base_Start_IT>
						 break;
 8000ad6:	e000      	b.n	8000ada <Start_APBx_Timer_Interrupt+0xc6>

		default       :  break;
 8000ad8:	bf00      	nop
	}
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000d4 	.word	0x200000d4
 8000ae8:	40010000 	.word	0x40010000
 8000aec:	0001a5e0 	.word	0x0001a5e0
 8000af0:	20000238 	.word	0x20000238
 8000af4:	20000278 	.word	0x20000278
 8000af8:	40000400 	.word	0x40000400
 8000afc:	200001b8 	.word	0x200001b8
 8000b00:	40000800 	.word	0x40000800
 8000b04:	20000138 	.word	0x20000138
 8000b08:	40000c00 	.word	0x40000c00
 8000b0c:	20000178 	.word	0x20000178
 8000b10:	40001000 	.word	0x40001000
 8000b14:	200001f8 	.word	0x200001f8

08000b18 <Stop_APBx_Timer_Interrupt>:



void Stop_APBx_Timer_Interrupt(Station_Id Id)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]

	if(Cylinder_position[Id] != POSITION_1)
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <Stop_APBx_Timer_Interrupt+0x80>)
 8000b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d004      	beq.n	8000b38 <Stop_APBx_Timer_Interrupt+0x20>
	{
		Timer_counter[Id]=0;
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	4a1a      	ldr	r2, [pc, #104]	; (8000b9c <Stop_APBx_Timer_Interrupt+0x84>)
 8000b32:	2100      	movs	r1, #0
 8000b34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	switch(Id)
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	2b05      	cmp	r3, #5
 8000b3c:	d826      	bhi.n	8000b8c <Stop_APBx_Timer_Interrupt+0x74>
 8000b3e:	a201      	add	r2, pc, #4	; (adr r2, 8000b44 <Stop_APBx_Timer_Interrupt+0x2c>)
 8000b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b44:	08000b5d 	.word	0x08000b5d
 8000b48:	08000b65 	.word	0x08000b65
 8000b4c:	08000b6d 	.word	0x08000b6d
 8000b50:	08000b75 	.word	0x08000b75
 8000b54:	08000b7d 	.word	0x08000b7d
 8000b58:	08000b85 	.word	0x08000b85
		{
			case STATION_1: HAL_TIM_Base_Stop_IT(&htim1);
 8000b5c:	4810      	ldr	r0, [pc, #64]	; (8000ba0 <Stop_APBx_Timer_Interrupt+0x88>)
 8000b5e:	f004 f82b 	bl	8004bb8 <HAL_TIM_Base_Stop_IT>
							break;
 8000b62:	e014      	b.n	8000b8e <Stop_APBx_Timer_Interrupt+0x76>

			case STATION_2: HAL_TIM_Base_Stop_IT(&htim2);
 8000b64:	480f      	ldr	r0, [pc, #60]	; (8000ba4 <Stop_APBx_Timer_Interrupt+0x8c>)
 8000b66:	f004 f827 	bl	8004bb8 <HAL_TIM_Base_Stop_IT>
							break;
 8000b6a:	e010      	b.n	8000b8e <Stop_APBx_Timer_Interrupt+0x76>

			case STATION_3: HAL_TIM_Base_Stop_IT(&htim3);
 8000b6c:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <Stop_APBx_Timer_Interrupt+0x90>)
 8000b6e:	f004 f823 	bl	8004bb8 <HAL_TIM_Base_Stop_IT>
							break;
 8000b72:	e00c      	b.n	8000b8e <Stop_APBx_Timer_Interrupt+0x76>

			case STATION_4: HAL_TIM_Base_Stop_IT(&htim4);
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <Stop_APBx_Timer_Interrupt+0x94>)
 8000b76:	f004 f81f 	bl	8004bb8 <HAL_TIM_Base_Stop_IT>
							break;
 8000b7a:	e008      	b.n	8000b8e <Stop_APBx_Timer_Interrupt+0x76>

			case STATION_5: HAL_TIM_Base_Stop_IT(&htim5);
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <Stop_APBx_Timer_Interrupt+0x98>)
 8000b7e:	f004 f81b 	bl	8004bb8 <HAL_TIM_Base_Stop_IT>
							break;
 8000b82:	e004      	b.n	8000b8e <Stop_APBx_Timer_Interrupt+0x76>

			case STATION_6: HAL_TIM_Base_Stop_IT(&htim6);
 8000b84:	480b      	ldr	r0, [pc, #44]	; (8000bb4 <Stop_APBx_Timer_Interrupt+0x9c>)
 8000b86:	f004 f817 	bl	8004bb8 <HAL_TIM_Base_Stop_IT>
							break;
 8000b8a:	e000      	b.n	8000b8e <Stop_APBx_Timer_Interrupt+0x76>

			default       : break;
 8000b8c:	bf00      	nop
		}
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200000a4 	.word	0x200000a4
 8000b9c:	200000bc 	.word	0x200000bc
 8000ba0:	20000238 	.word	0x20000238
 8000ba4:	20000278 	.word	0x20000278
 8000ba8:	200001b8 	.word	0x200001b8
 8000bac:	20000138 	.word	0x20000138
 8000bb0:	20000178 	.word	0x20000178
 8000bb4:	200001f8 	.word	0x200001f8

08000bb8 <Run_ManualMode>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Run_ManualMode(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	//if(running_Automatic==AUTOMATIC)
	//{
		//Device_init();
		//running_Automatic=MANUAL;
	//}
  	for(int Id=STATION_1;Id<END_STATION;Id++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	e007      	b.n	8000bd4 <Run_ManualMode+0x1c>
  	{
  		Start_Manual_Operation(Id);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 f80a 	bl	8000be2 <Start_Manual_Operation>
  	for(int Id=STATION_1;Id<END_STATION;Id++)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b05      	cmp	r3, #5
 8000bd8:	ddf4      	ble.n	8000bc4 <Run_ManualMode+0xc>
  	}
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <Start_Manual_Operation>:

void Start_Manual_Operation(Station_Id Id)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	71fb      	strb	r3, [r7, #7]
	if(Get_Pedal_State(Id,FORWARD)==GPIO_PIN_RESET)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 fe7f 	bl	80018f4 <Get_Pedal_State>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d105      	bne.n	8000c08 <Start_Manual_Operation+0x26>
	{
		Set_Cylinder_Direction(Id,FORWARD);
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 fa47 	bl	8001094 <Set_Cylinder_Direction>
	}
	else
	{
		Set_Cylinder_Direction(Id,STOP);
	}
}
 8000c06:	e012      	b.n	8000c2e <Start_Manual_Operation+0x4c>
	else if(Get_Pedal_State(Id,REVERSE)==GPIO_PIN_RESET)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 fe71 	bl	80018f4 <Get_Pedal_State>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d105      	bne.n	8000c24 <Start_Manual_Operation+0x42>
		Set_Cylinder_Direction(Id,REVERSE);
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 fa39 	bl	8001094 <Set_Cylinder_Direction>
}
 8000c22:	e004      	b.n	8000c2e <Start_Manual_Operation+0x4c>
		Set_Cylinder_Direction(Id,STOP);
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	2102      	movs	r1, #2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 fa33 	bl	8001094 <Set_Cylinder_Direction>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <MX_ETH_Init+0x78>)
 8000c3e:	4a1d      	ldr	r2, [pc, #116]	; (8000cb4 <MX_ETH_Init+0x7c>)
 8000c40:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000c42:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <MX_ETH_Init+0x78>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_ETH_Init+0x78>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <MX_ETH_Init+0x78>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_ETH_Init+0x78>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	2280      	movs	r2, #128	; 0x80
 8000c5e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <MX_ETH_Init+0x78>)
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	3302      	adds	r3, #2
 8000c66:	22e1      	movs	r2, #225	; 0xe1
 8000c68:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_ETH_Init+0x78>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	3303      	adds	r3, #3
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_ETH_Init+0x78>)
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_ETH_Init+0x78>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	3305      	adds	r3, #5
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_ETH_Init+0x78>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <MX_ETH_Init+0x78>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_ETH_Init+0x78>)
 8000c96:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c9a:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_ETH_Init+0x78>)
 8000c9e:	f001 fee7 	bl	8002a70 <HAL_ETH_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000ca8:	f001 f88e 	bl	8001dc8 <Error_Handler>
  }

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200000f0 	.word	0x200000f0
 8000cb4:	40028000 	.word	0x40028000

08000cb8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	; 0x38
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a4e      	ldr	r2, [pc, #312]	; (8000e10 <HAL_ETH_MspInit+0x158>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	f040 8096 	bne.w	8000e08 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000cdc:	4b4d      	ldr	r3, [pc, #308]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	4a4c      	ldr	r2, [pc, #304]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000ce2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce8:	4b4a      	ldr	r3, [pc, #296]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf0:	623b      	str	r3, [r7, #32]
 8000cf2:	6a3b      	ldr	r3, [r7, #32]
 8000cf4:	4b47      	ldr	r3, [pc, #284]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf8:	4a46      	ldr	r2, [pc, #280]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000cfa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000d00:	4b44      	ldr	r3, [pc, #272]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d08:	61fb      	str	r3, [r7, #28]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	4b41      	ldr	r3, [pc, #260]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4a40      	ldr	r2, [pc, #256]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30
 8000d18:	4b3e      	ldr	r3, [pc, #248]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d20:	61bb      	str	r3, [r7, #24]
 8000d22:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d24:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	4a3a      	ldr	r2, [pc, #232]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d30:	4b38      	ldr	r3, [pc, #224]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3c:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	4a34      	ldr	r2, [pc, #208]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6313      	str	r3, [r2, #48]	; 0x30
 8000d48:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d54:	4b2f      	ldr	r3, [pc, #188]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	4a2e      	ldr	r2, [pc, #184]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d60:	4b2c      	ldr	r3, [pc, #176]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d6c:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	4a28      	ldr	r2, [pc, #160]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d76:	6313      	str	r3, [r2, #48]	; 0x30
 8000d78:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <HAL_ETH_MspInit+0x15c>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d84:	2332      	movs	r3, #50	; 0x32
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d94:	230b      	movs	r3, #11
 8000d96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	481e      	ldr	r0, [pc, #120]	; (8000e18 <HAL_ETH_MspInit+0x160>)
 8000da0:	f002 fad2 	bl	8003348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000da4:	2386      	movs	r3, #134	; 0x86
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db4:	230b      	movs	r3, #11
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4817      	ldr	r0, [pc, #92]	; (8000e1c <HAL_ETH_MspInit+0x164>)
 8000dc0:	f002 fac2 	bl	8003348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000dc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd6:	230b      	movs	r3, #11
 8000dd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dde:	4619      	mov	r1, r3
 8000de0:	480f      	ldr	r0, [pc, #60]	; (8000e20 <HAL_ETH_MspInit+0x168>)
 8000de2:	f002 fab1 	bl	8003348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000de6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df8:	230b      	movs	r3, #11
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	4808      	ldr	r0, [pc, #32]	; (8000e24 <HAL_ETH_MspInit+0x16c>)
 8000e04:	f002 faa0 	bl	8003348 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000e08:	bf00      	nop
 8000e0a:	3738      	adds	r7, #56	; 0x38
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40028000 	.word	0x40028000
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020800 	.word	0x40020800
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	40020400 	.word	0x40020400
 8000e24:	40021800 	.word	0x40021800

08000e28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08e      	sub	sp, #56	; 0x38
 8000e2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	4b8c      	ldr	r3, [pc, #560]	; (8001070 <MX_GPIO_Init+0x248>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a8b      	ldr	r2, [pc, #556]	; (8001070 <MX_GPIO_Init+0x248>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b89      	ldr	r3, [pc, #548]	; (8001070 <MX_GPIO_Init+0x248>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	623b      	str	r3, [r7, #32]
 8000e54:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e56:	4b86      	ldr	r3, [pc, #536]	; (8001070 <MX_GPIO_Init+0x248>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a85      	ldr	r2, [pc, #532]	; (8001070 <MX_GPIO_Init+0x248>)
 8000e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b83      	ldr	r3, [pc, #524]	; (8001070 <MX_GPIO_Init+0x248>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6a:	61fb      	str	r3, [r7, #28]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	4b80      	ldr	r3, [pc, #512]	; (8001070 <MX_GPIO_Init+0x248>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a7f      	ldr	r2, [pc, #508]	; (8001070 <MX_GPIO_Init+0x248>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b7d      	ldr	r3, [pc, #500]	; (8001070 <MX_GPIO_Init+0x248>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	61bb      	str	r3, [r7, #24]
 8000e84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	4b7a      	ldr	r3, [pc, #488]	; (8001070 <MX_GPIO_Init+0x248>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a79      	ldr	r2, [pc, #484]	; (8001070 <MX_GPIO_Init+0x248>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b77      	ldr	r3, [pc, #476]	; (8001070 <MX_GPIO_Init+0x248>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e9e:	4b74      	ldr	r3, [pc, #464]	; (8001070 <MX_GPIO_Init+0x248>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a73      	ldr	r2, [pc, #460]	; (8001070 <MX_GPIO_Init+0x248>)
 8000ea4:	f043 0320 	orr.w	r3, r3, #32
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b71      	ldr	r3, [pc, #452]	; (8001070 <MX_GPIO_Init+0x248>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0320 	and.w	r3, r3, #32
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb6:	4b6e      	ldr	r3, [pc, #440]	; (8001070 <MX_GPIO_Init+0x248>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a6d      	ldr	r2, [pc, #436]	; (8001070 <MX_GPIO_Init+0x248>)
 8000ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b6b      	ldr	r3, [pc, #428]	; (8001070 <MX_GPIO_Init+0x248>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ece:	4b68      	ldr	r3, [pc, #416]	; (8001070 <MX_GPIO_Init+0x248>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a67      	ldr	r2, [pc, #412]	; (8001070 <MX_GPIO_Init+0x248>)
 8000ed4:	f043 0310 	orr.w	r3, r3, #16
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b65      	ldr	r3, [pc, #404]	; (8001070 <MX_GPIO_Init+0x248>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee6:	4b62      	ldr	r3, [pc, #392]	; (8001070 <MX_GPIO_Init+0x248>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a61      	ldr	r2, [pc, #388]	; (8001070 <MX_GPIO_Init+0x248>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b5f      	ldr	r3, [pc, #380]	; (8001070 <MX_GPIO_Init+0x248>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f244 0181 	movw	r1, #16513	; 0x4081
 8000f04:	485b      	ldr	r0, [pc, #364]	; (8001074 <MX_GPIO_Init+0x24c>)
 8000f06:	f002 fbe1 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ALARM_Pin|CYLINDER_1F_Pin, GPIO_PIN_SET);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f240 2101 	movw	r1, #513	; 0x201
 8000f10:	4859      	ldr	r0, [pc, #356]	; (8001078 <MX_GPIO_Init+0x250>)
 8000f12:	f002 fbdb 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MOTOR_1_Pin|MOTOR_2_Pin, GPIO_PIN_SET);
 8000f16:	2201      	movs	r2, #1
 8000f18:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000f1c:	4857      	ldr	r0, [pc, #348]	; (800107c <MX_GPIO_Init+0x254>)
 8000f1e:	f002 fbd5 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2140      	movs	r1, #64	; 0x40
 8000f26:	4854      	ldr	r0, [pc, #336]	; (8001078 <MX_GPIO_Init+0x250>)
 8000f28:	f002 fbd0 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CYLINDER_6R_Pin|CYLINDER_6F_Pin|CYLINDER_5R_Pin, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000f32:	4853      	ldr	r0, [pc, #332]	; (8001080 <MX_GPIO_Init+0x258>)
 8000f34:	f002 fbca 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CYLINDER_5F_Pin|CYLINDER_4R_Pin|CYLINDER_4F_Pin|CYLINDER_3R_Pin 
 8000f38:	2201      	movs	r2, #1
 8000f3a:	21ff      	movs	r1, #255	; 0xff
 8000f3c:	4851      	ldr	r0, [pc, #324]	; (8001084 <MX_GPIO_Init+0x25c>)
 8000f3e:	f002 fbc5 	bl	80036cc <HAL_GPIO_WritePin>
                          |CYLINDER_3F_Pin|CYLINDER_2R_Pin|CYLINDER_2F_Pin|CYLINDER_1R_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f42:	f244 0381 	movw	r3, #16513	; 0x4081
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4846      	ldr	r0, [pc, #280]	; (8001074 <MX_GPIO_Init+0x24c>)
 8000f5c:	f002 f9f4 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMERGENCY_STOP_Pin;
 8000f60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f66:	4b48      	ldr	r3, [pc, #288]	; (8001088 <MX_GPIO_Init+0x260>)
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EMERGENCY_STOP_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f72:	4619      	mov	r1, r3
 8000f74:	4845      	ldr	r0, [pc, #276]	; (800108c <MX_GPIO_Init+0x264>)
 8000f76:	f002 f9e7 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUTOMATIC_MODE_Pin;
 8000f7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f80:	4b43      	ldr	r3, [pc, #268]	; (8001090 <MX_GPIO_Init+0x268>)
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUTOMATIC_MODE_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	483f      	ldr	r0, [pc, #252]	; (800108c <MX_GPIO_Init+0x264>)
 8000f90:	f002 f9da 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ALARM_Pin|USB_PowerSwitchOn_Pin|CYLINDER_1F_Pin;
 8000f94:	f240 2341 	movw	r3, #577	; 0x241
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000faa:	4619      	mov	r1, r3
 8000fac:	4832      	ldr	r0, [pc, #200]	; (8001078 <MX_GPIO_Init+0x250>)
 8000fae:	f002 f9cb 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = MOTOR_1_Pin|MOTOR_2_Pin;
 8000fb2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc8:	4619      	mov	r1, r3
 8000fca:	482c      	ldr	r0, [pc, #176]	; (800107c <MX_GPIO_Init+0x254>)
 8000fcc:	f002 f9bc 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin */
  GPIO_InitStruct.Pin = PEDAL_A1_Pin|PEDAL_A2_Pin|PEDAL_B1_Pin|PEDAL_B2_Pin 
 8000fd0:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
                          |PEDAL_C1_Pin|PEDAL_C2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4825      	ldr	r0, [pc, #148]	; (800107c <MX_GPIO_Init+0x254>)
 8000fe6:	f002 f9af 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PEDAL_F2_Pin|PEDAL_F1_Pin|PEDAL_E2_Pin|PEDAL_E1_Pin;
 8000fea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4821      	ldr	r0, [pc, #132]	; (8001084 <MX_GPIO_Init+0x25c>)
 8001000:	f002 f9a2 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = PEDAL_D1_Pin|PEDAL_D2_Pin|USB_OverCurrent_Pin;
 8001004:	23b0      	movs	r3, #176	; 0xb0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001014:	4619      	mov	r1, r3
 8001016:	4818      	ldr	r0, [pc, #96]	; (8001078 <MX_GPIO_Init+0x250>)
 8001018:	f002 f996 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CYLINDER_6R_Pin|CYLINDER_6F_Pin|CYLINDER_5R_Pin;
 800101c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001032:	4619      	mov	r1, r3
 8001034:	4812      	ldr	r0, [pc, #72]	; (8001080 <MX_GPIO_Init+0x258>)
 8001036:	f002 f987 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CYLINDER_5F_Pin|CYLINDER_4R_Pin|CYLINDER_4F_Pin|CYLINDER_3R_Pin 
 800103a:	23ff      	movs	r3, #255	; 0xff
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
                          |CYLINDER_3F_Pin|CYLINDER_2R_Pin|CYLINDER_2F_Pin|CYLINDER_1R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <MX_GPIO_Init+0x25c>)
 8001052:	f002 f979 	bl	8003348 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	2028      	movs	r0, #40	; 0x28
 800105c:	f001 fcd1 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001060:	2028      	movs	r0, #40	; 0x28
 8001062:	f001 fcea 	bl	8002a3a <HAL_NVIC_EnableIRQ>

}
 8001066:	bf00      	nop
 8001068:	3738      	adds	r7, #56	; 0x38
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800
 8001074:	40020400 	.word	0x40020400
 8001078:	40021800 	.word	0x40021800
 800107c:	40021000 	.word	0x40021000
 8001080:	40020800 	.word	0x40020800
 8001084:	40020c00 	.word	0x40020c00
 8001088:	10110000 	.word	0x10110000
 800108c:	40021400 	.word	0x40021400
 8001090:	10310000 	.word	0x10310000

08001094 <Set_Cylinder_Direction>:

/* USER CODE BEGIN 2 */
void Set_Cylinder_Direction(Station_Id Id,Cylinder_Movement Action)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	460a      	mov	r2, r1
 800109e:	71fb      	strb	r3, [r7, #7]
 80010a0:	4613      	mov	r3, r2
 80010a2:	71bb      	strb	r3, [r7, #6]
	switch(Id)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b05      	cmp	r3, #5
 80010a8:	d82c      	bhi.n	8001104 <Set_Cylinder_Direction+0x70>
 80010aa:	a201      	add	r2, pc, #4	; (adr r2, 80010b0 <Set_Cylinder_Direction+0x1c>)
 80010ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b0:	080010c9 	.word	0x080010c9
 80010b4:	080010d3 	.word	0x080010d3
 80010b8:	080010dd 	.word	0x080010dd
 80010bc:	080010e7 	.word	0x080010e7
 80010c0:	080010f1 	.word	0x080010f1
 80010c4:	080010fb 	.word	0x080010fb
	{
	case STATION_1 : Cylinder1_Action(Action);break;
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f820 	bl	8001110 <Cylinder1_Action>
 80010d0:	e019      	b.n	8001106 <Set_Cylinder_Direction+0x72>
	case STATION_2 : Cylinder2_Action(Action);break;
 80010d2:	79bb      	ldrb	r3, [r7, #6]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 f8bf 	bl	8001258 <Cylinder2_Action>
 80010da:	e014      	b.n	8001106 <Set_Cylinder_Direction+0x72>
	case STATION_3 : Cylinder3_Action(Action);break;
 80010dc:	79bb      	ldrb	r3, [r7, #6]
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f95a 	bl	8001398 <Cylinder3_Action>
 80010e4:	e00f      	b.n	8001106 <Set_Cylinder_Direction+0x72>
	case STATION_4 : Cylinder4_Action(Action);break;
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f9fb 	bl	80014e4 <Cylinder4_Action>
 80010ee:	e00a      	b.n	8001106 <Set_Cylinder_Direction+0x72>
	case STATION_5 : Cylinder5_Action(Action);break;
 80010f0:	79bb      	ldrb	r3, [r7, #6]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 faa0 	bl	8001638 <Cylinder5_Action>
 80010f8:	e005      	b.n	8001106 <Set_Cylinder_Direction+0x72>
	case STATION_6 : Cylinder6_Action(Action);break;
 80010fa:	79bb      	ldrb	r3, [r7, #6]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fb49 	bl	8001794 <Cylinder6_Action>
 8001102:	e000      	b.n	8001106 <Set_Cylinder_Direction+0x72>
	default        : break;
 8001104:	bf00      	nop
	}
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop

08001110 <Cylinder1_Action>:

void Cylinder1_Action(Cylinder_Movement Action)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	switch(Action)
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d015      	beq.n	800114c <Cylinder1_Action+0x3c>
 8001120:	2b02      	cmp	r3, #2
 8001122:	d024      	beq.n	800116e <Cylinder1_Action+0x5e>
 8001124:	2b00      	cmp	r3, #0
 8001126:	d000      	beq.n	800112a <Cylinder1_Action+0x1a>

					    }
					   }
					   break;

		default    :   break;
 8001128:	e088      	b.n	800123c <Cylinder1_Action+0x12c>
						HAL_GPIO_WritePin(CYLINDER_1R_GPIO_Port, CYLINDER_1R_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2180      	movs	r1, #128	; 0x80
 800112e:	4845      	ldr	r0, [pc, #276]	; (8001244 <Cylinder1_Action+0x134>)
 8001130:	f002 facc 	bl	80036cc <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(CYLINDER_1F_GPIO_Port, CYLINDER_1F_Pin, GPIO_PIN_SET);
 8001134:	2201      	movs	r2, #1
 8001136:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113a:	4843      	ldr	r0, [pc, #268]	; (8001248 <Cylinder1_Action+0x138>)
 800113c:	f002 fac6 	bl	80036cc <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(MOTOR_1_GPIO_Port, MOTOR_1_Pin, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2180      	movs	r1, #128	; 0x80
 8001144:	4841      	ldr	r0, [pc, #260]	; (800124c <Cylinder1_Action+0x13c>)
 8001146:	f002 fac1 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 800114a:	e077      	b.n	800123c <Cylinder1_Action+0x12c>
					    HAL_GPIO_WritePin(CYLINDER_1R_GPIO_Port, CYLINDER_1R_Pin, GPIO_PIN_SET);
 800114c:	2201      	movs	r2, #1
 800114e:	2180      	movs	r1, #128	; 0x80
 8001150:	483c      	ldr	r0, [pc, #240]	; (8001244 <Cylinder1_Action+0x134>)
 8001152:	f002 fabb 	bl	80036cc <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(CYLINDER_1F_GPIO_Port, CYLINDER_1F_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 7100 	mov.w	r1, #512	; 0x200
 800115c:	483a      	ldr	r0, [pc, #232]	; (8001248 <Cylinder1_Action+0x138>)
 800115e:	f002 fab5 	bl	80036cc <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(MOTOR_1_GPIO_Port, MOTOR_1_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	2180      	movs	r1, #128	; 0x80
 8001166:	4839      	ldr	r0, [pc, #228]	; (800124c <Cylinder1_Action+0x13c>)
 8001168:	f002 fab0 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 800116c:	e066      	b.n	800123c <Cylinder1_Action+0x12c>
					    HAL_GPIO_WritePin(CYLINDER_1R_GPIO_Port, CYLINDER_1R_Pin, GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	2180      	movs	r1, #128	; 0x80
 8001172:	4834      	ldr	r0, [pc, #208]	; (8001244 <Cylinder1_Action+0x134>)
 8001174:	f002 faaa 	bl	80036cc <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(CYLINDER_1F_GPIO_Port, CYLINDER_1F_Pin, GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800117e:	4832      	ldr	r0, [pc, #200]	; (8001248 <Cylinder1_Action+0x138>)
 8001180:	f002 faa4 	bl	80036cc <HAL_GPIO_WritePin>
					    if(Machine_Mode==AUTOMATIC)
 8001184:	4b32      	ldr	r3, [pc, #200]	; (8001250 <Cylinder1_Action+0x140>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d131      	bne.n	80011f0 <Cylinder1_Action+0xe0>
					    	if(Cylinder_position[STATION_2]!=POSITION_2 && Cylinder_position[STATION_2]!=POSITION_4 && Cylinder_position[STATION_3]!=POSITION_2 && Cylinder_position[STATION_3]!=POSITION_4 &&  Get_Pedal_State(STATION_2,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_2,REVERSE)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_3,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_3,REVERSE)!=GPIO_PIN_RESET)
 800118c:	4b31      	ldr	r3, [pc, #196]	; (8001254 <Cylinder1_Action+0x144>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d052      	beq.n	800123a <Cylinder1_Action+0x12a>
 8001194:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <Cylinder1_Action+0x144>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b03      	cmp	r3, #3
 800119a:	d04e      	beq.n	800123a <Cylinder1_Action+0x12a>
 800119c:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <Cylinder1_Action+0x144>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d04a      	beq.n	800123a <Cylinder1_Action+0x12a>
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <Cylinder1_Action+0x144>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d046      	beq.n	800123a <Cylinder1_Action+0x12a>
 80011ac:	2100      	movs	r1, #0
 80011ae:	2001      	movs	r0, #1
 80011b0:	f000 fba0 	bl	80018f4 <Get_Pedal_State>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d03f      	beq.n	800123a <Cylinder1_Action+0x12a>
 80011ba:	2101      	movs	r1, #1
 80011bc:	2001      	movs	r0, #1
 80011be:	f000 fb99 	bl	80018f4 <Get_Pedal_State>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d038      	beq.n	800123a <Cylinder1_Action+0x12a>
 80011c8:	2100      	movs	r1, #0
 80011ca:	2002      	movs	r0, #2
 80011cc:	f000 fb92 	bl	80018f4 <Get_Pedal_State>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d031      	beq.n	800123a <Cylinder1_Action+0x12a>
 80011d6:	2101      	movs	r1, #1
 80011d8:	2002      	movs	r0, #2
 80011da:	f000 fb8b 	bl	80018f4 <Get_Pedal_State>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d02a      	beq.n	800123a <Cylinder1_Action+0x12a>
					    	{HAL_GPIO_WritePin(MOTOR_1_GPIO_Port, MOTOR_1_Pin, GPIO_PIN_SET);}
 80011e4:	2201      	movs	r2, #1
 80011e6:	2180      	movs	r1, #128	; 0x80
 80011e8:	4818      	ldr	r0, [pc, #96]	; (800124c <Cylinder1_Action+0x13c>)
 80011ea:	f002 fa6f 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 80011ee:	e024      	b.n	800123a <Cylinder1_Action+0x12a>
					    else if(Machine_Mode==MANUAL)
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <Cylinder1_Action+0x140>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d120      	bne.n	800123a <Cylinder1_Action+0x12a>
					    	if(Get_Pedal_State(STATION_2,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_2,REVERSE)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_3,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_3,REVERSE)!=GPIO_PIN_RESET)
 80011f8:	2100      	movs	r1, #0
 80011fa:	2001      	movs	r0, #1
 80011fc:	f000 fb7a 	bl	80018f4 <Get_Pedal_State>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d019      	beq.n	800123a <Cylinder1_Action+0x12a>
 8001206:	2101      	movs	r1, #1
 8001208:	2001      	movs	r0, #1
 800120a:	f000 fb73 	bl	80018f4 <Get_Pedal_State>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d012      	beq.n	800123a <Cylinder1_Action+0x12a>
 8001214:	2100      	movs	r1, #0
 8001216:	2002      	movs	r0, #2
 8001218:	f000 fb6c 	bl	80018f4 <Get_Pedal_State>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <Cylinder1_Action+0x12a>
 8001222:	2101      	movs	r1, #1
 8001224:	2002      	movs	r0, #2
 8001226:	f000 fb65 	bl	80018f4 <Get_Pedal_State>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d004      	beq.n	800123a <Cylinder1_Action+0x12a>
					    	{HAL_GPIO_WritePin(MOTOR_1_GPIO_Port, MOTOR_1_Pin, GPIO_PIN_SET);}
 8001230:	2201      	movs	r2, #1
 8001232:	2180      	movs	r1, #128	; 0x80
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <Cylinder1_Action+0x13c>)
 8001236:	f002 fa49 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 800123a:	bf00      	nop
	}
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40020c00 	.word	0x40020c00
 8001248:	40021800 	.word	0x40021800
 800124c:	40021000 	.word	0x40021000
 8001250:	200000ec 	.word	0x200000ec
 8001254:	200000a4 	.word	0x200000a4

08001258 <Cylinder2_Action>:

void Cylinder2_Action(Cylinder_Movement Action)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
	switch(Action)
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d014      	beq.n	8001292 <Cylinder2_Action+0x3a>
 8001268:	2b02      	cmp	r3, #2
 800126a:	d022      	beq.n	80012b2 <Cylinder2_Action+0x5a>
 800126c:	2b00      	cmp	r3, #0
 800126e:	d000      	beq.n	8001272 <Cylinder2_Action+0x1a>

					  	}
						}
					   break;

		default    :   break;
 8001270:	e085      	b.n	800137e <Cylinder2_Action+0x126>
						HAL_GPIO_WritePin(CYLINDER_2R_GPIO_Port, CYLINDER_2R_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2120      	movs	r1, #32
 8001276:	4844      	ldr	r0, [pc, #272]	; (8001388 <Cylinder2_Action+0x130>)
 8001278:	f002 fa28 	bl	80036cc <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(CYLINDER_2F_GPIO_Port, CYLINDER_2F_Pin, GPIO_PIN_SET);
 800127c:	2201      	movs	r2, #1
 800127e:	2140      	movs	r1, #64	; 0x40
 8001280:	4841      	ldr	r0, [pc, #260]	; (8001388 <Cylinder2_Action+0x130>)
 8001282:	f002 fa23 	bl	80036cc <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(MOTOR_1_GPIO_Port, MOTOR_1_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	4840      	ldr	r0, [pc, #256]	; (800138c <Cylinder2_Action+0x134>)
 800128c:	f002 fa1e 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 8001290:	e075      	b.n	800137e <Cylinder2_Action+0x126>
					    HAL_GPIO_WritePin(CYLINDER_2R_GPIO_Port, CYLINDER_2R_Pin, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	2120      	movs	r1, #32
 8001296:	483c      	ldr	r0, [pc, #240]	; (8001388 <Cylinder2_Action+0x130>)
 8001298:	f002 fa18 	bl	80036cc <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(CYLINDER_2F_GPIO_Port, CYLINDER_2F_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2140      	movs	r1, #64	; 0x40
 80012a0:	4839      	ldr	r0, [pc, #228]	; (8001388 <Cylinder2_Action+0x130>)
 80012a2:	f002 fa13 	bl	80036cc <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(MOTOR_1_GPIO_Port, MOTOR_1_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	4838      	ldr	r0, [pc, #224]	; (800138c <Cylinder2_Action+0x134>)
 80012ac:	f002 fa0e 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 80012b0:	e065      	b.n	800137e <Cylinder2_Action+0x126>
					    HAL_GPIO_WritePin(CYLINDER_2R_GPIO_Port, CYLINDER_2R_Pin, GPIO_PIN_SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	2120      	movs	r1, #32
 80012b6:	4834      	ldr	r0, [pc, #208]	; (8001388 <Cylinder2_Action+0x130>)
 80012b8:	f002 fa08 	bl	80036cc <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(CYLINDER_2F_GPIO_Port, CYLINDER_2F_Pin, GPIO_PIN_SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	2140      	movs	r1, #64	; 0x40
 80012c0:	4831      	ldr	r0, [pc, #196]	; (8001388 <Cylinder2_Action+0x130>)
 80012c2:	f002 fa03 	bl	80036cc <HAL_GPIO_WritePin>
					    if(Machine_Mode==AUTOMATIC)
 80012c6:	4b32      	ldr	r3, [pc, #200]	; (8001390 <Cylinder2_Action+0x138>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d131      	bne.n	8001332 <Cylinder2_Action+0xda>
					    	  if(Cylinder_position[STATION_1]!=POSITION_2 && Cylinder_position[STATION_1]!=POSITION_4 && Cylinder_position[STATION_3]!=POSITION_2 && Cylinder_position[STATION_3]!=POSITION_4 && Get_Pedal_State(STATION_1,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_1,REVERSE)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_3,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_3,REVERSE)!=GPIO_PIN_RESET)
 80012ce:	4b31      	ldr	r3, [pc, #196]	; (8001394 <Cylinder2_Action+0x13c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d052      	beq.n	800137c <Cylinder2_Action+0x124>
 80012d6:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <Cylinder2_Action+0x13c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d04e      	beq.n	800137c <Cylinder2_Action+0x124>
 80012de:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <Cylinder2_Action+0x13c>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d04a      	beq.n	800137c <Cylinder2_Action+0x124>
 80012e6:	4b2b      	ldr	r3, [pc, #172]	; (8001394 <Cylinder2_Action+0x13c>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d046      	beq.n	800137c <Cylinder2_Action+0x124>
 80012ee:	2100      	movs	r1, #0
 80012f0:	2000      	movs	r0, #0
 80012f2:	f000 faff 	bl	80018f4 <Get_Pedal_State>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d03f      	beq.n	800137c <Cylinder2_Action+0x124>
 80012fc:	2101      	movs	r1, #1
 80012fe:	2000      	movs	r0, #0
 8001300:	f000 faf8 	bl	80018f4 <Get_Pedal_State>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d038      	beq.n	800137c <Cylinder2_Action+0x124>
 800130a:	2100      	movs	r1, #0
 800130c:	2002      	movs	r0, #2
 800130e:	f000 faf1 	bl	80018f4 <Get_Pedal_State>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d031      	beq.n	800137c <Cylinder2_Action+0x124>
 8001318:	2101      	movs	r1, #1
 800131a:	2002      	movs	r0, #2
 800131c:	f000 faea 	bl	80018f4 <Get_Pedal_State>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d02a      	beq.n	800137c <Cylinder2_Action+0x124>
					    	  {HAL_GPIO_WritePin(MOTOR_1_GPIO_Port, MOTOR_1_Pin, GPIO_PIN_SET);}
 8001326:	2201      	movs	r2, #1
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	4818      	ldr	r0, [pc, #96]	; (800138c <Cylinder2_Action+0x134>)
 800132c:	f002 f9ce 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 8001330:	e024      	b.n	800137c <Cylinder2_Action+0x124>
					  	else if(Machine_Mode==MANUAL)
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <Cylinder2_Action+0x138>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d120      	bne.n	800137c <Cylinder2_Action+0x124>
					  		if(Get_Pedal_State(STATION_1,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_1,REVERSE)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_3,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_3,REVERSE)!=GPIO_PIN_RESET)
 800133a:	2100      	movs	r1, #0
 800133c:	2000      	movs	r0, #0
 800133e:	f000 fad9 	bl	80018f4 <Get_Pedal_State>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d019      	beq.n	800137c <Cylinder2_Action+0x124>
 8001348:	2101      	movs	r1, #1
 800134a:	2000      	movs	r0, #0
 800134c:	f000 fad2 	bl	80018f4 <Get_Pedal_State>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d012      	beq.n	800137c <Cylinder2_Action+0x124>
 8001356:	2100      	movs	r1, #0
 8001358:	2002      	movs	r0, #2
 800135a:	f000 facb 	bl	80018f4 <Get_Pedal_State>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00b      	beq.n	800137c <Cylinder2_Action+0x124>
 8001364:	2101      	movs	r1, #1
 8001366:	2002      	movs	r0, #2
 8001368:	f000 fac4 	bl	80018f4 <Get_Pedal_State>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <Cylinder2_Action+0x124>
					  		{HAL_GPIO_WritePin(MOTOR_1_GPIO_Port, MOTOR_1_Pin, GPIO_PIN_SET);}
 8001372:	2201      	movs	r2, #1
 8001374:	2180      	movs	r1, #128	; 0x80
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <Cylinder2_Action+0x134>)
 8001378:	f002 f9a8 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 800137c:	bf00      	nop
	}
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40020c00 	.word	0x40020c00
 800138c:	40021000 	.word	0x40021000
 8001390:	200000ec 	.word	0x200000ec
 8001394:	200000a4 	.word	0x200000a4

08001398 <Cylinder3_Action>:

void Cylinder3_Action(Cylinder_Movement Action)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
	switch(Action)
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d014      	beq.n	80013d2 <Cylinder3_Action+0x3a>
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d022      	beq.n	80013f2 <Cylinder3_Action+0x5a>
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d000      	beq.n	80013b2 <Cylinder3_Action+0x1a>
					  	{

					  	}
						}
					   break;
		default    :   break;
 80013b0:	e08d      	b.n	80014ce <Cylinder3_Action+0x136>
						HAL_GPIO_WritePin(CYLINDER_3R_GPIO_Port, CYLINDER_3R_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2108      	movs	r1, #8
 80013b6:	4848      	ldr	r0, [pc, #288]	; (80014d8 <Cylinder3_Action+0x140>)
 80013b8:	f002 f988 	bl	80036cc <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(CYLINDER_3F_GPIO_Port, CYLINDER_3F_Pin, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	2110      	movs	r1, #16
 80013c0:	4845      	ldr	r0, [pc, #276]	; (80014d8 <Cylinder3_Action+0x140>)
 80013c2:	f002 f983 	bl	80036cc <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(MOTOR_1_GPIO_Port, MOTOR_1_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2180      	movs	r1, #128	; 0x80
 80013ca:	4844      	ldr	r0, [pc, #272]	; (80014dc <Cylinder3_Action+0x144>)
 80013cc:	f002 f97e 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 80013d0:	e07d      	b.n	80014ce <Cylinder3_Action+0x136>
					    HAL_GPIO_WritePin(CYLINDER_3R_GPIO_Port, CYLINDER_3R_Pin, GPIO_PIN_SET);
 80013d2:	2201      	movs	r2, #1
 80013d4:	2108      	movs	r1, #8
 80013d6:	4840      	ldr	r0, [pc, #256]	; (80014d8 <Cylinder3_Action+0x140>)
 80013d8:	f002 f978 	bl	80036cc <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(CYLINDER_3F_GPIO_Port, CYLINDER_3F_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2110      	movs	r1, #16
 80013e0:	483d      	ldr	r0, [pc, #244]	; (80014d8 <Cylinder3_Action+0x140>)
 80013e2:	f002 f973 	bl	80036cc <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(MOTOR_1_GPIO_Port, MOTOR_1_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2180      	movs	r1, #128	; 0x80
 80013ea:	483c      	ldr	r0, [pc, #240]	; (80014dc <Cylinder3_Action+0x144>)
 80013ec:	f002 f96e 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 80013f0:	e06d      	b.n	80014ce <Cylinder3_Action+0x136>
					    HAL_GPIO_WritePin(CYLINDER_3R_GPIO_Port, CYLINDER_3R_Pin, GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	2108      	movs	r1, #8
 80013f6:	4838      	ldr	r0, [pc, #224]	; (80014d8 <Cylinder3_Action+0x140>)
 80013f8:	f002 f968 	bl	80036cc <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(CYLINDER_3F_GPIO_Port, CYLINDER_3F_Pin, GPIO_PIN_SET);
 80013fc:	2201      	movs	r2, #1
 80013fe:	2110      	movs	r1, #16
 8001400:	4835      	ldr	r0, [pc, #212]	; (80014d8 <Cylinder3_Action+0x140>)
 8001402:	f002 f963 	bl	80036cc <HAL_GPIO_WritePin>
					    if(Machine_Mode==AUTOMATIC)
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <Cylinder3_Action+0x148>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d139      	bne.n	8001482 <Cylinder3_Action+0xea>
						    if(Get_Cylinder_Position(STATION_2)!=POSITION_2 && Get_Cylinder_Position(STATION_2)!=POSITION_4 && Get_Cylinder_Position(STATION_1)!=POSITION_2 && Get_Cylinder_Position(STATION_1)!=POSITION_4 && Get_Pedal_State(STATION_1,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_1,REVERSE)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_2,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_2,REVERSE)!=GPIO_PIN_RESET)
 800140e:	2001      	movs	r0, #1
 8001410:	f7ff fad8 	bl	80009c4 <Get_Cylinder_Position>
 8001414:	4603      	mov	r3, r0
 8001416:	2b01      	cmp	r3, #1
 8001418:	d058      	beq.n	80014cc <Cylinder3_Action+0x134>
 800141a:	2001      	movs	r0, #1
 800141c:	f7ff fad2 	bl	80009c4 <Get_Cylinder_Position>
 8001420:	4603      	mov	r3, r0
 8001422:	2b03      	cmp	r3, #3
 8001424:	d052      	beq.n	80014cc <Cylinder3_Action+0x134>
 8001426:	2000      	movs	r0, #0
 8001428:	f7ff facc 	bl	80009c4 <Get_Cylinder_Position>
 800142c:	4603      	mov	r3, r0
 800142e:	2b01      	cmp	r3, #1
 8001430:	d04c      	beq.n	80014cc <Cylinder3_Action+0x134>
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff fac6 	bl	80009c4 <Get_Cylinder_Position>
 8001438:	4603      	mov	r3, r0
 800143a:	2b03      	cmp	r3, #3
 800143c:	d046      	beq.n	80014cc <Cylinder3_Action+0x134>
 800143e:	2100      	movs	r1, #0
 8001440:	2000      	movs	r0, #0
 8001442:	f000 fa57 	bl	80018f4 <Get_Pedal_State>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d03f      	beq.n	80014cc <Cylinder3_Action+0x134>
 800144c:	2101      	movs	r1, #1
 800144e:	2000      	movs	r0, #0
 8001450:	f000 fa50 	bl	80018f4 <Get_Pedal_State>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d038      	beq.n	80014cc <Cylinder3_Action+0x134>
 800145a:	2100      	movs	r1, #0
 800145c:	2001      	movs	r0, #1
 800145e:	f000 fa49 	bl	80018f4 <Get_Pedal_State>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d031      	beq.n	80014cc <Cylinder3_Action+0x134>
 8001468:	2101      	movs	r1, #1
 800146a:	2001      	movs	r0, #1
 800146c:	f000 fa42 	bl	80018f4 <Get_Pedal_State>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d02a      	beq.n	80014cc <Cylinder3_Action+0x134>
						    {HAL_GPIO_WritePin(MOTOR_1_GPIO_Port, MOTOR_1_Pin, GPIO_PIN_SET);}
 8001476:	2201      	movs	r2, #1
 8001478:	2180      	movs	r1, #128	; 0x80
 800147a:	4818      	ldr	r0, [pc, #96]	; (80014dc <Cylinder3_Action+0x144>)
 800147c:	f002 f926 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 8001480:	e024      	b.n	80014cc <Cylinder3_Action+0x134>
					  	else if(Machine_Mode==MANUAL)
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <Cylinder3_Action+0x148>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d120      	bne.n	80014cc <Cylinder3_Action+0x134>
					  		if(Get_Pedal_State(STATION_1,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_1,REVERSE)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_2,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_2,REVERSE)!=GPIO_PIN_RESET)
 800148a:	2100      	movs	r1, #0
 800148c:	2000      	movs	r0, #0
 800148e:	f000 fa31 	bl	80018f4 <Get_Pedal_State>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d019      	beq.n	80014cc <Cylinder3_Action+0x134>
 8001498:	2101      	movs	r1, #1
 800149a:	2000      	movs	r0, #0
 800149c:	f000 fa2a 	bl	80018f4 <Get_Pedal_State>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d012      	beq.n	80014cc <Cylinder3_Action+0x134>
 80014a6:	2100      	movs	r1, #0
 80014a8:	2001      	movs	r0, #1
 80014aa:	f000 fa23 	bl	80018f4 <Get_Pedal_State>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00b      	beq.n	80014cc <Cylinder3_Action+0x134>
 80014b4:	2101      	movs	r1, #1
 80014b6:	2001      	movs	r0, #1
 80014b8:	f000 fa1c 	bl	80018f4 <Get_Pedal_State>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d004      	beq.n	80014cc <Cylinder3_Action+0x134>
					  		{HAL_GPIO_WritePin(MOTOR_1_GPIO_Port, MOTOR_1_Pin, GPIO_PIN_SET);}
 80014c2:	2201      	movs	r2, #1
 80014c4:	2180      	movs	r1, #128	; 0x80
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <Cylinder3_Action+0x144>)
 80014c8:	f002 f900 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 80014cc:	bf00      	nop
	}
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40020c00 	.word	0x40020c00
 80014dc:	40021000 	.word	0x40021000
 80014e0:	200000ec 	.word	0x200000ec

080014e4 <Cylinder4_Action>:

void Cylinder4_Action(Cylinder_Movement Action)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
	switch(Action)
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d015      	beq.n	8001520 <Cylinder4_Action+0x3c>
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d024      	beq.n	8001542 <Cylinder4_Action+0x5e>
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d000      	beq.n	80014fe <Cylinder4_Action+0x1a>
					    {

					    }
					   }
					   break;
		default    :   break;
 80014fc:	e091      	b.n	8001622 <Cylinder4_Action+0x13e>
						HAL_GPIO_WritePin(CYLINDER_4R_GPIO_Port, CYLINDER_4R_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	2102      	movs	r1, #2
 8001502:	484a      	ldr	r0, [pc, #296]	; (800162c <Cylinder4_Action+0x148>)
 8001504:	f002 f8e2 	bl	80036cc <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(CYLINDER_4F_GPIO_Port, CYLINDER_4F_Pin, GPIO_PIN_SET);
 8001508:	2201      	movs	r2, #1
 800150a:	2104      	movs	r1, #4
 800150c:	4847      	ldr	r0, [pc, #284]	; (800162c <Cylinder4_Action+0x148>)
 800150e:	f002 f8dd 	bl	80036cc <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(MOTOR_2_GPIO_Port, MOTOR_2_Pin, GPIO_PIN_RESET);
 8001512:	2200      	movs	r2, #0
 8001514:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001518:	4845      	ldr	r0, [pc, #276]	; (8001630 <Cylinder4_Action+0x14c>)
 800151a:	f002 f8d7 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 800151e:	e080      	b.n	8001622 <Cylinder4_Action+0x13e>
					    HAL_GPIO_WritePin(CYLINDER_4R_GPIO_Port, CYLINDER_4R_Pin, GPIO_PIN_SET);
 8001520:	2201      	movs	r2, #1
 8001522:	2102      	movs	r1, #2
 8001524:	4841      	ldr	r0, [pc, #260]	; (800162c <Cylinder4_Action+0x148>)
 8001526:	f002 f8d1 	bl	80036cc <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(CYLINDER_4F_GPIO_Port, CYLINDER_4F_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2104      	movs	r1, #4
 800152e:	483f      	ldr	r0, [pc, #252]	; (800162c <Cylinder4_Action+0x148>)
 8001530:	f002 f8cc 	bl	80036cc <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(MOTOR_2_GPIO_Port, MOTOR_2_Pin, GPIO_PIN_RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800153a:	483d      	ldr	r0, [pc, #244]	; (8001630 <Cylinder4_Action+0x14c>)
 800153c:	f002 f8c6 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 8001540:	e06f      	b.n	8001622 <Cylinder4_Action+0x13e>
					    HAL_GPIO_WritePin(CYLINDER_4R_GPIO_Port, CYLINDER_4R_Pin, GPIO_PIN_SET);
 8001542:	2201      	movs	r2, #1
 8001544:	2102      	movs	r1, #2
 8001546:	4839      	ldr	r0, [pc, #228]	; (800162c <Cylinder4_Action+0x148>)
 8001548:	f002 f8c0 	bl	80036cc <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(CYLINDER_4F_GPIO_Port, CYLINDER_4F_Pin, GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	2104      	movs	r1, #4
 8001550:	4836      	ldr	r0, [pc, #216]	; (800162c <Cylinder4_Action+0x148>)
 8001552:	f002 f8bb 	bl	80036cc <HAL_GPIO_WritePin>
					    if(Machine_Mode==AUTOMATIC)
 8001556:	4b37      	ldr	r3, [pc, #220]	; (8001634 <Cylinder4_Action+0x150>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d13a      	bne.n	80015d4 <Cylinder4_Action+0xf0>
						    if(Get_Cylinder_Position(STATION_5)!=POSITION_2 && Get_Cylinder_Position(STATION_5)!=POSITION_4 && Get_Cylinder_Position(STATION_6)!=POSITION_2 && Get_Cylinder_Position(STATION_6)!=POSITION_4 && Get_Pedal_State(STATION_5,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_5,REVERSE)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_6,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_6,REVERSE)!=GPIO_PIN_RESET)
 800155e:	2004      	movs	r0, #4
 8001560:	f7ff fa30 	bl	80009c4 <Get_Cylinder_Position>
 8001564:	4603      	mov	r3, r0
 8001566:	2b01      	cmp	r3, #1
 8001568:	d05a      	beq.n	8001620 <Cylinder4_Action+0x13c>
 800156a:	2004      	movs	r0, #4
 800156c:	f7ff fa2a 	bl	80009c4 <Get_Cylinder_Position>
 8001570:	4603      	mov	r3, r0
 8001572:	2b03      	cmp	r3, #3
 8001574:	d054      	beq.n	8001620 <Cylinder4_Action+0x13c>
 8001576:	2005      	movs	r0, #5
 8001578:	f7ff fa24 	bl	80009c4 <Get_Cylinder_Position>
 800157c:	4603      	mov	r3, r0
 800157e:	2b01      	cmp	r3, #1
 8001580:	d04e      	beq.n	8001620 <Cylinder4_Action+0x13c>
 8001582:	2005      	movs	r0, #5
 8001584:	f7ff fa1e 	bl	80009c4 <Get_Cylinder_Position>
 8001588:	4603      	mov	r3, r0
 800158a:	2b03      	cmp	r3, #3
 800158c:	d048      	beq.n	8001620 <Cylinder4_Action+0x13c>
 800158e:	2100      	movs	r1, #0
 8001590:	2004      	movs	r0, #4
 8001592:	f000 f9af 	bl	80018f4 <Get_Pedal_State>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d041      	beq.n	8001620 <Cylinder4_Action+0x13c>
 800159c:	2101      	movs	r1, #1
 800159e:	2004      	movs	r0, #4
 80015a0:	f000 f9a8 	bl	80018f4 <Get_Pedal_State>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d03a      	beq.n	8001620 <Cylinder4_Action+0x13c>
 80015aa:	2100      	movs	r1, #0
 80015ac:	2005      	movs	r0, #5
 80015ae:	f000 f9a1 	bl	80018f4 <Get_Pedal_State>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d033      	beq.n	8001620 <Cylinder4_Action+0x13c>
 80015b8:	2101      	movs	r1, #1
 80015ba:	2005      	movs	r0, #5
 80015bc:	f000 f99a 	bl	80018f4 <Get_Pedal_State>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d02c      	beq.n	8001620 <Cylinder4_Action+0x13c>
						    {HAL_GPIO_WritePin(MOTOR_2_GPIO_Port, MOTOR_2_Pin, GPIO_PIN_SET);}
 80015c6:	2201      	movs	r2, #1
 80015c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015cc:	4818      	ldr	r0, [pc, #96]	; (8001630 <Cylinder4_Action+0x14c>)
 80015ce:	f002 f87d 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 80015d2:	e025      	b.n	8001620 <Cylinder4_Action+0x13c>
					    else if(Machine_Mode==MANUAL)
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <Cylinder4_Action+0x150>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d121      	bne.n	8001620 <Cylinder4_Action+0x13c>
					  		if(Get_Pedal_State(STATION_5,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_5,REVERSE)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_6,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_6,REVERSE)!=GPIO_PIN_RESET)
 80015dc:	2100      	movs	r1, #0
 80015de:	2004      	movs	r0, #4
 80015e0:	f000 f988 	bl	80018f4 <Get_Pedal_State>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d01a      	beq.n	8001620 <Cylinder4_Action+0x13c>
 80015ea:	2101      	movs	r1, #1
 80015ec:	2004      	movs	r0, #4
 80015ee:	f000 f981 	bl	80018f4 <Get_Pedal_State>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d013      	beq.n	8001620 <Cylinder4_Action+0x13c>
 80015f8:	2100      	movs	r1, #0
 80015fa:	2005      	movs	r0, #5
 80015fc:	f000 f97a 	bl	80018f4 <Get_Pedal_State>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00c      	beq.n	8001620 <Cylinder4_Action+0x13c>
 8001606:	2101      	movs	r1, #1
 8001608:	2005      	movs	r0, #5
 800160a:	f000 f973 	bl	80018f4 <Get_Pedal_State>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <Cylinder4_Action+0x13c>
					  		{HAL_GPIO_WritePin(MOTOR_2_GPIO_Port, MOTOR_2_Pin, GPIO_PIN_SET);}
 8001614:	2201      	movs	r2, #1
 8001616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <Cylinder4_Action+0x14c>)
 800161c:	f002 f856 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 8001620:	bf00      	nop
	}
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40020c00 	.word	0x40020c00
 8001630:	40021000 	.word	0x40021000
 8001634:	200000ec 	.word	0x200000ec

08001638 <Cylinder5_Action>:

void Cylinder5_Action(Cylinder_Movement Action)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
	switch(Action)
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d016      	beq.n	8001676 <Cylinder5_Action+0x3e>
 8001648:	2b02      	cmp	r3, #2
 800164a:	d026      	beq.n	800169a <Cylinder5_Action+0x62>
 800164c:	2b00      	cmp	r3, #0
 800164e:	d000      	beq.n	8001652 <Cylinder5_Action+0x1a>
					    {

					    }
					   }
					   break;
		default    :   break;
 8001650:	e094      	b.n	800177c <Cylinder5_Action+0x144>
						HAL_GPIO_WritePin(CYLINDER_5R_GPIO_Port, CYLINDER_5R_Pin, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001658:	484a      	ldr	r0, [pc, #296]	; (8001784 <Cylinder5_Action+0x14c>)
 800165a:	f002 f837 	bl	80036cc <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(CYLINDER_5F_GPIO_Port, CYLINDER_5F_Pin, GPIO_PIN_SET);
 800165e:	2201      	movs	r2, #1
 8001660:	2101      	movs	r1, #1
 8001662:	4849      	ldr	r0, [pc, #292]	; (8001788 <Cylinder5_Action+0x150>)
 8001664:	f002 f832 	bl	80036cc <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(MOTOR_2_GPIO_Port, MOTOR_2_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800166e:	4847      	ldr	r0, [pc, #284]	; (800178c <Cylinder5_Action+0x154>)
 8001670:	f002 f82c 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 8001674:	e082      	b.n	800177c <Cylinder5_Action+0x144>
					    HAL_GPIO_WritePin(CYLINDER_5R_GPIO_Port, CYLINDER_5R_Pin, GPIO_PIN_SET);
 8001676:	2201      	movs	r2, #1
 8001678:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800167c:	4841      	ldr	r0, [pc, #260]	; (8001784 <Cylinder5_Action+0x14c>)
 800167e:	f002 f825 	bl	80036cc <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(CYLINDER_5F_GPIO_Port, CYLINDER_5F_Pin, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	2101      	movs	r1, #1
 8001686:	4840      	ldr	r0, [pc, #256]	; (8001788 <Cylinder5_Action+0x150>)
 8001688:	f002 f820 	bl	80036cc <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(MOTOR_2_GPIO_Port, MOTOR_2_Pin, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001692:	483e      	ldr	r0, [pc, #248]	; (800178c <Cylinder5_Action+0x154>)
 8001694:	f002 f81a 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 8001698:	e070      	b.n	800177c <Cylinder5_Action+0x144>
					    HAL_GPIO_WritePin(CYLINDER_5R_GPIO_Port, CYLINDER_5R_Pin, GPIO_PIN_SET);
 800169a:	2201      	movs	r2, #1
 800169c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a0:	4838      	ldr	r0, [pc, #224]	; (8001784 <Cylinder5_Action+0x14c>)
 80016a2:	f002 f813 	bl	80036cc <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(CYLINDER_5F_GPIO_Port, CYLINDER_5F_Pin, GPIO_PIN_SET);
 80016a6:	2201      	movs	r2, #1
 80016a8:	2101      	movs	r1, #1
 80016aa:	4837      	ldr	r0, [pc, #220]	; (8001788 <Cylinder5_Action+0x150>)
 80016ac:	f002 f80e 	bl	80036cc <HAL_GPIO_WritePin>
					    if(Machine_Mode==AUTOMATIC)
 80016b0:	4b37      	ldr	r3, [pc, #220]	; (8001790 <Cylinder5_Action+0x158>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d13a      	bne.n	800172e <Cylinder5_Action+0xf6>
						    if(Get_Cylinder_Position(STATION_4)!=POSITION_2 && Get_Cylinder_Position(STATION_4)!=POSITION_4 && Get_Cylinder_Position(STATION_6)!=POSITION_2 && Get_Cylinder_Position(STATION_6)!=POSITION_4 && Get_Pedal_State(STATION_4,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_4,REVERSE)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_6,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_6,REVERSE)!=GPIO_PIN_RESET)
 80016b8:	2003      	movs	r0, #3
 80016ba:	f7ff f983 	bl	80009c4 <Get_Cylinder_Position>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d05a      	beq.n	800177a <Cylinder5_Action+0x142>
 80016c4:	2003      	movs	r0, #3
 80016c6:	f7ff f97d 	bl	80009c4 <Get_Cylinder_Position>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d054      	beq.n	800177a <Cylinder5_Action+0x142>
 80016d0:	2005      	movs	r0, #5
 80016d2:	f7ff f977 	bl	80009c4 <Get_Cylinder_Position>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d04e      	beq.n	800177a <Cylinder5_Action+0x142>
 80016dc:	2005      	movs	r0, #5
 80016de:	f7ff f971 	bl	80009c4 <Get_Cylinder_Position>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d048      	beq.n	800177a <Cylinder5_Action+0x142>
 80016e8:	2100      	movs	r1, #0
 80016ea:	2003      	movs	r0, #3
 80016ec:	f000 f902 	bl	80018f4 <Get_Pedal_State>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d041      	beq.n	800177a <Cylinder5_Action+0x142>
 80016f6:	2101      	movs	r1, #1
 80016f8:	2003      	movs	r0, #3
 80016fa:	f000 f8fb 	bl	80018f4 <Get_Pedal_State>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d03a      	beq.n	800177a <Cylinder5_Action+0x142>
 8001704:	2100      	movs	r1, #0
 8001706:	2005      	movs	r0, #5
 8001708:	f000 f8f4 	bl	80018f4 <Get_Pedal_State>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d033      	beq.n	800177a <Cylinder5_Action+0x142>
 8001712:	2101      	movs	r1, #1
 8001714:	2005      	movs	r0, #5
 8001716:	f000 f8ed 	bl	80018f4 <Get_Pedal_State>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d02c      	beq.n	800177a <Cylinder5_Action+0x142>
						    {HAL_GPIO_WritePin(MOTOR_2_GPIO_Port, MOTOR_2_Pin, GPIO_PIN_SET);}
 8001720:	2201      	movs	r2, #1
 8001722:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001726:	4819      	ldr	r0, [pc, #100]	; (800178c <Cylinder5_Action+0x154>)
 8001728:	f001 ffd0 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 800172c:	e025      	b.n	800177a <Cylinder5_Action+0x142>
					    else if(Machine_Mode==MANUAL)
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <Cylinder5_Action+0x158>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d121      	bne.n	800177a <Cylinder5_Action+0x142>
					  		if(Get_Pedal_State(STATION_4,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_4,REVERSE)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_6,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_6,REVERSE)!=GPIO_PIN_RESET)
 8001736:	2100      	movs	r1, #0
 8001738:	2003      	movs	r0, #3
 800173a:	f000 f8db 	bl	80018f4 <Get_Pedal_State>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d01a      	beq.n	800177a <Cylinder5_Action+0x142>
 8001744:	2101      	movs	r1, #1
 8001746:	2003      	movs	r0, #3
 8001748:	f000 f8d4 	bl	80018f4 <Get_Pedal_State>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d013      	beq.n	800177a <Cylinder5_Action+0x142>
 8001752:	2100      	movs	r1, #0
 8001754:	2005      	movs	r0, #5
 8001756:	f000 f8cd 	bl	80018f4 <Get_Pedal_State>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00c      	beq.n	800177a <Cylinder5_Action+0x142>
 8001760:	2101      	movs	r1, #1
 8001762:	2005      	movs	r0, #5
 8001764:	f000 f8c6 	bl	80018f4 <Get_Pedal_State>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d005      	beq.n	800177a <Cylinder5_Action+0x142>
					  		{HAL_GPIO_WritePin(MOTOR_2_GPIO_Port, MOTOR_2_Pin, GPIO_PIN_SET);}
 800176e:	2201      	movs	r2, #1
 8001770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001774:	4805      	ldr	r0, [pc, #20]	; (800178c <Cylinder5_Action+0x154>)
 8001776:	f001 ffa9 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 800177a:	bf00      	nop
	}
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40020800 	.word	0x40020800
 8001788:	40020c00 	.word	0x40020c00
 800178c:	40021000 	.word	0x40021000
 8001790:	200000ec 	.word	0x200000ec

08001794 <Cylinder6_Action>:

void Cylinder6_Action(Cylinder_Movement Action)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
	switch(Action)
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d017      	beq.n	80017d4 <Cylinder6_Action+0x40>
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d028      	beq.n	80017fa <Cylinder6_Action+0x66>
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d000      	beq.n	80017ae <Cylinder6_Action+0x1a>
					    {

					    }
					   }
					   break;
		default    :   break;
 80017ac:	e097      	b.n	80018de <Cylinder6_Action+0x14a>
						HAL_GPIO_WritePin(CYLINDER_6R_GPIO_Port, CYLINDER_6R_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017b4:	484c      	ldr	r0, [pc, #304]	; (80018e8 <Cylinder6_Action+0x154>)
 80017b6:	f001 ff89 	bl	80036cc <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(CYLINDER_6F_GPIO_Port, CYLINDER_6F_Pin, GPIO_PIN_SET);
 80017ba:	2201      	movs	r2, #1
 80017bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017c0:	4849      	ldr	r0, [pc, #292]	; (80018e8 <Cylinder6_Action+0x154>)
 80017c2:	f001 ff83 	bl	80036cc <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(MOTOR_2_GPIO_Port, MOTOR_2_Pin, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017cc:	4847      	ldr	r0, [pc, #284]	; (80018ec <Cylinder6_Action+0x158>)
 80017ce:	f001 ff7d 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 80017d2:	e084      	b.n	80018de <Cylinder6_Action+0x14a>
					    HAL_GPIO_WritePin(CYLINDER_6R_GPIO_Port, CYLINDER_6R_Pin, GPIO_PIN_SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017da:	4843      	ldr	r0, [pc, #268]	; (80018e8 <Cylinder6_Action+0x154>)
 80017dc:	f001 ff76 	bl	80036cc <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(CYLINDER_6F_GPIO_Port, CYLINDER_6F_Pin, GPIO_PIN_RESET);
 80017e0:	2200      	movs	r2, #0
 80017e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017e6:	4840      	ldr	r0, [pc, #256]	; (80018e8 <Cylinder6_Action+0x154>)
 80017e8:	f001 ff70 	bl	80036cc <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(MOTOR_2_GPIO_Port, MOTOR_2_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f2:	483e      	ldr	r0, [pc, #248]	; (80018ec <Cylinder6_Action+0x158>)
 80017f4:	f001 ff6a 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 80017f8:	e071      	b.n	80018de <Cylinder6_Action+0x14a>
					    HAL_GPIO_WritePin(CYLINDER_6R_GPIO_Port, CYLINDER_6R_Pin, GPIO_PIN_SET);
 80017fa:	2201      	movs	r2, #1
 80017fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001800:	4839      	ldr	r0, [pc, #228]	; (80018e8 <Cylinder6_Action+0x154>)
 8001802:	f001 ff63 	bl	80036cc <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(CYLINDER_6F_GPIO_Port, CYLINDER_6F_Pin, GPIO_PIN_SET);
 8001806:	2201      	movs	r2, #1
 8001808:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800180c:	4836      	ldr	r0, [pc, #216]	; (80018e8 <Cylinder6_Action+0x154>)
 800180e:	f001 ff5d 	bl	80036cc <HAL_GPIO_WritePin>
					    if(Machine_Mode==AUTOMATIC)
 8001812:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <Cylinder6_Action+0x15c>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d13a      	bne.n	8001890 <Cylinder6_Action+0xfc>
						    if(Get_Cylinder_Position(STATION_4)!=POSITION_2 && Get_Cylinder_Position(STATION_4)!=POSITION_4 && Get_Cylinder_Position(STATION_5)!=POSITION_2 && Get_Cylinder_Position(STATION_5)!=POSITION_4 && Get_Pedal_State(STATION_4,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_4,REVERSE)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_5,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_5,REVERSE)!=GPIO_PIN_RESET)
 800181a:	2003      	movs	r0, #3
 800181c:	f7ff f8d2 	bl	80009c4 <Get_Cylinder_Position>
 8001820:	4603      	mov	r3, r0
 8001822:	2b01      	cmp	r3, #1
 8001824:	d05a      	beq.n	80018dc <Cylinder6_Action+0x148>
 8001826:	2003      	movs	r0, #3
 8001828:	f7ff f8cc 	bl	80009c4 <Get_Cylinder_Position>
 800182c:	4603      	mov	r3, r0
 800182e:	2b03      	cmp	r3, #3
 8001830:	d054      	beq.n	80018dc <Cylinder6_Action+0x148>
 8001832:	2004      	movs	r0, #4
 8001834:	f7ff f8c6 	bl	80009c4 <Get_Cylinder_Position>
 8001838:	4603      	mov	r3, r0
 800183a:	2b01      	cmp	r3, #1
 800183c:	d04e      	beq.n	80018dc <Cylinder6_Action+0x148>
 800183e:	2004      	movs	r0, #4
 8001840:	f7ff f8c0 	bl	80009c4 <Get_Cylinder_Position>
 8001844:	4603      	mov	r3, r0
 8001846:	2b03      	cmp	r3, #3
 8001848:	d048      	beq.n	80018dc <Cylinder6_Action+0x148>
 800184a:	2100      	movs	r1, #0
 800184c:	2003      	movs	r0, #3
 800184e:	f000 f851 	bl	80018f4 <Get_Pedal_State>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d041      	beq.n	80018dc <Cylinder6_Action+0x148>
 8001858:	2101      	movs	r1, #1
 800185a:	2003      	movs	r0, #3
 800185c:	f000 f84a 	bl	80018f4 <Get_Pedal_State>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d03a      	beq.n	80018dc <Cylinder6_Action+0x148>
 8001866:	2100      	movs	r1, #0
 8001868:	2004      	movs	r0, #4
 800186a:	f000 f843 	bl	80018f4 <Get_Pedal_State>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d033      	beq.n	80018dc <Cylinder6_Action+0x148>
 8001874:	2101      	movs	r1, #1
 8001876:	2004      	movs	r0, #4
 8001878:	f000 f83c 	bl	80018f4 <Get_Pedal_State>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d02c      	beq.n	80018dc <Cylinder6_Action+0x148>
						    {HAL_GPIO_WritePin(MOTOR_2_GPIO_Port, MOTOR_2_Pin, GPIO_PIN_SET);}
 8001882:	2201      	movs	r2, #1
 8001884:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001888:	4818      	ldr	r0, [pc, #96]	; (80018ec <Cylinder6_Action+0x158>)
 800188a:	f001 ff1f 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 800188e:	e025      	b.n	80018dc <Cylinder6_Action+0x148>
					    else if(Machine_Mode==MANUAL)
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <Cylinder6_Action+0x15c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d121      	bne.n	80018dc <Cylinder6_Action+0x148>
						    if(Get_Pedal_State(STATION_4,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_4,REVERSE)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_5,FORWARD)!=GPIO_PIN_RESET && Get_Pedal_State(STATION_5,REVERSE)!=GPIO_PIN_RESET)
 8001898:	2100      	movs	r1, #0
 800189a:	2003      	movs	r0, #3
 800189c:	f000 f82a 	bl	80018f4 <Get_Pedal_State>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d01a      	beq.n	80018dc <Cylinder6_Action+0x148>
 80018a6:	2101      	movs	r1, #1
 80018a8:	2003      	movs	r0, #3
 80018aa:	f000 f823 	bl	80018f4 <Get_Pedal_State>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d013      	beq.n	80018dc <Cylinder6_Action+0x148>
 80018b4:	2100      	movs	r1, #0
 80018b6:	2004      	movs	r0, #4
 80018b8:	f000 f81c 	bl	80018f4 <Get_Pedal_State>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00c      	beq.n	80018dc <Cylinder6_Action+0x148>
 80018c2:	2101      	movs	r1, #1
 80018c4:	2004      	movs	r0, #4
 80018c6:	f000 f815 	bl	80018f4 <Get_Pedal_State>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <Cylinder6_Action+0x148>
							{HAL_GPIO_WritePin(MOTOR_2_GPIO_Port, MOTOR_2_Pin, GPIO_PIN_SET);}
 80018d0:	2201      	movs	r2, #1
 80018d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <Cylinder6_Action+0x158>)
 80018d8:	f001 fef8 	bl	80036cc <HAL_GPIO_WritePin>
					   break;
 80018dc:	bf00      	nop
	}
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40020800 	.word	0x40020800
 80018ec:	40021000 	.word	0x40021000
 80018f0:	200000ec 	.word	0x200000ec

080018f4 <Get_Pedal_State>:

GPIO_PinState Get_Pedal_State(Station_Id Id,Cylinder_Movement Direction)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	460a      	mov	r2, r1
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	4613      	mov	r3, r2
 8001902:	71bb      	strb	r3, [r7, #6]
	GPIO_PinState status;
	Machine_information.Station_Information[Id].Cylinder_direction=Direction;
 8001904:	79fa      	ldrb	r2, [r7, #7]
 8001906:	4958      	ldr	r1, [pc, #352]	; (8001a68 <Get_Pedal_State+0x174>)
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	3308      	adds	r3, #8
 8001914:	79ba      	ldrb	r2, [r7, #6]
 8001916:	701a      	strb	r2, [r3, #0]

	switch(Id)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	2b05      	cmp	r3, #5
 800191c:	f200 8092 	bhi.w	8001a44 <Get_Pedal_State+0x150>
 8001920:	a201      	add	r2, pc, #4	; (adr r2, 8001928 <Get_Pedal_State+0x34>)
 8001922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001926:	bf00      	nop
 8001928:	08001941 	.word	0x08001941
 800192c:	0800196d 	.word	0x0800196d
 8001930:	08001999 	.word	0x08001999
 8001934:	080019c5 	.word	0x080019c5
 8001938:	080019ed 	.word	0x080019ed
 800193c:	08001a19 	.word	0x08001a19
	{
	  case STATION_1: {if(Direction==FORWARD)
 8001940:	79bb      	ldrb	r3, [r7, #6]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d107      	bne.n	8001956 <Get_Pedal_State+0x62>
		  	  	  	  status=HAL_GPIO_ReadPin(PEDAL_A1_GPIO_Port, PEDAL_A1_Pin);
 8001946:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800194a:	4848      	ldr	r0, [pc, #288]	; (8001a6c <Get_Pedal_State+0x178>)
 800194c:	f001 fea6 	bl	800369c <HAL_GPIO_ReadPin>
 8001950:	4603      	mov	r3, r0
 8001952:	73fb      	strb	r3, [r7, #15]
	  	  	  	  	  else if(Direction==REVERSE)
	  	  	  	  	  status=HAL_GPIO_ReadPin(PEDAL_A2_GPIO_Port, PEDAL_A2_Pin);
	  	  	  	  	  break;}
 8001954:	e078      	b.n	8001a48 <Get_Pedal_State+0x154>
	  	  	  	  	  else if(Direction==REVERSE)
 8001956:	79bb      	ldrb	r3, [r7, #6]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d175      	bne.n	8001a48 <Get_Pedal_State+0x154>
	  	  	  	  	  status=HAL_GPIO_ReadPin(PEDAL_A2_GPIO_Port, PEDAL_A2_Pin);
 800195c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001960:	4842      	ldr	r0, [pc, #264]	; (8001a6c <Get_Pedal_State+0x178>)
 8001962:	f001 fe9b 	bl	800369c <HAL_GPIO_ReadPin>
 8001966:	4603      	mov	r3, r0
 8001968:	73fb      	strb	r3, [r7, #15]
	  	  	  	  	  break;}
 800196a:	e06d      	b.n	8001a48 <Get_Pedal_State+0x154>

	  case STATION_2: {if(Direction==FORWARD)
 800196c:	79bb      	ldrb	r3, [r7, #6]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d107      	bne.n	8001982 <Get_Pedal_State+0x8e>
		  	  	  	  status=HAL_GPIO_ReadPin(PEDAL_B1_GPIO_Port, PEDAL_B1_Pin);
 8001972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001976:	483d      	ldr	r0, [pc, #244]	; (8001a6c <Get_Pedal_State+0x178>)
 8001978:	f001 fe90 	bl	800369c <HAL_GPIO_ReadPin>
 800197c:	4603      	mov	r3, r0
 800197e:	73fb      	strb	r3, [r7, #15]
	  	  	  	  	  else if(Direction==REVERSE)
	  	  	  	  	  status=HAL_GPIO_ReadPin(PEDAL_B2_GPIO_Port, PEDAL_B2_Pin);
	  	  	  	  	  break;}
 8001980:	e064      	b.n	8001a4c <Get_Pedal_State+0x158>
	  	  	  	  	  else if(Direction==REVERSE)
 8001982:	79bb      	ldrb	r3, [r7, #6]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d161      	bne.n	8001a4c <Get_Pedal_State+0x158>
	  	  	  	  	  status=HAL_GPIO_ReadPin(PEDAL_B2_GPIO_Port, PEDAL_B2_Pin);
 8001988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800198c:	4837      	ldr	r0, [pc, #220]	; (8001a6c <Get_Pedal_State+0x178>)
 800198e:	f001 fe85 	bl	800369c <HAL_GPIO_ReadPin>
 8001992:	4603      	mov	r3, r0
 8001994:	73fb      	strb	r3, [r7, #15]
	  	  	  	  	  break;}
 8001996:	e059      	b.n	8001a4c <Get_Pedal_State+0x158>

	  case STATION_3: {if(Direction==FORWARD)
 8001998:	79bb      	ldrb	r3, [r7, #6]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d107      	bne.n	80019ae <Get_Pedal_State+0xba>
		  	  	  	  status=HAL_GPIO_ReadPin(PEDAL_C1_GPIO_Port, PEDAL_C1_Pin);
 800199e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019a2:	4832      	ldr	r0, [pc, #200]	; (8001a6c <Get_Pedal_State+0x178>)
 80019a4:	f001 fe7a 	bl	800369c <HAL_GPIO_ReadPin>
 80019a8:	4603      	mov	r3, r0
 80019aa:	73fb      	strb	r3, [r7, #15]
	  	  	  	  	  else if(Direction==REVERSE)
	  	  	  	  	  status=HAL_GPIO_ReadPin(PEDAL_C2_GPIO_Port, PEDAL_C2_Pin);
	  	  	  	  	  break;}
 80019ac:	e050      	b.n	8001a50 <Get_Pedal_State+0x15c>
	  	  	  	  	  else if(Direction==REVERSE)
 80019ae:	79bb      	ldrb	r3, [r7, #6]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d14d      	bne.n	8001a50 <Get_Pedal_State+0x15c>
	  	  	  	  	  status=HAL_GPIO_ReadPin(PEDAL_C2_GPIO_Port, PEDAL_C2_Pin);
 80019b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019b8:	482c      	ldr	r0, [pc, #176]	; (8001a6c <Get_Pedal_State+0x178>)
 80019ba:	f001 fe6f 	bl	800369c <HAL_GPIO_ReadPin>
 80019be:	4603      	mov	r3, r0
 80019c0:	73fb      	strb	r3, [r7, #15]
	  	  	  	  	  break;}
 80019c2:	e045      	b.n	8001a50 <Get_Pedal_State+0x15c>

	  case STATION_4: {if(Direction==FORWARD)
 80019c4:	79bb      	ldrb	r3, [r7, #6]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <Get_Pedal_State+0xe4>
		  	  	  	  status=HAL_GPIO_ReadPin(PEDAL_D1_GPIO_Port, PEDAL_D1_Pin);
 80019ca:	2110      	movs	r1, #16
 80019cc:	4828      	ldr	r0, [pc, #160]	; (8001a70 <Get_Pedal_State+0x17c>)
 80019ce:	f001 fe65 	bl	800369c <HAL_GPIO_ReadPin>
 80019d2:	4603      	mov	r3, r0
 80019d4:	73fb      	strb	r3, [r7, #15]
	  	  	  	  	  else if(Direction==REVERSE)
	  	  	  	  	  status=HAL_GPIO_ReadPin(PEDAL_D2_GPIO_Port, PEDAL_D2_Pin);
	  	  	  	  	  break;}
 80019d6:	e03d      	b.n	8001a54 <Get_Pedal_State+0x160>
	  	  	  	  	  else if(Direction==REVERSE)
 80019d8:	79bb      	ldrb	r3, [r7, #6]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d13a      	bne.n	8001a54 <Get_Pedal_State+0x160>
	  	  	  	  	  status=HAL_GPIO_ReadPin(PEDAL_D2_GPIO_Port, PEDAL_D2_Pin);
 80019de:	2120      	movs	r1, #32
 80019e0:	4823      	ldr	r0, [pc, #140]	; (8001a70 <Get_Pedal_State+0x17c>)
 80019e2:	f001 fe5b 	bl	800369c <HAL_GPIO_ReadPin>
 80019e6:	4603      	mov	r3, r0
 80019e8:	73fb      	strb	r3, [r7, #15]
	  	  	  	  	  break;}
 80019ea:	e033      	b.n	8001a54 <Get_Pedal_State+0x160>

	  case STATION_5: {if(Direction==FORWARD)
 80019ec:	79bb      	ldrb	r3, [r7, #6]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d107      	bne.n	8001a02 <Get_Pedal_State+0x10e>
		  	  	  	  status=HAL_GPIO_ReadPin(PEDAL_E1_GPIO_Port, PEDAL_E1_Pin);
 80019f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019f6:	481f      	ldr	r0, [pc, #124]	; (8001a74 <Get_Pedal_State+0x180>)
 80019f8:	f001 fe50 	bl	800369c <HAL_GPIO_ReadPin>
 80019fc:	4603      	mov	r3, r0
 80019fe:	73fb      	strb	r3, [r7, #15]
	  	  	  	  	  else if(Direction==REVERSE)
	  	  	  	  	  status=HAL_GPIO_ReadPin(PEDAL_E2_GPIO_Port, PEDAL_E2_Pin);
	  	  	  	  	  break;}
 8001a00:	e02a      	b.n	8001a58 <Get_Pedal_State+0x164>
	  	  	  	  	  else if(Direction==REVERSE)
 8001a02:	79bb      	ldrb	r3, [r7, #6]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d127      	bne.n	8001a58 <Get_Pedal_State+0x164>
	  	  	  	  	  status=HAL_GPIO_ReadPin(PEDAL_E2_GPIO_Port, PEDAL_E2_Pin);
 8001a08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a0c:	4819      	ldr	r0, [pc, #100]	; (8001a74 <Get_Pedal_State+0x180>)
 8001a0e:	f001 fe45 	bl	800369c <HAL_GPIO_ReadPin>
 8001a12:	4603      	mov	r3, r0
 8001a14:	73fb      	strb	r3, [r7, #15]
	  	  	  	  	  break;}
 8001a16:	e01f      	b.n	8001a58 <Get_Pedal_State+0x164>

	  case STATION_6: {if(Direction==FORWARD)
 8001a18:	79bb      	ldrb	r3, [r7, #6]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d107      	bne.n	8001a2e <Get_Pedal_State+0x13a>
		  	  	  	  status=HAL_GPIO_ReadPin(PEDAL_F1_GPIO_Port, PEDAL_F1_Pin);
 8001a1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a22:	4814      	ldr	r0, [pc, #80]	; (8001a74 <Get_Pedal_State+0x180>)
 8001a24:	f001 fe3a 	bl	800369c <HAL_GPIO_ReadPin>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	73fb      	strb	r3, [r7, #15]
	  	  	  	  	  else if(Direction==REVERSE)
	  	  	  	  	  status=HAL_GPIO_ReadPin(PEDAL_F2_GPIO_Port, PEDAL_F2_Pin);
	  	  	  	  	  break;}
 8001a2c:	e016      	b.n	8001a5c <Get_Pedal_State+0x168>
	  	  	  	  	  else if(Direction==REVERSE)
 8001a2e:	79bb      	ldrb	r3, [r7, #6]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d113      	bne.n	8001a5c <Get_Pedal_State+0x168>
	  	  	  	  	  status=HAL_GPIO_ReadPin(PEDAL_F2_GPIO_Port, PEDAL_F2_Pin);
 8001a34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a38:	480e      	ldr	r0, [pc, #56]	; (8001a74 <Get_Pedal_State+0x180>)
 8001a3a:	f001 fe2f 	bl	800369c <HAL_GPIO_ReadPin>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	73fb      	strb	r3, [r7, #15]
	  	  	  	  	  break;}
 8001a42:	e00b      	b.n	8001a5c <Get_Pedal_State+0x168>

	  default       : break;
 8001a44:	bf00      	nop
 8001a46:	e00a      	b.n	8001a5e <Get_Pedal_State+0x16a>
	  	  	  	  	  break;}
 8001a48:	bf00      	nop
 8001a4a:	e008      	b.n	8001a5e <Get_Pedal_State+0x16a>
	  	  	  	  	  break;}
 8001a4c:	bf00      	nop
 8001a4e:	e006      	b.n	8001a5e <Get_Pedal_State+0x16a>
	  	  	  	  	  break;}
 8001a50:	bf00      	nop
 8001a52:	e004      	b.n	8001a5e <Get_Pedal_State+0x16a>
	  	  	  	  	  break;}
 8001a54:	bf00      	nop
 8001a56:	e002      	b.n	8001a5e <Get_Pedal_State+0x16a>
	  	  	  	  	  break;}
 8001a58:	bf00      	nop
 8001a5a:	e000      	b.n	8001a5e <Get_Pedal_State+0x16a>
	  	  	  	  	  break;}
 8001a5c:	bf00      	nop
	}

	return status;
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000028 	.word	0x20000028
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40021800 	.word	0x40021800
 8001a74:	40020c00 	.word	0x40020c00

08001a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a7c:	f000 fe67 	bl	800274e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a80:	f000 f830 	bl	8001ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a84:	f7ff f9d0 	bl	8000e28 <MX_GPIO_Init>
  MX_ETH_Init();
 8001a88:	f7ff f8d6 	bl	8000c38 <MX_ETH_Init>
  MX_TIM1_Init();
 8001a8c:	f000 fab2 	bl	8001ff4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a90:	f000 fb02 	bl	8002098 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a94:	f000 fb4c 	bl	8002130 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a98:	f000 fb98 	bl	80021cc <MX_TIM4_Init>
  MX_TIM5_Init();
 8001a9c:	f000 fbe4 	bl	8002268 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8001aa0:	f000 fd2e 	bl	8002500 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001aa4:	f000 fda0 	bl	80025e8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8001aa8:	f000 fc2c 	bl	8002304 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  Device_init();
 8001aac:	f000 f8b0 	bl	8001c10 <Device_init>
  HAL_GPIO_EXTI_Callback(AUTOMATIC_MODE_Pin);
 8001ab0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ab4:	f000 fa48 	bl	8001f48 <HAL_GPIO_EXTI_Callback>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  switch (Machine_Mode)
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <main+0x68>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d004      	beq.n	8001aca <main+0x52>
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d008      	beq.n	8001ad6 <main+0x5e>
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <main+0x58>
	  	  	  	  	           break;

	   	 case EMERGENCY_STOP : Stop_Machine();
	   	   	   	   	   	   	   break;

	   	 default             : break;
 8001ac8:	e008      	b.n	8001adc <main+0x64>
	   	 case AUTOMATIC      : Run_AutomaticMode();
 8001aca:	f7fe fd1d 	bl	8000508 <Run_AutomaticMode>
	                           break;
 8001ace:	e005      	b.n	8001adc <main+0x64>
	   	 case MANUAL         : Run_ManualMode();
 8001ad0:	f7ff f872 	bl	8000bb8 <Run_ManualMode>
	  	  	  	  	           break;
 8001ad4:	e002      	b.n	8001adc <main+0x64>
	   	 case EMERGENCY_STOP : Stop_Machine();
 8001ad6:	f7fe ff5d 	bl	8000994 <Stop_Machine>
	   	   	   	   	   	   	   break;
 8001ada:	bf00      	nop
	  switch (Machine_Mode)
 8001adc:	e7ec      	b.n	8001ab8 <main+0x40>
 8001ade:	bf00      	nop
 8001ae0:	200000ec 	.word	0x200000ec

08001ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b0b4      	sub	sp, #208	; 0xd0
 8001ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001aee:	2230      	movs	r2, #48	; 0x30
 8001af0:	2100      	movs	r1, #0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f004 fb2e 	bl	8006154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b08:	f107 0308 	add.w	r3, r7, #8
 8001b0c:	2284      	movs	r2, #132	; 0x84
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f004 fb1f 	bl	8006154 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001b16:	f001 ff47 	bl	80039a8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <SystemClock_Config+0x120>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a39      	ldr	r2, [pc, #228]	; (8001c04 <SystemClock_Config+0x120>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b37      	ldr	r3, [pc, #220]	; (8001c04 <SystemClock_Config+0x120>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b32:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <SystemClock_Config+0x124>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a34      	ldr	r2, [pc, #208]	; (8001c08 <SystemClock_Config+0x124>)
 8001b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b32      	ldr	r3, [pc, #200]	; (8001c08 <SystemClock_Config+0x124>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b50:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001b54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b66:	2304      	movs	r3, #4
 8001b68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001b6c:	23d8      	movs	r3, #216	; 0xd8
 8001b6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b72:	2302      	movs	r3, #2
 8001b74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001b78:	2309      	movs	r3, #9
 8001b7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b7e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f001 ff70 	bl	8003a68 <HAL_RCC_OscConfig>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001b8e:	f000 f91b 	bl	8001dc8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b92:	f001 ff19 	bl	80039c8 <HAL_PWREx_EnableOverDrive>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001b9c:	f000 f914 	bl	8001dc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bb2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001bba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001bc2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001bc6:	2107      	movs	r1, #7
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f002 f9bd 	bl	8003f48 <HAL_RCC_ClockConfig>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001bd4:	f000 f8f8 	bl	8001dc8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <SystemClock_Config+0x128>)
 8001bda:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fba0 	bl	8004330 <HAL_RCCEx_PeriphCLKConfig>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <SystemClock_Config+0x116>
  {
    Error_Handler();
 8001bf6:	f000 f8e7 	bl	8001dc8 <Error_Handler>
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	37d0      	adds	r7, #208	; 0xd0
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40007000 	.word	0x40007000
 8001c0c:	00200100 	.word	0x00200100

08001c10 <Device_init>:

/* USER CODE BEGIN 4 */

void Device_init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
	Cylinder_position[STATION_1]=POSITION_1;
 8001c14:	4b5f      	ldr	r3, [pc, #380]	; (8001d94 <Device_init+0x184>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
	Cylinder_position[STATION_2]=POSITION_1;
 8001c1a:	4b5e      	ldr	r3, [pc, #376]	; (8001d94 <Device_init+0x184>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	605a      	str	r2, [r3, #4]
	Cylinder_position[STATION_3]=POSITION_1;
 8001c20:	4b5c      	ldr	r3, [pc, #368]	; (8001d94 <Device_init+0x184>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
	Cylinder_position[STATION_4]=POSITION_1;
 8001c26:	4b5b      	ldr	r3, [pc, #364]	; (8001d94 <Device_init+0x184>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	60da      	str	r2, [r3, #12]
	Cylinder_position[STATION_5]=POSITION_1;
 8001c2c:	4b59      	ldr	r3, [pc, #356]	; (8001d94 <Device_init+0x184>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
	Cylinder_position[STATION_6]=POSITION_1;
 8001c32:	4b58      	ldr	r3, [pc, #352]	; (8001d94 <Device_init+0x184>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	615a      	str	r2, [r3, #20]

	Machine_information.Station_Information[STATION_1].Up_Movement_Duration=3*TIMER_ERROR_FACTOR;
 8001c38:	4b57      	ldr	r3, [pc, #348]	; (8001d98 <Device_init+0x188>)
 8001c3a:	2207      	movs	r2, #7
 8001c3c:	615a      	str	r2, [r3, #20]
	Machine_information.Station_Information[STATION_1].Stop_Movement_Duration=120*TIMER_ERROR_FACTOR;
 8001c3e:	4b56      	ldr	r3, [pc, #344]	; (8001d98 <Device_init+0x188>)
 8001c40:	f44f 7299 	mov.w	r2, #306	; 0x132
 8001c44:	611a      	str	r2, [r3, #16]
	Machine_information.Station_Information[STATION_1].Down_Movement_Duration=5*TIMER_ERROR_FACTOR;
 8001c46:	4b54      	ldr	r3, [pc, #336]	; (8001d98 <Device_init+0x188>)
 8001c48:	220c      	movs	r2, #12
 8001c4a:	60da      	str	r2, [r3, #12]

	Machine_information.Station_Information[STATION_2].Up_Movement_Duration=3*TIMER_ERROR_FACTOR;
 8001c4c:	4b52      	ldr	r3, [pc, #328]	; (8001d98 <Device_init+0x188>)
 8001c4e:	2207      	movs	r2, #7
 8001c50:	629a      	str	r2, [r3, #40]	; 0x28
	Machine_information.Station_Information[STATION_2].Stop_Movement_Duration=120*TIMER_ERROR_FACTOR;
 8001c52:	4b51      	ldr	r3, [pc, #324]	; (8001d98 <Device_init+0x188>)
 8001c54:	f44f 7299 	mov.w	r2, #306	; 0x132
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24
	Machine_information.Station_Information[STATION_2].Down_Movement_Duration=5*TIMER_ERROR_FACTOR;
 8001c5a:	4b4f      	ldr	r3, [pc, #316]	; (8001d98 <Device_init+0x188>)
 8001c5c:	220c      	movs	r2, #12
 8001c5e:	621a      	str	r2, [r3, #32]

	Machine_information.Station_Information[STATION_3].Up_Movement_Duration=3*TIMER_ERROR_FACTOR;
 8001c60:	4b4d      	ldr	r3, [pc, #308]	; (8001d98 <Device_init+0x188>)
 8001c62:	2207      	movs	r2, #7
 8001c64:	63da      	str	r2, [r3, #60]	; 0x3c
	Machine_information.Station_Information[STATION_3].Stop_Movement_Duration=120*TIMER_ERROR_FACTOR;
 8001c66:	4b4c      	ldr	r3, [pc, #304]	; (8001d98 <Device_init+0x188>)
 8001c68:	f44f 7299 	mov.w	r2, #306	; 0x132
 8001c6c:	639a      	str	r2, [r3, #56]	; 0x38
	Machine_information.Station_Information[STATION_3].Down_Movement_Duration=5*TIMER_ERROR_FACTOR;
 8001c6e:	4b4a      	ldr	r3, [pc, #296]	; (8001d98 <Device_init+0x188>)
 8001c70:	220c      	movs	r2, #12
 8001c72:	635a      	str	r2, [r3, #52]	; 0x34

	Machine_information.Station_Information[STATION_4].Up_Movement_Duration=3*TIMER_ERROR_FACTOR;
 8001c74:	4b48      	ldr	r3, [pc, #288]	; (8001d98 <Device_init+0x188>)
 8001c76:	2207      	movs	r2, #7
 8001c78:	651a      	str	r2, [r3, #80]	; 0x50
	Machine_information.Station_Information[STATION_4].Stop_Movement_Duration=120*TIMER_ERROR_FACTOR;
 8001c7a:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <Device_init+0x188>)
 8001c7c:	f44f 7299 	mov.w	r2, #306	; 0x132
 8001c80:	64da      	str	r2, [r3, #76]	; 0x4c
	Machine_information.Station_Information[STATION_4].Down_Movement_Duration=5*TIMER_ERROR_FACTOR;
 8001c82:	4b45      	ldr	r3, [pc, #276]	; (8001d98 <Device_init+0x188>)
 8001c84:	220c      	movs	r2, #12
 8001c86:	649a      	str	r2, [r3, #72]	; 0x48

	Machine_information.Station_Information[STATION_5].Up_Movement_Duration=3*TIMER_ERROR_FACTOR;
 8001c88:	4b43      	ldr	r3, [pc, #268]	; (8001d98 <Device_init+0x188>)
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	665a      	str	r2, [r3, #100]	; 0x64
	Machine_information.Station_Information[STATION_5].Stop_Movement_Duration=120*TIMER_ERROR_FACTOR;
 8001c8e:	4b42      	ldr	r3, [pc, #264]	; (8001d98 <Device_init+0x188>)
 8001c90:	f44f 7299 	mov.w	r2, #306	; 0x132
 8001c94:	661a      	str	r2, [r3, #96]	; 0x60
	Machine_information.Station_Information[STATION_5].Down_Movement_Duration=5*TIMER_ERROR_FACTOR;
 8001c96:	4b40      	ldr	r3, [pc, #256]	; (8001d98 <Device_init+0x188>)
 8001c98:	220c      	movs	r2, #12
 8001c9a:	65da      	str	r2, [r3, #92]	; 0x5c

	Machine_information.Station_Information[STATION_6].Up_Movement_Duration=3*TIMER_ERROR_FACTOR;
 8001c9c:	4b3e      	ldr	r3, [pc, #248]	; (8001d98 <Device_init+0x188>)
 8001c9e:	2207      	movs	r2, #7
 8001ca0:	679a      	str	r2, [r3, #120]	; 0x78
	Machine_information.Station_Information[STATION_6].Stop_Movement_Duration=120*TIMER_ERROR_FACTOR;
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <Device_init+0x188>)
 8001ca4:	f44f 7299 	mov.w	r2, #306	; 0x132
 8001ca8:	675a      	str	r2, [r3, #116]	; 0x74
	Machine_information.Station_Information[STATION_6].Down_Movement_Duration=5*TIMER_ERROR_FACTOR;
 8001caa:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <Device_init+0x188>)
 8001cac:	220c      	movs	r2, #12
 8001cae:	671a      	str	r2, [r3, #112]	; 0x70


	HAL_GPIO_WritePin(CYLINDER_1R_GPIO_Port, CYLINDER_1R_Pin, GPIO_PIN_SET);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2180      	movs	r1, #128	; 0x80
 8001cb4:	4839      	ldr	r0, [pc, #228]	; (8001d9c <Device_init+0x18c>)
 8001cb6:	f001 fd09 	bl	80036cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CYLINDER_1F_GPIO_Port, CYLINDER_1F_Pin, GPIO_PIN_SET);
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cc0:	4837      	ldr	r0, [pc, #220]	; (8001da0 <Device_init+0x190>)
 8001cc2:	f001 fd03 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CYLINDER_2R_GPIO_Port, CYLINDER_2R_Pin, GPIO_PIN_SET);
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	2120      	movs	r1, #32
 8001cca:	4834      	ldr	r0, [pc, #208]	; (8001d9c <Device_init+0x18c>)
 8001ccc:	f001 fcfe 	bl	80036cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CYLINDER_2F_GPIO_Port, CYLINDER_2F_Pin, GPIO_PIN_SET);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	2140      	movs	r1, #64	; 0x40
 8001cd4:	4831      	ldr	r0, [pc, #196]	; (8001d9c <Device_init+0x18c>)
 8001cd6:	f001 fcf9 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CYLINDER_3R_GPIO_Port, CYLINDER_3R_Pin, GPIO_PIN_SET);
 8001cda:	2201      	movs	r2, #1
 8001cdc:	2108      	movs	r1, #8
 8001cde:	482f      	ldr	r0, [pc, #188]	; (8001d9c <Device_init+0x18c>)
 8001ce0:	f001 fcf4 	bl	80036cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CYLINDER_3F_GPIO_Port, CYLINDER_3F_Pin, GPIO_PIN_SET);
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	2110      	movs	r1, #16
 8001ce8:	482c      	ldr	r0, [pc, #176]	; (8001d9c <Device_init+0x18c>)
 8001cea:	f001 fcef 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CYLINDER_4R_GPIO_Port, CYLINDER_4R_Pin, GPIO_PIN_SET);
 8001cee:	2201      	movs	r2, #1
 8001cf0:	2102      	movs	r1, #2
 8001cf2:	482a      	ldr	r0, [pc, #168]	; (8001d9c <Device_init+0x18c>)
 8001cf4:	f001 fcea 	bl	80036cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CYLINDER_4F_GPIO_Port, CYLINDER_4F_Pin, GPIO_PIN_SET);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	2104      	movs	r1, #4
 8001cfc:	4827      	ldr	r0, [pc, #156]	; (8001d9c <Device_init+0x18c>)
 8001cfe:	f001 fce5 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CYLINDER_5R_GPIO_Port, CYLINDER_5R_Pin, GPIO_PIN_SET);
 8001d02:	2201      	movs	r2, #1
 8001d04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d08:	4826      	ldr	r0, [pc, #152]	; (8001da4 <Device_init+0x194>)
 8001d0a:	f001 fcdf 	bl	80036cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CYLINDER_5F_GPIO_Port, CYLINDER_5F_Pin, GPIO_PIN_SET);
 8001d0e:	2201      	movs	r2, #1
 8001d10:	2101      	movs	r1, #1
 8001d12:	4822      	ldr	r0, [pc, #136]	; (8001d9c <Device_init+0x18c>)
 8001d14:	f001 fcda 	bl	80036cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CYLINDER_6R_GPIO_Port, CYLINDER_6R_Pin, GPIO_PIN_SET);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d1e:	4821      	ldr	r0, [pc, #132]	; (8001da4 <Device_init+0x194>)
 8001d20:	f001 fcd4 	bl	80036cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CYLINDER_6F_GPIO_Port, CYLINDER_6F_Pin, GPIO_PIN_SET);
 8001d24:	2201      	movs	r2, #1
 8001d26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d2a:	481e      	ldr	r0, [pc, #120]	; (8001da4 <Device_init+0x194>)
 8001d2c:	f001 fcce 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_1_GPIO_Port, MOTOR_1_Pin, GPIO_PIN_SET);
 8001d30:	2201      	movs	r2, #1
 8001d32:	2180      	movs	r1, #128	; 0x80
 8001d34:	481c      	ldr	r0, [pc, #112]	; (8001da8 <Device_init+0x198>)
 8001d36:	f001 fcc9 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_2_GPIO_Port, MOTOR_2_Pin, GPIO_PIN_SET);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d40:	4819      	ldr	r0, [pc, #100]	; (8001da8 <Device_init+0x198>)
 8001d42:	f001 fcc3 	bl	80036cc <HAL_GPIO_WritePin>

	Timer_counter[STATION_1]=0;
 8001d46:	4b19      	ldr	r3, [pc, #100]	; (8001dac <Device_init+0x19c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
	Timer_counter[STATION_1]=0;
 8001d4c:	4b17      	ldr	r3, [pc, #92]	; (8001dac <Device_init+0x19c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
	Timer_counter[STATION_1]=0;
 8001d52:	4b16      	ldr	r3, [pc, #88]	; (8001dac <Device_init+0x19c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
	Timer_counter[STATION_1]=0;
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <Device_init+0x19c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
	Timer_counter[STATION_1]=0;
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <Device_init+0x19c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
	Timer_counter[STATION_1]=0;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <Device_init+0x19c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Stop_IT(&htim1);
 8001d6a:	4811      	ldr	r0, [pc, #68]	; (8001db0 <Device_init+0x1a0>)
 8001d6c:	f002 ff24 	bl	8004bb8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001d70:	4810      	ldr	r0, [pc, #64]	; (8001db4 <Device_init+0x1a4>)
 8001d72:	f002 ff21 	bl	8004bb8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim3);
 8001d76:	4810      	ldr	r0, [pc, #64]	; (8001db8 <Device_init+0x1a8>)
 8001d78:	f002 ff1e 	bl	8004bb8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim4);
 8001d7c:	480f      	ldr	r0, [pc, #60]	; (8001dbc <Device_init+0x1ac>)
 8001d7e:	f002 ff1b 	bl	8004bb8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim5);
 8001d82:	480f      	ldr	r0, [pc, #60]	; (8001dc0 <Device_init+0x1b0>)
 8001d84:	f002 ff18 	bl	8004bb8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim6);
 8001d88:	480e      	ldr	r0, [pc, #56]	; (8001dc4 <Device_init+0x1b4>)
 8001d8a:	f002 ff15 	bl	8004bb8 <HAL_TIM_Base_Stop_IT>

}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200000a4 	.word	0x200000a4
 8001d98:	20000028 	.word	0x20000028
 8001d9c:	40020c00 	.word	0x40020c00
 8001da0:	40021800 	.word	0x40021800
 8001da4:	40020800 	.word	0x40020800
 8001da8:	40021000 	.word	0x40021000
 8001dac:	200000bc 	.word	0x200000bc
 8001db0:	20000238 	.word	0x20000238
 8001db4:	20000278 	.word	0x20000278
 8001db8:	200001b8 	.word	0x200001b8
 8001dbc:	20000138 	.word	0x20000138
 8001dc0:	20000178 	.word	0x20000178
 8001dc4:	200001f8 	.word	0x200001f8

08001dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_MspInit+0x44>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <HAL_MspInit+0x44>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_MspInit+0x44>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_MspInit+0x44>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_MspInit+0x44>)
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e00:	6453      	str	r3, [r2, #68]	; 0x44
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_MspInit+0x44>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800

08001e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e32:	e7fe      	b.n	8001e32 <HardFault_Handler+0x4>

08001e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <MemManage_Handler+0x4>

08001e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <BusFault_Handler+0x4>

08001e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <UsageFault_Handler+0x4>

08001e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e74:	f000 fca8 	bl	80027c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001e82:	f002 fec4 	bl	8004c0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000238 	.word	0x20000238

08001e90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e96:	f002 feba 	bl	8004c0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000238 	.word	0x20000238

08001ea4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ea8:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001eaa:	f002 feb0 	bl	8004c0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000238 	.word	0x20000238

08001eb8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ebc:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <TIM1_CC_IRQHandler+0x10>)
 8001ebe:	f002 fea6 	bl	8004c0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000238 	.word	0x20000238

08001ecc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <TIM2_IRQHandler+0x10>)
 8001ed2:	f002 fe9c 	bl	8004c0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000278 	.word	0x20000278

08001ee0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <TIM3_IRQHandler+0x10>)
 8001ee6:	f002 fe92 	bl	8004c0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200001b8 	.word	0x200001b8

08001ef4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <TIM4_IRQHandler+0x10>)
 8001efa:	f002 fe88 	bl	8004c0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000138 	.word	0x20000138

08001f08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001f0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f10:	f001 fbf6 	bl	8003700 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001f14:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f18:	f001 fbf2 	bl	8003700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <TIM5_IRQHandler+0x10>)
 8001f26:	f002 fe72 	bl	8004c0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000178 	.word	0x20000178

08001f34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <TIM6_DAC_IRQHandler+0x10>)
 8001f3a:	f002 fe68 	bl	8004c0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200001f8 	.word	0x200001f8

08001f48 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == AUTOMATIC_MODE_Pin)
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f58:	d10e      	bne.n	8001f78 <HAL_GPIO_EXTI_Callback+0x30>
	{
		if(!HAL_GPIO_ReadPin(AUTOMATIC_MODE_GPIO_Port, AUTOMATIC_MODE_Pin))
 8001f5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f5e:	4808      	ldr	r0, [pc, #32]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x38>)
 8001f60:	f001 fb9c 	bl	800369c <HAL_GPIO_ReadPin>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d103      	bne.n	8001f72 <HAL_GPIO_EXTI_Callback+0x2a>
		{
			Machine_Mode=AUTOMATIC;
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
			Machine_Mode=MANUAL;
			//Device_init();
		}
	}

}
 8001f70:	e002      	b.n	8001f78 <HAL_GPIO_EXTI_Callback+0x30>
			Machine_Mode=MANUAL;
 8001f72:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021400 	.word	0x40021400
 8001f84:	200000ec 	.word	0x200000ec

08001f88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f8c:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <SystemInit+0x5c>)
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f92:	4a14      	ldr	r2, [pc, #80]	; (8001fe4 <SystemInit+0x5c>)
 8001f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <SystemInit+0x60>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <SystemInit+0x60>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <SystemInit+0x60>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <SystemInit+0x60>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	490d      	ldr	r1, [pc, #52]	; (8001fe8 <SystemInit+0x60>)
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <SystemInit+0x64>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <SystemInit+0x60>)
 8001fbc:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <SystemInit+0x68>)
 8001fbe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <SystemInit+0x60>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a08      	ldr	r2, [pc, #32]	; (8001fe8 <SystemInit+0x60>)
 8001fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <SystemInit+0x60>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fd2:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <SystemInit+0x5c>)
 8001fd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fd8:	609a      	str	r2, [r3, #8]
#endif
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	fef6ffff 	.word	0xfef6ffff
 8001ff0:	24003010 	.word	0x24003010

08001ff4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ffa:	f107 0310 	add.w	r3, r7, #16
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 8002012:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <MX_TIM1_Init+0x9c>)
 8002014:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <MX_TIM1_Init+0xa0>)
 8002016:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <MX_TIM1_Init+0x9c>)
 800201a:	2200      	movs	r2, #0
 800201c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201e:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <MX_TIM1_Init+0x9c>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8002024:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <MX_TIM1_Init+0x9c>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202a:	4b19      	ldr	r3, [pc, #100]	; (8002090 <MX_TIM1_Init+0x9c>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002030:	4b17      	ldr	r3, [pc, #92]	; (8002090 <MX_TIM1_Init+0x9c>)
 8002032:	2200      	movs	r2, #0
 8002034:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002036:	4b16      	ldr	r3, [pc, #88]	; (8002090 <MX_TIM1_Init+0x9c>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800203c:	4814      	ldr	r0, [pc, #80]	; (8002090 <MX_TIM1_Init+0x9c>)
 800203e:	f002 fd65 	bl	8004b0c <HAL_TIM_Base_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002048:	f7ff febe 	bl	8001dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800204c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002050:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002052:	f107 0310 	add.w	r3, r7, #16
 8002056:	4619      	mov	r1, r3
 8002058:	480d      	ldr	r0, [pc, #52]	; (8002090 <MX_TIM1_Init+0x9c>)
 800205a:	f002 fef7 	bl	8004e4c <HAL_TIM_ConfigClockSource>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002064:	f7ff feb0 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002068:	2300      	movs	r3, #0
 800206a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	4619      	mov	r1, r3
 8002078:	4805      	ldr	r0, [pc, #20]	; (8002090 <MX_TIM1_Init+0x9c>)
 800207a:	f003 f903 	bl	8005284 <HAL_TIMEx_MasterConfigSynchronization>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002084:	f7ff fea0 	bl	8001dc8 <Error_Handler>
  }

}
 8002088:	bf00      	nop
 800208a:	3720      	adds	r7, #32
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000238 	.word	0x20000238
 8002094:	40010000 	.word	0x40010000

08002098 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800209e:	f107 0310 	add.w	r3, r7, #16
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80020b6:	4b1d      	ldr	r3, [pc, #116]	; (800212c <MX_TIM2_Init+0x94>)
 80020b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020be:	4b1b      	ldr	r3, [pc, #108]	; (800212c <MX_TIM2_Init+0x94>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <MX_TIM2_Init+0x94>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80020ca:	4b18      	ldr	r3, [pc, #96]	; (800212c <MX_TIM2_Init+0x94>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d0:	4b16      	ldr	r3, [pc, #88]	; (800212c <MX_TIM2_Init+0x94>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <MX_TIM2_Init+0x94>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020dc:	4813      	ldr	r0, [pc, #76]	; (800212c <MX_TIM2_Init+0x94>)
 80020de:	f002 fd15 	bl	8004b0c <HAL_TIM_Base_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80020e8:	f7ff fe6e 	bl	8001dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	4619      	mov	r1, r3
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <MX_TIM2_Init+0x94>)
 80020fa:	f002 fea7 	bl	8004e4c <HAL_TIM_ConfigClockSource>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002104:	f7ff fe60 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	4619      	mov	r1, r3
 8002114:	4805      	ldr	r0, [pc, #20]	; (800212c <MX_TIM2_Init+0x94>)
 8002116:	f003 f8b5 	bl	8005284 <HAL_TIMEx_MasterConfigSynchronization>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002120:	f7ff fe52 	bl	8001dc8 <Error_Handler>
  }

}
 8002124:	bf00      	nop
 8002126:	3720      	adds	r7, #32
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000278 	.word	0x20000278

08002130 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002136:	f107 0310 	add.w	r3, r7, #16
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 800214e:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <MX_TIM3_Init+0x94>)
 8002150:	4a1d      	ldr	r2, [pc, #116]	; (80021c8 <MX_TIM3_Init+0x98>)
 8002152:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002154:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <MX_TIM3_Init+0x94>)
 8002156:	2200      	movs	r2, #0
 8002158:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <MX_TIM3_Init+0x94>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8002160:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <MX_TIM3_Init+0x94>)
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <MX_TIM3_Init+0x94>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216c:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <MX_TIM3_Init+0x94>)
 800216e:	2200      	movs	r2, #0
 8002170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002172:	4814      	ldr	r0, [pc, #80]	; (80021c4 <MX_TIM3_Init+0x94>)
 8002174:	f002 fcca 	bl	8004b0c <HAL_TIM_Base_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800217e:	f7ff fe23 	bl	8001dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002186:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	4619      	mov	r1, r3
 800218e:	480d      	ldr	r0, [pc, #52]	; (80021c4 <MX_TIM3_Init+0x94>)
 8002190:	f002 fe5c 	bl	8004e4c <HAL_TIM_ConfigClockSource>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800219a:	f7ff fe15 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	4619      	mov	r1, r3
 80021aa:	4806      	ldr	r0, [pc, #24]	; (80021c4 <MX_TIM3_Init+0x94>)
 80021ac:	f003 f86a 	bl	8005284 <HAL_TIMEx_MasterConfigSynchronization>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80021b6:	f7ff fe07 	bl	8001dc8 <Error_Handler>
  }

}
 80021ba:	bf00      	nop
 80021bc:	3720      	adds	r7, #32
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200001b8 	.word	0x200001b8
 80021c8:	40000400 	.word	0x40000400

080021cc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021d2:	f107 0310 	add.w	r3, r7, #16
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 80021ea:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <MX_TIM4_Init+0x94>)
 80021ec:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <MX_TIM4_Init+0x98>)
 80021ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80021f0:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <MX_TIM4_Init+0x94>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f6:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <MX_TIM4_Init+0x94>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80021fc:	4b18      	ldr	r3, [pc, #96]	; (8002260 <MX_TIM4_Init+0x94>)
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002202:	4b17      	ldr	r3, [pc, #92]	; (8002260 <MX_TIM4_Init+0x94>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002208:	4b15      	ldr	r3, [pc, #84]	; (8002260 <MX_TIM4_Init+0x94>)
 800220a:	2200      	movs	r2, #0
 800220c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800220e:	4814      	ldr	r0, [pc, #80]	; (8002260 <MX_TIM4_Init+0x94>)
 8002210:	f002 fc7c 	bl	8004b0c <HAL_TIM_Base_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800221a:	f7ff fdd5 	bl	8001dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800221e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002222:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002224:	f107 0310 	add.w	r3, r7, #16
 8002228:	4619      	mov	r1, r3
 800222a:	480d      	ldr	r0, [pc, #52]	; (8002260 <MX_TIM4_Init+0x94>)
 800222c:	f002 fe0e 	bl	8004e4c <HAL_TIM_ConfigClockSource>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002236:	f7ff fdc7 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	4619      	mov	r1, r3
 8002246:	4806      	ldr	r0, [pc, #24]	; (8002260 <MX_TIM4_Init+0x94>)
 8002248:	f003 f81c 	bl	8005284 <HAL_TIMEx_MasterConfigSynchronization>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002252:	f7ff fdb9 	bl	8001dc8 <Error_Handler>
  }

}
 8002256:	bf00      	nop
 8002258:	3720      	adds	r7, #32
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000138 	.word	0x20000138
 8002264:	40000800 	.word	0x40000800

08002268 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800226e:	f107 0310 	add.w	r3, r7, #16
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8002286:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <MX_TIM5_Init+0x94>)
 8002288:	4a1d      	ldr	r2, [pc, #116]	; (8002300 <MX_TIM5_Init+0x98>)
 800228a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800228c:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <MX_TIM5_Init+0x94>)
 800228e:	2200      	movs	r2, #0
 8002290:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002292:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <MX_TIM5_Init+0x94>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8002298:	4b18      	ldr	r3, [pc, #96]	; (80022fc <MX_TIM5_Init+0x94>)
 800229a:	2200      	movs	r2, #0
 800229c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800229e:	4b17      	ldr	r3, [pc, #92]	; (80022fc <MX_TIM5_Init+0x94>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a4:	4b15      	ldr	r3, [pc, #84]	; (80022fc <MX_TIM5_Init+0x94>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022aa:	4814      	ldr	r0, [pc, #80]	; (80022fc <MX_TIM5_Init+0x94>)
 80022ac:	f002 fc2e 	bl	8004b0c <HAL_TIM_Base_Init>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80022b6:	f7ff fd87 	bl	8001dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80022c0:	f107 0310 	add.w	r3, r7, #16
 80022c4:	4619      	mov	r1, r3
 80022c6:	480d      	ldr	r0, [pc, #52]	; (80022fc <MX_TIM5_Init+0x94>)
 80022c8:	f002 fdc0 	bl	8004e4c <HAL_TIM_ConfigClockSource>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80022d2:	f7ff fd79 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	4619      	mov	r1, r3
 80022e2:	4806      	ldr	r0, [pc, #24]	; (80022fc <MX_TIM5_Init+0x94>)
 80022e4:	f002 ffce 	bl	8005284 <HAL_TIMEx_MasterConfigSynchronization>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80022ee:	f7ff fd6b 	bl	8001dc8 <Error_Handler>
  }

}
 80022f2:	bf00      	nop
 80022f4:	3720      	adds	r7, #32
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000178 	.word	0x20000178
 8002300:	40000c00 	.word	0x40000c00

08002304 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8002314:	4b14      	ldr	r3, [pc, #80]	; (8002368 <MX_TIM6_Init+0x64>)
 8002316:	4a15      	ldr	r2, [pc, #84]	; (800236c <MX_TIM6_Init+0x68>)
 8002318:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800231a:	4b13      	ldr	r3, [pc, #76]	; (8002368 <MX_TIM6_Init+0x64>)
 800231c:	2200      	movs	r2, #0
 800231e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <MX_TIM6_Init+0x64>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <MX_TIM6_Init+0x64>)
 8002328:	2200      	movs	r2, #0
 800232a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800232c:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <MX_TIM6_Init+0x64>)
 800232e:	2200      	movs	r2, #0
 8002330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002332:	480d      	ldr	r0, [pc, #52]	; (8002368 <MX_TIM6_Init+0x64>)
 8002334:	f002 fbea 	bl	8004b0c <HAL_TIM_Base_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800233e:	f7ff fd43 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	4619      	mov	r1, r3
 800234e:	4806      	ldr	r0, [pc, #24]	; (8002368 <MX_TIM6_Init+0x64>)
 8002350:	f002 ff98 	bl	8005284 <HAL_TIMEx_MasterConfigSynchronization>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800235a:	f7ff fd35 	bl	8001dc8 <Error_Handler>
  }

}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200001f8 	.word	0x200001f8
 800236c:	40001000 	.word	0x40001000

08002370 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a5a      	ldr	r2, [pc, #360]	; (80024e8 <HAL_TIM_Base_MspInit+0x178>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d12c      	bne.n	80023dc <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002382:	4b5a      	ldr	r3, [pc, #360]	; (80024ec <HAL_TIM_Base_MspInit+0x17c>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	4a59      	ldr	r2, [pc, #356]	; (80024ec <HAL_TIM_Base_MspInit+0x17c>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6453      	str	r3, [r2, #68]	; 0x44
 800238e:	4b57      	ldr	r3, [pc, #348]	; (80024ec <HAL_TIM_Base_MspInit+0x17c>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	2018      	movs	r0, #24
 80023a0:	f000 fb2f 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80023a4:	2018      	movs	r0, #24
 80023a6:	f000 fb48 	bl	8002a3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2100      	movs	r1, #0
 80023ae:	2019      	movs	r0, #25
 80023b0:	f000 fb27 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023b4:	2019      	movs	r0, #25
 80023b6:	f000 fb40 	bl	8002a3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2100      	movs	r1, #0
 80023be:	201a      	movs	r0, #26
 80023c0:	f000 fb1f 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80023c4:	201a      	movs	r0, #26
 80023c6:	f000 fb38 	bl	8002a3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2100      	movs	r1, #0
 80023ce:	201b      	movs	r0, #27
 80023d0:	f000 fb17 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80023d4:	201b      	movs	r0, #27
 80023d6:	f000 fb30 	bl	8002a3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80023da:	e080      	b.n	80024de <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e4:	d114      	bne.n	8002410 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023e6:	4b41      	ldr	r3, [pc, #260]	; (80024ec <HAL_TIM_Base_MspInit+0x17c>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a40      	ldr	r2, [pc, #256]	; (80024ec <HAL_TIM_Base_MspInit+0x17c>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b3e      	ldr	r3, [pc, #248]	; (80024ec <HAL_TIM_Base_MspInit+0x17c>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2100      	movs	r1, #0
 8002402:	201c      	movs	r0, #28
 8002404:	f000 fafd 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002408:	201c      	movs	r0, #28
 800240a:	f000 fb16 	bl	8002a3a <HAL_NVIC_EnableIRQ>
}
 800240e:	e066      	b.n	80024de <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM3)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a36      	ldr	r2, [pc, #216]	; (80024f0 <HAL_TIM_Base_MspInit+0x180>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d114      	bne.n	8002444 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800241a:	4b34      	ldr	r3, [pc, #208]	; (80024ec <HAL_TIM_Base_MspInit+0x17c>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a33      	ldr	r2, [pc, #204]	; (80024ec <HAL_TIM_Base_MspInit+0x17c>)
 8002420:	f043 0302 	orr.w	r3, r3, #2
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
 8002426:	4b31      	ldr	r3, [pc, #196]	; (80024ec <HAL_TIM_Base_MspInit+0x17c>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	2100      	movs	r1, #0
 8002436:	201d      	movs	r0, #29
 8002438:	f000 fae3 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800243c:	201d      	movs	r0, #29
 800243e:	f000 fafc 	bl	8002a3a <HAL_NVIC_EnableIRQ>
}
 8002442:	e04c      	b.n	80024de <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM4)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a2a      	ldr	r2, [pc, #168]	; (80024f4 <HAL_TIM_Base_MspInit+0x184>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d114      	bne.n	8002478 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800244e:	4b27      	ldr	r3, [pc, #156]	; (80024ec <HAL_TIM_Base_MspInit+0x17c>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a26      	ldr	r2, [pc, #152]	; (80024ec <HAL_TIM_Base_MspInit+0x17c>)
 8002454:	f043 0304 	orr.w	r3, r3, #4
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
 800245a:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_TIM_Base_MspInit+0x17c>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	2100      	movs	r1, #0
 800246a:	201e      	movs	r0, #30
 800246c:	f000 fac9 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002470:	201e      	movs	r0, #30
 8002472:	f000 fae2 	bl	8002a3a <HAL_NVIC_EnableIRQ>
}
 8002476:	e032      	b.n	80024de <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM5)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1e      	ldr	r2, [pc, #120]	; (80024f8 <HAL_TIM_Base_MspInit+0x188>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d114      	bne.n	80024ac <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002482:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <HAL_TIM_Base_MspInit+0x17c>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	4a19      	ldr	r2, [pc, #100]	; (80024ec <HAL_TIM_Base_MspInit+0x17c>)
 8002488:	f043 0308 	orr.w	r3, r3, #8
 800248c:	6413      	str	r3, [r2, #64]	; 0x40
 800248e:	4b17      	ldr	r3, [pc, #92]	; (80024ec <HAL_TIM_Base_MspInit+0x17c>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	2100      	movs	r1, #0
 800249e:	2032      	movs	r0, #50	; 0x32
 80024a0:	f000 faaf 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80024a4:	2032      	movs	r0, #50	; 0x32
 80024a6:	f000 fac8 	bl	8002a3a <HAL_NVIC_EnableIRQ>
}
 80024aa:	e018      	b.n	80024de <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM6)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a12      	ldr	r2, [pc, #72]	; (80024fc <HAL_TIM_Base_MspInit+0x18c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d113      	bne.n	80024de <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <HAL_TIM_Base_MspInit+0x17c>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	4a0c      	ldr	r2, [pc, #48]	; (80024ec <HAL_TIM_Base_MspInit+0x17c>)
 80024bc:	f043 0310 	orr.w	r3, r3, #16
 80024c0:	6413      	str	r3, [r2, #64]	; 0x40
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <HAL_TIM_Base_MspInit+0x17c>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80024ce:	2200      	movs	r2, #0
 80024d0:	2100      	movs	r1, #0
 80024d2:	2036      	movs	r0, #54	; 0x36
 80024d4:	f000 fa95 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024d8:	2036      	movs	r0, #54	; 0x36
 80024da:	f000 faae 	bl	8002a3a <HAL_NVIC_EnableIRQ>
}
 80024de:	bf00      	nop
 80024e0:	3720      	adds	r7, #32
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40010000 	.word	0x40010000
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40000400 	.word	0x40000400
 80024f4:	40000800 	.word	0x40000800
 80024f8:	40000c00 	.word	0x40000c00
 80024fc:	40001000 	.word	0x40001000

08002500 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002504:	4b14      	ldr	r3, [pc, #80]	; (8002558 <MX_USART3_UART_Init+0x58>)
 8002506:	4a15      	ldr	r2, [pc, #84]	; (800255c <MX_USART3_UART_Init+0x5c>)
 8002508:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800250a:	4b13      	ldr	r3, [pc, #76]	; (8002558 <MX_USART3_UART_Init+0x58>)
 800250c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002510:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <MX_USART3_UART_Init+0x58>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <MX_USART3_UART_Init+0x58>)
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <MX_USART3_UART_Init+0x58>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <MX_USART3_UART_Init+0x58>)
 8002526:	220c      	movs	r2, #12
 8002528:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800252a:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <MX_USART3_UART_Init+0x58>)
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <MX_USART3_UART_Init+0x58>)
 8002532:	2200      	movs	r2, #0
 8002534:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002536:	4b08      	ldr	r3, [pc, #32]	; (8002558 <MX_USART3_UART_Init+0x58>)
 8002538:	2200      	movs	r2, #0
 800253a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <MX_USART3_UART_Init+0x58>)
 800253e:	2200      	movs	r2, #0
 8002540:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002542:	4805      	ldr	r0, [pc, #20]	; (8002558 <MX_USART3_UART_Init+0x58>)
 8002544:	f002 ff18 	bl	8005378 <HAL_UART_Init>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800254e:	f7ff fc3b 	bl	8001dc8 <Error_Handler>
  }

}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200002b8 	.word	0x200002b8
 800255c:	40004800 	.word	0x40004800

08002560 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	; 0x28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a17      	ldr	r2, [pc, #92]	; (80025dc <HAL_UART_MspInit+0x7c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d128      	bne.n	80025d4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002582:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <HAL_UART_MspInit+0x80>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	4a16      	ldr	r2, [pc, #88]	; (80025e0 <HAL_UART_MspInit+0x80>)
 8002588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800258c:	6413      	str	r3, [r2, #64]	; 0x40
 800258e:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <HAL_UART_MspInit+0x80>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <HAL_UART_MspInit+0x80>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a10      	ldr	r2, [pc, #64]	; (80025e0 <HAL_UART_MspInit+0x80>)
 80025a0:	f043 0308 	orr.w	r3, r3, #8
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <HAL_UART_MspInit+0x80>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80025b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b8:	2302      	movs	r3, #2
 80025ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c0:	2303      	movs	r3, #3
 80025c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025c4:	2307      	movs	r3, #7
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	4619      	mov	r1, r3
 80025ce:	4805      	ldr	r0, [pc, #20]	; (80025e4 <HAL_UART_MspInit+0x84>)
 80025d0:	f000 feba 	bl	8003348 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80025d4:	bf00      	nop
 80025d6:	3728      	adds	r7, #40	; 0x28
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40004800 	.word	0x40004800
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020c00 	.word	0x40020c00

080025e8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80025ec:	4b14      	ldr	r3, [pc, #80]	; (8002640 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80025f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80025f4:	4b12      	ldr	r3, [pc, #72]	; (8002640 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025f6:	2206      	movs	r2, #6
 80025f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80025fa:	4b11      	ldr	r3, [pc, #68]	; (8002640 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025fc:	2202      	movs	r2, #2
 80025fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002600:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002608:	2202      	movs	r2, #2
 800260a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800260e:	2201      	movs	r2, #1
 8002610:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002614:	2200      	movs	r2, #0
 8002616:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800261a:	2200      	movs	r2, #0
 800261c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002620:	2201      	movs	r2, #1
 8002622:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002626:	2200      	movs	r2, #0
 8002628:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800262a:	4805      	ldr	r0, [pc, #20]	; (8002640 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800262c:	f001 f880 	bl	8003730 <HAL_PCD_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002636:	f7ff fbc7 	bl	8001dc8 <Error_Handler>
  }

}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000338 	.word	0x20000338

08002644 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002664:	d141      	bne.n	80026ea <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002666:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <HAL_PCD_MspInit+0xb0>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a22      	ldr	r2, [pc, #136]	; (80026f4 <HAL_PCD_MspInit+0xb0>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <HAL_PCD_MspInit+0xb0>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800267e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268c:	2303      	movs	r3, #3
 800268e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002690:	230a      	movs	r3, #10
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	4619      	mov	r1, r3
 800269a:	4817      	ldr	r0, [pc, #92]	; (80026f8 <HAL_PCD_MspInit+0xb4>)
 800269c:	f000 fe54 	bl	8003348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80026a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	4619      	mov	r1, r3
 80026b4:	4810      	ldr	r0, [pc, #64]	; (80026f8 <HAL_PCD_MspInit+0xb4>)
 80026b6:	f000 fe47 	bl	8003348 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <HAL_PCD_MspInit+0xb0>)
 80026bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026be:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <HAL_PCD_MspInit+0xb0>)
 80026c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c4:	6353      	str	r3, [r2, #52]	; 0x34
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_PCD_MspInit+0xb0>)
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <HAL_PCD_MspInit+0xb0>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <HAL_PCD_MspInit+0xb0>)
 80026d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026dc:	6453      	str	r3, [r2, #68]	; 0x44
 80026de:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_PCD_MspInit+0xb0>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80026ea:	bf00      	nop
 80026ec:	3728      	adds	r7, #40	; 0x28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40020000 	.word	0x40020000

080026fc <Reset_Handler>:
 80026fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002734 <LoopFillZerobss+0x14>
 8002700:	2100      	movs	r1, #0
 8002702:	e003      	b.n	800270c <LoopCopyDataInit>

08002704 <CopyDataInit>:
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <LoopFillZerobss+0x18>)
 8002706:	585b      	ldr	r3, [r3, r1]
 8002708:	5043      	str	r3, [r0, r1]
 800270a:	3104      	adds	r1, #4

0800270c <LoopCopyDataInit>:
 800270c:	480b      	ldr	r0, [pc, #44]	; (800273c <LoopFillZerobss+0x1c>)
 800270e:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <LoopFillZerobss+0x20>)
 8002710:	1842      	adds	r2, r0, r1
 8002712:	429a      	cmp	r2, r3
 8002714:	d3f6      	bcc.n	8002704 <CopyDataInit>
 8002716:	4a0b      	ldr	r2, [pc, #44]	; (8002744 <LoopFillZerobss+0x24>)
 8002718:	e002      	b.n	8002720 <LoopFillZerobss>

0800271a <FillZerobss>:
 800271a:	2300      	movs	r3, #0
 800271c:	f842 3b04 	str.w	r3, [r2], #4

08002720 <LoopFillZerobss>:
 8002720:	4b09      	ldr	r3, [pc, #36]	; (8002748 <LoopFillZerobss+0x28>)
 8002722:	429a      	cmp	r2, r3
 8002724:	d3f9      	bcc.n	800271a <FillZerobss>
 8002726:	f7ff fc2f 	bl	8001f88 <SystemInit>
 800272a:	f003 fcef 	bl	800610c <__libc_init_array>
 800272e:	f7ff f9a3 	bl	8001a78 <main>
 8002732:	4770      	bx	lr
 8002734:	20050000 	.word	0x20050000
 8002738:	080061a4 	.word	0x080061a4
 800273c:	20000000 	.word	0x20000000
 8002740:	2000000c 	.word	0x2000000c
 8002744:	2000000c 	.word	0x2000000c
 8002748:	20000740 	.word	0x20000740

0800274c <ADC_IRQHandler>:
 800274c:	e7fe      	b.n	800274c <ADC_IRQHandler>

0800274e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002752:	2003      	movs	r0, #3
 8002754:	f000 f94a 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002758:	2000      	movs	r0, #0
 800275a:	f000 f805 	bl	8002768 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800275e:	f7ff fb3b 	bl	8001dd8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_InitTick+0x54>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_InitTick+0x58>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	4619      	mov	r1, r3
 800277a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800277e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002782:	fbb2 f3f3 	udiv	r3, r2, r3
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f965 	bl	8002a56 <HAL_SYSTICK_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e00e      	b.n	80027b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b0f      	cmp	r3, #15
 800279a:	d80a      	bhi.n	80027b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800279c:	2200      	movs	r2, #0
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295
 80027a4:	f000 f92d 	bl	8002a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027a8:	4a06      	ldr	r2, [pc, #24]	; (80027c4 <HAL_InitTick+0x5c>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e000      	b.n	80027b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000000 	.word	0x20000000
 80027c0:	20000008 	.word	0x20000008
 80027c4:	20000004 	.word	0x20000004

080027c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_IncTick+0x20>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_IncTick+0x24>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4413      	add	r3, r2
 80027d8:	4a04      	ldr	r2, [pc, #16]	; (80027ec <HAL_IncTick+0x24>)
 80027da:	6013      	str	r3, [r2, #0]
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20000008 	.word	0x20000008
 80027ec:	2000073c 	.word	0x2000073c

080027f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return uwTick;
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <HAL_GetTick+0x14>)
 80027f6:	681b      	ldr	r3, [r3, #0]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	2000073c 	.word	0x2000073c

08002808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7ff ffee 	bl	80027f0 <HAL_GetTick>
 8002814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d005      	beq.n	800282e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_Delay+0x40>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4413      	add	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800282e:	bf00      	nop
 8002830:	f7ff ffde 	bl	80027f0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	429a      	cmp	r2, r3
 800283e:	d8f7      	bhi.n	8002830 <HAL_Delay+0x28>
  {
  }
}
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000008 	.word	0x20000008

0800284c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <__NVIC_SetPriorityGrouping+0x40>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 8002876:	4313      	orrs	r3, r2
 8002878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287a:	4a04      	ldr	r2, [pc, #16]	; (800288c <__NVIC_SetPriorityGrouping+0x40>)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	60d3      	str	r3, [r2, #12]
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00
 8002890:	05fa0000 	.word	0x05fa0000

08002894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <__NVIC_GetPriorityGrouping+0x18>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0307 	and.w	r3, r3, #7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db0b      	blt.n	80028da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4907      	ldr	r1, [pc, #28]	; (80028e8 <__NVIC_EnableIRQ+0x38>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2001      	movs	r0, #1
 80028d2:	fa00 f202 	lsl.w	r2, r0, r2
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000e100 	.word	0xe000e100

080028ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	db0a      	blt.n	8002916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	490c      	ldr	r1, [pc, #48]	; (8002938 <__NVIC_SetPriority+0x4c>)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	440b      	add	r3, r1
 8002910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002914:	e00a      	b.n	800292c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4908      	ldr	r1, [pc, #32]	; (800293c <__NVIC_SetPriority+0x50>)
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3b04      	subs	r3, #4
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	440b      	add	r3, r1
 800292a:	761a      	strb	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000e100 	.word	0xe000e100
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f1c3 0307 	rsb	r3, r3, #7
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf28      	it	cs
 800295e:	2304      	movcs	r3, #4
 8002960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3304      	adds	r3, #4
 8002966:	2b06      	cmp	r3, #6
 8002968:	d902      	bls.n	8002970 <NVIC_EncodePriority+0x30>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3b03      	subs	r3, #3
 800296e:	e000      	b.n	8002972 <NVIC_EncodePriority+0x32>
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	401a      	ands	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002988:	f04f 31ff 	mov.w	r1, #4294967295
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43d9      	mvns	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	4313      	orrs	r3, r2
         );
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b8:	d301      	bcc.n	80029be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00f      	b.n	80029de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <SysTick_Config+0x40>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c6:	210f      	movs	r1, #15
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f7ff ff8e 	bl	80028ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <SysTick_Config+0x40>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <SysTick_Config+0x40>)
 80029d8:	2207      	movs	r2, #7
 80029da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	e000e010 	.word	0xe000e010

080029ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff29 	bl	800284c <__NVIC_SetPriorityGrouping>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a14:	f7ff ff3e 	bl	8002894 <__NVIC_GetPriorityGrouping>
 8002a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	6978      	ldr	r0, [r7, #20]
 8002a20:	f7ff ff8e 	bl	8002940 <NVIC_EncodePriority>
 8002a24:	4602      	mov	r2, r0
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff5d 	bl	80028ec <__NVIC_SetPriority>
}
 8002a32:	bf00      	nop
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff31 	bl	80028b0 <__NVIC_EnableIRQ>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ffa2 	bl	80029a8 <SysTick_Config>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61fb      	str	r3, [r7, #28]
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8002a80:	4ba9      	ldr	r3, [pc, #676]	; (8002d28 <HAL_ETH_Init+0x2b8>)
 8002a82:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e183      	b.n	8002d9e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fe f904 	bl	8000cb8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab0:	4b9e      	ldr	r3, [pc, #632]	; (8002d2c <HAL_ETH_Init+0x2bc>)
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	4a9d      	ldr	r2, [pc, #628]	; (8002d2c <HAL_ETH_Init+0x2bc>)
 8002ab6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aba:	6453      	str	r3, [r2, #68]	; 0x44
 8002abc:	4b9b      	ldr	r3, [pc, #620]	; (8002d2c <HAL_ETH_Init+0x2bc>)
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002ac8:	4b99      	ldr	r3, [pc, #612]	; (8002d30 <HAL_ETH_Init+0x2c0>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4a98      	ldr	r2, [pc, #608]	; (8002d30 <HAL_ETH_Init+0x2c0>)
 8002ace:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ad2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002ad4:	4b96      	ldr	r3, [pc, #600]	; (8002d30 <HAL_ETH_Init+0x2c0>)
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	4994      	ldr	r1, [pc, #592]	; (8002d30 <HAL_ETH_Init+0x2c0>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0201 	orr.w	r2, r2, #1
 8002af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002afa:	f7ff fe79 	bl	80027f0 <HAL_GetTick>
 8002afe:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002b00:	e011      	b.n	8002b26 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002b02:	f7ff fe75 	bl	80027f0 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b10:	d909      	bls.n	8002b26 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2203      	movs	r2, #3
 8002b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e13b      	b.n	8002d9e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1e4      	bne.n	8002b02 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f023 031c 	bic.w	r3, r3, #28
 8002b46:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002b48:	f001 fbbe 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 8002b4c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	4a78      	ldr	r2, [pc, #480]	; (8002d34 <HAL_ETH_Init+0x2c4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d908      	bls.n	8002b68 <HAL_ETH_Init+0xf8>
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	4a77      	ldr	r2, [pc, #476]	; (8002d38 <HAL_ETH_Init+0x2c8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d804      	bhi.n	8002b68 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	f043 0308 	orr.w	r3, r3, #8
 8002b64:	61fb      	str	r3, [r7, #28]
 8002b66:	e027      	b.n	8002bb8 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	4a73      	ldr	r2, [pc, #460]	; (8002d38 <HAL_ETH_Init+0x2c8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d908      	bls.n	8002b82 <HAL_ETH_Init+0x112>
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	4a72      	ldr	r2, [pc, #456]	; (8002d3c <HAL_ETH_Init+0x2cc>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d804      	bhi.n	8002b82 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f043 030c 	orr.w	r3, r3, #12
 8002b7e:	61fb      	str	r3, [r7, #28]
 8002b80:	e01a      	b.n	8002bb8 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	4a6d      	ldr	r2, [pc, #436]	; (8002d3c <HAL_ETH_Init+0x2cc>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d903      	bls.n	8002b92 <HAL_ETH_Init+0x122>
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	4a6c      	ldr	r2, [pc, #432]	; (8002d40 <HAL_ETH_Init+0x2d0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d911      	bls.n	8002bb6 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	4a6a      	ldr	r2, [pc, #424]	; (8002d40 <HAL_ETH_Init+0x2d0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d908      	bls.n	8002bac <HAL_ETH_Init+0x13c>
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	4a69      	ldr	r2, [pc, #420]	; (8002d44 <HAL_ETH_Init+0x2d4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d804      	bhi.n	8002bac <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f043 0304 	orr.w	r3, r3, #4
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	e005      	b.n	8002bb8 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f043 0310 	orr.w	r3, r3, #16
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	e000      	b.n	8002bb8 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002bb6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002bc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f956 	bl	8002e78 <HAL_ETH_WritePHYRegister>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00b      	beq.n	8002bea <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002bd6:	6939      	ldr	r1, [r7, #16]
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f9b3 	bl	8002f44 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e0d9      	b.n	8002d9e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002bea:	20ff      	movs	r0, #255	; 0xff
 8002bec:	f7ff fe0c 	bl	8002808 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80a7 	beq.w	8002d48 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bfa:	f7ff fdf9 	bl	80027f0 <HAL_GetTick>
 8002bfe:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002c00:	f107 030c 	add.w	r3, r7, #12
 8002c04:	461a      	mov	r2, r3
 8002c06:	2101      	movs	r1, #1
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f8cd 	bl	8002da8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002c0e:	f7ff fdef 	bl	80027f0 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d90f      	bls.n	8002c40 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002c24:	6939      	ldr	r1, [r7, #16]
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f98c 	bl	8002f44 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e0ae      	b.n	8002d9e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0da      	beq.n	8002c00 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002c4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c4e:	2100      	movs	r1, #0
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f911 	bl	8002e78 <HAL_ETH_WritePHYRegister>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00b      	beq.n	8002c74 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002c60:	6939      	ldr	r1, [r7, #16]
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f96e 	bl	8002f44 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002c70:	2301      	movs	r3, #1
 8002c72:	e094      	b.n	8002d9e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c74:	f7ff fdbc 	bl	80027f0 <HAL_GetTick>
 8002c78:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002c7a:	f107 030c 	add.w	r3, r7, #12
 8002c7e:	461a      	mov	r2, r3
 8002c80:	2101      	movs	r1, #1
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f890 	bl	8002da8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002c88:	f7ff fdb2 	bl	80027f0 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d90f      	bls.n	8002cba <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002c9e:	6939      	ldr	r1, [r7, #16]
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f94f 	bl	8002f44 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e071      	b.n	8002d9e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0da      	beq.n	8002c7a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002cc4:	f107 030c 	add.w	r3, r7, #12
 8002cc8:	461a      	mov	r2, r3
 8002cca:	211f      	movs	r1, #31
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f86b 	bl	8002da8 <HAL_ETH_ReadPHYRegister>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00b      	beq.n	8002cf0 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002cdc:	6939      	ldr	r1, [r7, #16]
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f930 	bl	8002f44 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002cec:	2301      	movs	r3, #1
 8002cee:	e056      	b.n	8002d9e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d004      	beq.n	8002d04 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	e002      	b.n	8002d0a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
 8002d1a:	e037      	b.n	8002d8c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	e032      	b.n	8002d8c <HAL_ETH_Init+0x31c>
 8002d26:	bf00      	nop
 8002d28:	03938700 	.word	0x03938700
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40013800 	.word	0x40013800
 8002d34:	01312cff 	.word	0x01312cff
 8002d38:	02160ebf 	.word	0x02160ebf
 8002d3c:	039386ff 	.word	0x039386ff
 8002d40:	05f5e0ff 	.word	0x05f5e0ff
 8002d44:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	08db      	lsrs	r3, r3, #3
 8002d4e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2100      	movs	r1, #0
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f889 	bl	8002e78 <HAL_ETH_WritePHYRegister>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00b      	beq.n	8002d84 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002d70:	6939      	ldr	r1, [r7, #16]
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f8e6 	bl	8002f44 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e00c      	b.n	8002d9e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002d84:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002d88:	f7ff fd3e 	bl	8002808 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002d8c:	6939      	ldr	r1, [r7, #16]
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f8d8 	bl	8002f44 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3720      	adds	r7, #32
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop

08002da8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	460b      	mov	r3, r1
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b82      	cmp	r3, #130	; 0x82
 8002dc8:	d101      	bne.n	8002dce <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e050      	b.n	8002e70 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2282      	movs	r2, #130	; 0x82
 8002dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f003 031c 	and.w	r3, r3, #28
 8002de4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8a1b      	ldrh	r3, [r3, #16]
 8002dea:	02db      	lsls	r3, r3, #11
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002df4:	897b      	ldrh	r3, [r7, #10]
 8002df6:	019b      	lsls	r3, r3, #6
 8002df8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f023 0302 	bic.w	r3, r3, #2
 8002e08:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002e1a:	f7ff fce9 	bl	80027f0 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e20:	e015      	b.n	8002e4e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002e22:	f7ff fce5 	bl	80027f0 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e30:	d309      	bcc.n	8002e46 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e014      	b.n	8002e70 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1e4      	bne.n	8002e22 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	460b      	mov	r3, r1
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b42      	cmp	r3, #66	; 0x42
 8002e98:	d101      	bne.n	8002e9e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e04e      	b.n	8002f3c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2242      	movs	r2, #66	; 0x42
 8002ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f003 031c 	and.w	r3, r3, #28
 8002eb4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8a1b      	ldrh	r3, [r3, #16]
 8002eba:	02db      	lsls	r3, r3, #11
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002ec4:	897b      	ldrh	r3, [r7, #10]
 8002ec6:	019b      	lsls	r3, r3, #6
 8002ec8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f043 0302 	orr.w	r3, r3, #2
 8002ed8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002ef4:	f7ff fc7c 	bl	80027f0 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002efa:	e015      	b.n	8002f28 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002efc:	f7ff fc78 	bl	80027f0 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0a:	d309      	bcc.n	8002f20 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e00d      	b.n	8002f3c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1e4      	bne.n	8002efc <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b0b0      	sub	sp, #192	; 0xc0
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d007      	beq.n	8002f6a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f60:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f68:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002f72:	2300      	movs	r3, #0
 8002f74:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002f76:	2300      	movs	r3, #0
 8002f78:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d103      	bne.n	8002f92 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f8e:	663b      	str	r3, [r7, #96]	; 0x60
 8002f90:	e001      	b.n	8002f96 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f9a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002fac:	2300      	movs	r3, #0
 8002fae:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002fb0:	2340      	movs	r3, #64	; 0x40
 8002fb2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002fea:	2300      	movs	r3, #0
 8002fec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003002:	2300      	movs	r3, #0
 8003004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8003008:	2300      	movs	r3, #0
 800300a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003018:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800301c:	4bab      	ldr	r3, [pc, #684]	; (80032cc <ETH_MACDMAConfig+0x388>)
 800301e:	4013      	ands	r3, r2
 8003020:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003024:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003028:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800302a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800302c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800302e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003030:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003036:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003038:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800303a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800303c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800303e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003044:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003048:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800304a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800304c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800304e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003050:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003054:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003056:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003058:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800305a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800306c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003078:	2001      	movs	r0, #1
 800307a:	f7ff fbc5 	bl	8002808 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003086:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003088:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800308a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800308c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800308e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003090:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003092:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003096:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003098:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800309c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800309e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80030a2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80030a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80030a8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80030ac:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80030b4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80030b6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80030c2:	2001      	movs	r0, #1
 80030c4:	f7ff fba0 	bl	8002808 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80030d0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030da:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80030e4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80030f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80030f4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80030f8:	4013      	ands	r3, r2
 80030fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80030fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003102:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003104:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003108:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800310a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800310e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003110:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003114:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800311a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800311c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003120:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003122:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003134:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003140:	2001      	movs	r0, #1
 8003142:	f7ff fb61 	bl	8002808 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800314e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003150:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003154:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800316a:	2001      	movs	r0, #1
 800316c:	f7ff fb4c 	bl	8002808 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003178:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800317e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003182:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003184:	2300      	movs	r3, #0
 8003186:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003188:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800318c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800318e:	2300      	movs	r3, #0
 8003190:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003196:	2300      	movs	r3, #0
 8003198:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800319a:	2300      	movs	r3, #0
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800319e:	2304      	movs	r3, #4
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80031a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80031a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031ac:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80031ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031b2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80031b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031b8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80031ba:	2380      	movs	r3, #128	; 0x80
 80031bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80031be:	2300      	movs	r3, #0
 80031c0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80031c2:	2300      	movs	r3, #0
 80031c4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	f241 0318 	movw	r3, #4120	; 0x1018
 80031ce:	4413      	add	r3, r2
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80031d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80031da:	4b3d      	ldr	r3, [pc, #244]	; (80032d0 <ETH_MACDMAConfig+0x38c>)
 80031dc:	4013      	ands	r3, r2
 80031de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80031e2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80031e4:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80031e6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80031e8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80031ea:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80031ec:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80031ee:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80031f0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80031f2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80031f4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80031f6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80031f8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80031fa:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80031fe:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003200:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003202:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003204:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	f241 0318 	movw	r3, #4120	; 0x1018
 8003216:	4413      	add	r3, r2
 8003218:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800321c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	f241 0318 	movw	r3, #4120	; 0x1018
 8003226:	4413      	add	r3, r2
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800322e:	2001      	movs	r0, #1
 8003230:	f7ff faea 	bl	8002808 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	f241 0318 	movw	r3, #4120	; 0x1018
 800323c:	4413      	add	r3, r2
 800323e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003242:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003248:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800324a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800324c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003250:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003254:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8003256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003258:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800325a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800325c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800325e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800326c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800327c:	2001      	movs	r0, #1
 800327e:	f7ff fac3 	bl	8002808 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800328a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800328e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d10d      	bne.n	80032b4 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	f241 031c 	movw	r3, #4124	; 0x101c
 80032a0:	4413      	add	r3, r2
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6811      	ldr	r1, [r2, #0]
 80032a8:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <ETH_MACDMAConfig+0x390>)
 80032aa:	431a      	orrs	r2, r3
 80032ac:	f241 031c 	movw	r3, #4124	; 0x101c
 80032b0:	440b      	add	r3, r1
 80032b2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	461a      	mov	r2, r3
 80032ba:	2100      	movs	r1, #0
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f80b 	bl	80032d8 <ETH_MACAddressConfig>
}
 80032c2:	bf00      	nop
 80032c4:	37c0      	adds	r7, #192	; 0xc0
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	ff20810f 	.word	0xff20810f
 80032d0:	f8de3f23 	.word	0xf8de3f23
 80032d4:	00010040 	.word	0x00010040

080032d8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3305      	adds	r3, #5
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	021b      	lsls	r3, r3, #8
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	3204      	adds	r2, #4
 80032f0:	7812      	ldrb	r2, [r2, #0]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <ETH_MACAddressConfig+0x68>)
 80032fa:	4413      	add	r3, r2
 80032fc:	461a      	mov	r2, r3
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3303      	adds	r3, #3
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	061a      	lsls	r2, r3, #24
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3302      	adds	r3, #2
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	041b      	lsls	r3, r3, #16
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3301      	adds	r3, #1
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	021b      	lsls	r3, r3, #8
 800331c:	4313      	orrs	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	7812      	ldrb	r2, [r2, #0]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	4b06      	ldr	r3, [pc, #24]	; (8003344 <ETH_MACAddressConfig+0x6c>)
 800332a:	4413      	add	r3, r2
 800332c:	461a      	mov	r2, r3
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	6013      	str	r3, [r2, #0]
}
 8003332:	bf00      	nop
 8003334:	371c      	adds	r7, #28
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40028040 	.word	0x40028040
 8003344:	40028044 	.word	0x40028044

08003348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003348:	b480      	push	{r7}
 800334a:	b089      	sub	sp, #36	; 0x24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800335e:	2300      	movs	r3, #0
 8003360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	e175      	b.n	8003654 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003368:	2201      	movs	r2, #1
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4013      	ands	r3, r2
 800337a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	429a      	cmp	r2, r3
 8003382:	f040 8164 	bne.w	800364e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_Init+0x4e>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b12      	cmp	r3, #18
 8003394:	d123      	bne.n	80033de <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	08da      	lsrs	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3208      	adds	r2, #8
 800339e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	220f      	movs	r2, #15
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4013      	ands	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	08da      	lsrs	r2, r3, #3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3208      	adds	r2, #8
 80033d8:	69b9      	ldr	r1, [r7, #24]
 80033da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	2203      	movs	r2, #3
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 0203 	and.w	r2, r3, #3
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d00b      	beq.n	8003432 <HAL_GPIO_Init+0xea>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d007      	beq.n	8003432 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003426:	2b11      	cmp	r3, #17
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b12      	cmp	r3, #18
 8003430:	d130      	bne.n	8003494 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	2203      	movs	r2, #3
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003468:	2201      	movs	r2, #1
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f003 0201 	and.w	r2, r3, #1
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	2203      	movs	r2, #3
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80be 	beq.w	800364e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d2:	4b65      	ldr	r3, [pc, #404]	; (8003668 <HAL_GPIO_Init+0x320>)
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	4a64      	ldr	r2, [pc, #400]	; (8003668 <HAL_GPIO_Init+0x320>)
 80034d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034dc:	6453      	str	r3, [r2, #68]	; 0x44
 80034de:	4b62      	ldr	r3, [pc, #392]	; (8003668 <HAL_GPIO_Init+0x320>)
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80034ea:	4a60      	ldr	r2, [pc, #384]	; (800366c <HAL_GPIO_Init+0x324>)
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	089b      	lsrs	r3, r3, #2
 80034f0:	3302      	adds	r3, #2
 80034f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	220f      	movs	r2, #15
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4013      	ands	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a57      	ldr	r2, [pc, #348]	; (8003670 <HAL_GPIO_Init+0x328>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d037      	beq.n	8003586 <HAL_GPIO_Init+0x23e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a56      	ldr	r2, [pc, #344]	; (8003674 <HAL_GPIO_Init+0x32c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d031      	beq.n	8003582 <HAL_GPIO_Init+0x23a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a55      	ldr	r2, [pc, #340]	; (8003678 <HAL_GPIO_Init+0x330>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d02b      	beq.n	800357e <HAL_GPIO_Init+0x236>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a54      	ldr	r2, [pc, #336]	; (800367c <HAL_GPIO_Init+0x334>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d025      	beq.n	800357a <HAL_GPIO_Init+0x232>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a53      	ldr	r2, [pc, #332]	; (8003680 <HAL_GPIO_Init+0x338>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d01f      	beq.n	8003576 <HAL_GPIO_Init+0x22e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a52      	ldr	r2, [pc, #328]	; (8003684 <HAL_GPIO_Init+0x33c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d019      	beq.n	8003572 <HAL_GPIO_Init+0x22a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a51      	ldr	r2, [pc, #324]	; (8003688 <HAL_GPIO_Init+0x340>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <HAL_GPIO_Init+0x226>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a50      	ldr	r2, [pc, #320]	; (800368c <HAL_GPIO_Init+0x344>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00d      	beq.n	800356a <HAL_GPIO_Init+0x222>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a4f      	ldr	r2, [pc, #316]	; (8003690 <HAL_GPIO_Init+0x348>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d007      	beq.n	8003566 <HAL_GPIO_Init+0x21e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4e      	ldr	r2, [pc, #312]	; (8003694 <HAL_GPIO_Init+0x34c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d101      	bne.n	8003562 <HAL_GPIO_Init+0x21a>
 800355e:	2309      	movs	r3, #9
 8003560:	e012      	b.n	8003588 <HAL_GPIO_Init+0x240>
 8003562:	230a      	movs	r3, #10
 8003564:	e010      	b.n	8003588 <HAL_GPIO_Init+0x240>
 8003566:	2308      	movs	r3, #8
 8003568:	e00e      	b.n	8003588 <HAL_GPIO_Init+0x240>
 800356a:	2307      	movs	r3, #7
 800356c:	e00c      	b.n	8003588 <HAL_GPIO_Init+0x240>
 800356e:	2306      	movs	r3, #6
 8003570:	e00a      	b.n	8003588 <HAL_GPIO_Init+0x240>
 8003572:	2305      	movs	r3, #5
 8003574:	e008      	b.n	8003588 <HAL_GPIO_Init+0x240>
 8003576:	2304      	movs	r3, #4
 8003578:	e006      	b.n	8003588 <HAL_GPIO_Init+0x240>
 800357a:	2303      	movs	r3, #3
 800357c:	e004      	b.n	8003588 <HAL_GPIO_Init+0x240>
 800357e:	2302      	movs	r3, #2
 8003580:	e002      	b.n	8003588 <HAL_GPIO_Init+0x240>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_GPIO_Init+0x240>
 8003586:	2300      	movs	r3, #0
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	f002 0203 	and.w	r2, r2, #3
 800358e:	0092      	lsls	r2, r2, #2
 8003590:	4093      	lsls	r3, r2
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003598:	4934      	ldr	r1, [pc, #208]	; (800366c <HAL_GPIO_Init+0x324>)
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	089b      	lsrs	r3, r3, #2
 800359e:	3302      	adds	r3, #2
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035a6:	4b3c      	ldr	r3, [pc, #240]	; (8003698 <HAL_GPIO_Init+0x350>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4013      	ands	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035ca:	4a33      	ldr	r2, [pc, #204]	; (8003698 <HAL_GPIO_Init+0x350>)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035d0:	4b31      	ldr	r3, [pc, #196]	; (8003698 <HAL_GPIO_Init+0x350>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035f4:	4a28      	ldr	r2, [pc, #160]	; (8003698 <HAL_GPIO_Init+0x350>)
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035fa:	4b27      	ldr	r3, [pc, #156]	; (8003698 <HAL_GPIO_Init+0x350>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	43db      	mvns	r3, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4013      	ands	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800361e:	4a1e      	ldr	r2, [pc, #120]	; (8003698 <HAL_GPIO_Init+0x350>)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003624:	4b1c      	ldr	r3, [pc, #112]	; (8003698 <HAL_GPIO_Init+0x350>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003648:	4a13      	ldr	r2, [pc, #76]	; (8003698 <HAL_GPIO_Init+0x350>)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	3301      	adds	r3, #1
 8003652:	61fb      	str	r3, [r7, #28]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	2b0f      	cmp	r3, #15
 8003658:	f67f ae86 	bls.w	8003368 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800365c:	bf00      	nop
 800365e:	3724      	adds	r7, #36	; 0x24
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	40023800 	.word	0x40023800
 800366c:	40013800 	.word	0x40013800
 8003670:	40020000 	.word	0x40020000
 8003674:	40020400 	.word	0x40020400
 8003678:	40020800 	.word	0x40020800
 800367c:	40020c00 	.word	0x40020c00
 8003680:	40021000 	.word	0x40021000
 8003684:	40021400 	.word	0x40021400
 8003688:	40021800 	.word	0x40021800
 800368c:	40021c00 	.word	0x40021c00
 8003690:	40022000 	.word	0x40022000
 8003694:	40022400 	.word	0x40022400
 8003698:	40013c00 	.word	0x40013c00

0800369c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	887b      	ldrh	r3, [r7, #2]
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
 80036b8:	e001      	b.n	80036be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036be:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	807b      	strh	r3, [r7, #2]
 80036d8:	4613      	mov	r3, r2
 80036da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036dc:	787b      	ldrb	r3, [r7, #1]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036e2:	887a      	ldrh	r2, [r7, #2]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80036e8:	e003      	b.n	80036f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80036ea:	887b      	ldrh	r3, [r7, #2]
 80036ec:	041a      	lsls	r2, r3, #16
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	619a      	str	r2, [r3, #24]
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800370a:	4b08      	ldr	r3, [pc, #32]	; (800372c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	4013      	ands	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d006      	beq.n	8003724 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003716:	4a05      	ldr	r2, [pc, #20]	; (800372c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe fc12 	bl	8001f48 <HAL_GPIO_EXTI_Callback>
  }
}
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40013c00 	.word	0x40013c00

08003730 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003732:	b08f      	sub	sp, #60	; 0x3c
 8003734:	af0a      	add	r7, sp, #40	; 0x28
 8003736:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e10a      	b.n	8003958 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fe ff74 	bl	8002644 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2203      	movs	r2, #3
 8003760:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f002 fa69 	bl	8005c40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	687e      	ldr	r6, [r7, #4]
 8003776:	466d      	mov	r5, sp
 8003778:	f106 0410 	add.w	r4, r6, #16
 800377c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800377e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003784:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003788:	e885 0003 	stmia.w	r5, {r0, r1}
 800378c:	1d33      	adds	r3, r6, #4
 800378e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003790:	6838      	ldr	r0, [r7, #0]
 8003792:	f002 f9fd 	bl	8005b90 <USB_CoreInit>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0d7      	b.n	8003958 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f002 fa57 	bl	8005c62 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b4:	2300      	movs	r3, #0
 80037b6:	73fb      	strb	r3, [r7, #15]
 80037b8:	e04a      	b.n	8003850 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037ba:	7bfa      	ldrb	r2, [r7, #15]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	333d      	adds	r3, #61	; 0x3d
 80037ca:	2201      	movs	r2, #1
 80037cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037ce:	7bfa      	ldrb	r2, [r7, #15]
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	333c      	adds	r3, #60	; 0x3c
 80037de:	7bfa      	ldrb	r2, [r7, #15]
 80037e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037e2:	7bfa      	ldrb	r2, [r7, #15]
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	b298      	uxth	r0, r3
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	1a9b      	subs	r3, r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	440b      	add	r3, r1
 80037f4:	3342      	adds	r3, #66	; 0x42
 80037f6:	4602      	mov	r2, r0
 80037f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037fa:	7bfa      	ldrb	r2, [r7, #15]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	333f      	adds	r3, #63	; 0x3f
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800380e:	7bfa      	ldrb	r2, [r7, #15]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	3344      	adds	r3, #68	; 0x44
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003822:	7bfa      	ldrb	r2, [r7, #15]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	3348      	adds	r3, #72	; 0x48
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003836:	7bfa      	ldrb	r2, [r7, #15]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	3350      	adds	r3, #80	; 0x50
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	3301      	adds	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
 8003850:	7bfa      	ldrb	r2, [r7, #15]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	429a      	cmp	r2, r3
 8003858:	d3af      	bcc.n	80037ba <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800385a:	2300      	movs	r3, #0
 800385c:	73fb      	strb	r3, [r7, #15]
 800385e:	e044      	b.n	80038ea <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003860:	7bfa      	ldrb	r2, [r7, #15]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003876:	7bfa      	ldrb	r2, [r7, #15]
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003888:	7bfa      	ldrb	r2, [r7, #15]
 800388a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800388c:	7bfa      	ldrb	r2, [r7, #15]
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	1a9b      	subs	r3, r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038a2:	7bfa      	ldrb	r2, [r7, #15]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038b8:	7bfa      	ldrb	r2, [r7, #15]
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038ce:	7bfa      	ldrb	r2, [r7, #15]
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	1a9b      	subs	r3, r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	3301      	adds	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
 80038ea:	7bfa      	ldrb	r2, [r7, #15]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d3b5      	bcc.n	8003860 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	687e      	ldr	r6, [r7, #4]
 80038fc:	466d      	mov	r5, sp
 80038fe:	f106 0410 	add.w	r4, r6, #16
 8003902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800390a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800390e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003912:	1d33      	adds	r3, r6, #4
 8003914:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003916:	6838      	ldr	r0, [r7, #0]
 8003918:	f002 f9ce 	bl	8005cb8 <USB_DevInit>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2202      	movs	r2, #2
 8003926:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e014      	b.n	8003958 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	2b01      	cmp	r3, #1
 8003944:	d102      	bne.n	800394c <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f80a 	bl	8003960 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f002 fb8e 	bl	8006072 <USB_DevDisconnect>

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003960 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800398e:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8003990:	4313      	orrs	r3, r2
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	10000003 	.word	0x10000003

080039a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b6:	6013      	str	r3, [r2, #0]
}
 80039b8:	bf00      	nop
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40007000 	.word	0x40007000

080039c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80039d2:	4b23      	ldr	r3, [pc, #140]	; (8003a60 <HAL_PWREx_EnableOverDrive+0x98>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	4a22      	ldr	r2, [pc, #136]	; (8003a60 <HAL_PWREx_EnableOverDrive+0x98>)
 80039d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039dc:	6413      	str	r3, [r2, #64]	; 0x40
 80039de:	4b20      	ldr	r3, [pc, #128]	; (8003a60 <HAL_PWREx_EnableOverDrive+0x98>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039ea:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1d      	ldr	r2, [pc, #116]	; (8003a64 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039f6:	f7fe fefb 	bl	80027f0 <HAL_GetTick>
 80039fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039fc:	e009      	b.n	8003a12 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039fe:	f7fe fef7 	bl	80027f0 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a0c:	d901      	bls.n	8003a12 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e022      	b.n	8003a58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a12:	4b14      	ldr	r3, [pc, #80]	; (8003a64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1e:	d1ee      	bne.n	80039fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a20:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a0f      	ldr	r2, [pc, #60]	; (8003a64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a2c:	f7fe fee0 	bl	80027f0 <HAL_GetTick>
 8003a30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a32:	e009      	b.n	8003a48 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a34:	f7fe fedc 	bl	80027f0 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a42:	d901      	bls.n	8003a48 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e007      	b.n	8003a58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a54:	d1ee      	bne.n	8003a34 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40007000 	.word	0x40007000

08003a68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8003a70:	2300      	movs	r3, #0
 8003a72:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e25c      	b.n	8003f38 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 8087 	beq.w	8003b9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a8c:	4b96      	ldr	r3, [pc, #600]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 030c 	and.w	r3, r3, #12
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d00c      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a98:	4b93      	ldr	r3, [pc, #588]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 030c 	and.w	r3, r3, #12
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d112      	bne.n	8003aca <HAL_RCC_OscConfig+0x62>
 8003aa4:	4b90      	ldr	r3, [pc, #576]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab0:	d10b      	bne.n	8003aca <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab2:	4b8d      	ldr	r3, [pc, #564]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d06c      	beq.n	8003b98 <HAL_RCC_OscConfig+0x130>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d168      	bne.n	8003b98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e236      	b.n	8003f38 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad2:	d106      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x7a>
 8003ad4:	4b84      	ldr	r3, [pc, #528]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a83      	ldr	r2, [pc, #524]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	e02e      	b.n	8003b40 <HAL_RCC_OscConfig+0xd8>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10c      	bne.n	8003b04 <HAL_RCC_OscConfig+0x9c>
 8003aea:	4b7f      	ldr	r3, [pc, #508]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a7e      	ldr	r2, [pc, #504]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	4b7c      	ldr	r3, [pc, #496]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a7b      	ldr	r2, [pc, #492]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	e01d      	b.n	8003b40 <HAL_RCC_OscConfig+0xd8>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCC_OscConfig+0xc0>
 8003b0e:	4b76      	ldr	r3, [pc, #472]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a75      	ldr	r2, [pc, #468]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	4b73      	ldr	r3, [pc, #460]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a72      	ldr	r2, [pc, #456]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	e00b      	b.n	8003b40 <HAL_RCC_OscConfig+0xd8>
 8003b28:	4b6f      	ldr	r3, [pc, #444]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a6e      	ldr	r2, [pc, #440]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	4b6c      	ldr	r3, [pc, #432]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a6b      	ldr	r2, [pc, #428]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d013      	beq.n	8003b70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b48:	f7fe fe52 	bl	80027f0 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b50:	f7fe fe4e 	bl	80027f0 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b64      	cmp	r3, #100	; 0x64
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e1ea      	b.n	8003f38 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b62:	4b61      	ldr	r3, [pc, #388]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0f0      	beq.n	8003b50 <HAL_RCC_OscConfig+0xe8>
 8003b6e:	e014      	b.n	8003b9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fe fe3e 	bl	80027f0 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b78:	f7fe fe3a 	bl	80027f0 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b64      	cmp	r3, #100	; 0x64
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e1d6      	b.n	8003f38 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8a:	4b57      	ldr	r3, [pc, #348]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x110>
 8003b96:	e000      	b.n	8003b9a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d069      	beq.n	8003c7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ba6:	4b50      	ldr	r3, [pc, #320]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00b      	beq.n	8003bca <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bb2:	4b4d      	ldr	r3, [pc, #308]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b08      	cmp	r3, #8
 8003bbc:	d11c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x190>
 8003bbe:	4b4a      	ldr	r3, [pc, #296]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d116      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bca:	4b47      	ldr	r3, [pc, #284]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <HAL_RCC_OscConfig+0x17a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d001      	beq.n	8003be2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e1aa      	b.n	8003f38 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be2:	4b41      	ldr	r3, [pc, #260]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	493d      	ldr	r1, [pc, #244]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf6:	e040      	b.n	8003c7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d023      	beq.n	8003c48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c00:	4b39      	ldr	r3, [pc, #228]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a38      	ldr	r2, [pc, #224]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fe fdf0 	bl	80027f0 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c14:	f7fe fdec 	bl	80027f0 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e188      	b.n	8003f38 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c26:	4b30      	ldr	r3, [pc, #192]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c32:	4b2d      	ldr	r3, [pc, #180]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4929      	ldr	r1, [pc, #164]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]
 8003c46:	e018      	b.n	8003c7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c48:	4b27      	ldr	r3, [pc, #156]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a26      	ldr	r2, [pc, #152]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fe fdcc 	bl	80027f0 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c5c:	f7fe fdc8 	bl	80027f0 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e164      	b.n	8003f38 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d038      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d019      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c8e:	4b16      	ldr	r3, [pc, #88]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c92:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9a:	f7fe fda9 	bl	80027f0 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ca2:	f7fe fda5 	bl	80027f0 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e141      	b.n	8003f38 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x23a>
 8003cc0:	e01a      	b.n	8003cf8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc2:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc6:	4a08      	ldr	r2, [pc, #32]	; (8003ce8 <HAL_RCC_OscConfig+0x280>)
 8003cc8:	f023 0301 	bic.w	r3, r3, #1
 8003ccc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cce:	f7fe fd8f 	bl	80027f0 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd4:	e00a      	b.n	8003cec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cd6:	f7fe fd8b 	bl	80027f0 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d903      	bls.n	8003cec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e127      	b.n	8003f38 <HAL_RCC_OscConfig+0x4d0>
 8003ce8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cec:	4b94      	ldr	r3, [pc, #592]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1ee      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80a4 	beq.w	8003e4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d06:	4b8e      	ldr	r3, [pc, #568]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10d      	bne.n	8003d2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d12:	4b8b      	ldr	r3, [pc, #556]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	4a8a      	ldr	r2, [pc, #552]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1e:	4b88      	ldr	r3, [pc, #544]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d2e:	4b85      	ldr	r3, [pc, #532]	; (8003f44 <HAL_RCC_OscConfig+0x4dc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d118      	bne.n	8003d6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d3a:	4b82      	ldr	r3, [pc, #520]	; (8003f44 <HAL_RCC_OscConfig+0x4dc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a81      	ldr	r2, [pc, #516]	; (8003f44 <HAL_RCC_OscConfig+0x4dc>)
 8003d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d46:	f7fe fd53 	bl	80027f0 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d4e:	f7fe fd4f 	bl	80027f0 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b64      	cmp	r3, #100	; 0x64
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e0eb      	b.n	8003f38 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d60:	4b78      	ldr	r3, [pc, #480]	; (8003f44 <HAL_RCC_OscConfig+0x4dc>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d106      	bne.n	8003d82 <HAL_RCC_OscConfig+0x31a>
 8003d74:	4b72      	ldr	r3, [pc, #456]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	4a71      	ldr	r2, [pc, #452]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d80:	e02d      	b.n	8003dde <HAL_RCC_OscConfig+0x376>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x33c>
 8003d8a:	4b6d      	ldr	r3, [pc, #436]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	4a6c      	ldr	r2, [pc, #432]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	6713      	str	r3, [r2, #112]	; 0x70
 8003d96:	4b6a      	ldr	r3, [pc, #424]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	4a69      	ldr	r2, [pc, #420]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003d9c:	f023 0304 	bic.w	r3, r3, #4
 8003da0:	6713      	str	r3, [r2, #112]	; 0x70
 8003da2:	e01c      	b.n	8003dde <HAL_RCC_OscConfig+0x376>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b05      	cmp	r3, #5
 8003daa:	d10c      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x35e>
 8003dac:	4b64      	ldr	r3, [pc, #400]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db0:	4a63      	ldr	r2, [pc, #396]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003db2:	f043 0304 	orr.w	r3, r3, #4
 8003db6:	6713      	str	r3, [r2, #112]	; 0x70
 8003db8:	4b61      	ldr	r3, [pc, #388]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbc:	4a60      	ldr	r2, [pc, #384]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc4:	e00b      	b.n	8003dde <HAL_RCC_OscConfig+0x376>
 8003dc6:	4b5e      	ldr	r3, [pc, #376]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	4a5d      	ldr	r2, [pc, #372]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003dcc:	f023 0301 	bic.w	r3, r3, #1
 8003dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd2:	4b5b      	ldr	r3, [pc, #364]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	4a5a      	ldr	r2, [pc, #360]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003dd8:	f023 0304 	bic.w	r3, r3, #4
 8003ddc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d015      	beq.n	8003e12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de6:	f7fe fd03 	bl	80027f0 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fe fcff 	bl	80027f0 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e099      	b.n	8003f38 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e04:	4b4e      	ldr	r3, [pc, #312]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0ee      	beq.n	8003dee <HAL_RCC_OscConfig+0x386>
 8003e10:	e014      	b.n	8003e3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e12:	f7fe fced 	bl	80027f0 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e1a:	f7fe fce9 	bl	80027f0 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e083      	b.n	8003f38 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e30:	4b43      	ldr	r3, [pc, #268]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1ee      	bne.n	8003e1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d105      	bne.n	8003e4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e42:	4b3f      	ldr	r3, [pc, #252]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	4a3e      	ldr	r2, [pc, #248]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d06f      	beq.n	8003f36 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e56:	4b3a      	ldr	r3, [pc, #232]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d067      	beq.n	8003f32 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d149      	bne.n	8003efe <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6a:	4b35      	ldr	r3, [pc, #212]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a34      	ldr	r2, [pc, #208]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003e70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e76:	f7fe fcbb 	bl	80027f0 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e7e:	f7fe fcb7 	bl	80027f0 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e053      	b.n	8003f38 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e90:	4b2b      	ldr	r3, [pc, #172]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1f0      	bne.n	8003e7e <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69da      	ldr	r2, [r3, #28]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	019b      	lsls	r3, r3, #6
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	085b      	lsrs	r3, r3, #1
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	041b      	lsls	r3, r3, #16
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	061b      	lsls	r3, r3, #24
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	4a1f      	ldr	r2, [pc, #124]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003ec4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ec8:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eca:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1c      	ldr	r2, [pc, #112]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003ed0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed6:	f7fe fc8b 	bl	80027f0 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ede:	f7fe fc87 	bl	80027f0 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e023      	b.n	8003f38 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef0:	4b13      	ldr	r3, [pc, #76]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f0      	beq.n	8003ede <HAL_RCC_OscConfig+0x476>
 8003efc:	e01b      	b.n	8003f36 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efe:	4b10      	ldr	r3, [pc, #64]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a0f      	ldr	r2, [pc, #60]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003f04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0a:	f7fe fc71 	bl	80027f0 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f12:	f7fe fc6d 	bl	80027f0 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e009      	b.n	8003f38 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f24:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_RCC_OscConfig+0x4d8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f0      	bne.n	8003f12 <HAL_RCC_OscConfig+0x4aa>
 8003f30:	e001      	b.n	8003f36 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40023800 	.word	0x40023800
 8003f44:	40007000 	.word	0x40007000

08003f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0ce      	b.n	80040fe <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f60:	4b69      	ldr	r3, [pc, #420]	; (8004108 <HAL_RCC_ClockConfig+0x1c0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d910      	bls.n	8003f90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6e:	4b66      	ldr	r3, [pc, #408]	; (8004108 <HAL_RCC_ClockConfig+0x1c0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f023 020f 	bic.w	r2, r3, #15
 8003f76:	4964      	ldr	r1, [pc, #400]	; (8004108 <HAL_RCC_ClockConfig+0x1c0>)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7e:	4b62      	ldr	r3, [pc, #392]	; (8004108 <HAL_RCC_ClockConfig+0x1c0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0b6      	b.n	80040fe <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d020      	beq.n	8003fde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fa8:	4b58      	ldr	r3, [pc, #352]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	4a57      	ldr	r2, [pc, #348]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8003fae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fc0:	4b52      	ldr	r3, [pc, #328]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	4a51      	ldr	r2, [pc, #324]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8003fc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fcc:	4b4f      	ldr	r3, [pc, #316]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	494c      	ldr	r1, [pc, #304]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d040      	beq.n	800406c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d107      	bne.n	8004002 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff2:	4b46      	ldr	r3, [pc, #280]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d115      	bne.n	800402a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e07d      	b.n	80040fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d107      	bne.n	800401a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400a:	4b40      	ldr	r3, [pc, #256]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d109      	bne.n	800402a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e071      	b.n	80040fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401a:	4b3c      	ldr	r3, [pc, #240]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e069      	b.n	80040fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800402a:	4b38      	ldr	r3, [pc, #224]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f023 0203 	bic.w	r2, r3, #3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	4935      	ldr	r1, [pc, #212]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8004038:	4313      	orrs	r3, r2
 800403a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800403c:	f7fe fbd8 	bl	80027f0 <HAL_GetTick>
 8004040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004042:	e00a      	b.n	800405a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004044:	f7fe fbd4 	bl	80027f0 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004052:	4293      	cmp	r3, r2
 8004054:	d901      	bls.n	800405a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e051      	b.n	80040fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405a:	4b2c      	ldr	r3, [pc, #176]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 020c 	and.w	r2, r3, #12
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	429a      	cmp	r2, r3
 800406a:	d1eb      	bne.n	8004044 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800406c:	4b26      	ldr	r3, [pc, #152]	; (8004108 <HAL_RCC_ClockConfig+0x1c0>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 030f 	and.w	r3, r3, #15
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d210      	bcs.n	800409c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407a:	4b23      	ldr	r3, [pc, #140]	; (8004108 <HAL_RCC_ClockConfig+0x1c0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f023 020f 	bic.w	r2, r3, #15
 8004082:	4921      	ldr	r1, [pc, #132]	; (8004108 <HAL_RCC_ClockConfig+0x1c0>)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	4313      	orrs	r3, r2
 8004088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408a:	4b1f      	ldr	r3, [pc, #124]	; (8004108 <HAL_RCC_ClockConfig+0x1c0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e030      	b.n	80040fe <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a8:	4b18      	ldr	r3, [pc, #96]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4915      	ldr	r1, [pc, #84]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040c6:	4b11      	ldr	r3, [pc, #68]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	490d      	ldr	r1, [pc, #52]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040da:	f000 f81d 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 80040de:	4601      	mov	r1, r0
 80040e0:	4b0a      	ldr	r3, [pc, #40]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	4a09      	ldr	r2, [pc, #36]	; (8004110 <HAL_RCC_ClockConfig+0x1c8>)
 80040ec:	5cd3      	ldrb	r3, [r2, r3]
 80040ee:	fa21 f303 	lsr.w	r3, r1, r3
 80040f2:	4a08      	ldr	r2, [pc, #32]	; (8004114 <HAL_RCC_ClockConfig+0x1cc>)
 80040f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80040f6:	2000      	movs	r0, #0
 80040f8:	f7fe fb36 	bl	8002768 <HAL_InitTick>

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40023c00 	.word	0x40023c00
 800410c:	40023800 	.word	0x40023800
 8004110:	0800617c 	.word	0x0800617c
 8004114:	20000000 	.word	0x20000000

08004118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800411e:	2300      	movs	r3, #0
 8004120:	607b      	str	r3, [r7, #4]
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	2300      	movs	r3, #0
 8004128:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800412e:	4b63      	ldr	r3, [pc, #396]	; (80042bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 030c 	and.w	r3, r3, #12
 8004136:	2b04      	cmp	r3, #4
 8004138:	d007      	beq.n	800414a <HAL_RCC_GetSysClockFreq+0x32>
 800413a:	2b08      	cmp	r3, #8
 800413c:	d008      	beq.n	8004150 <HAL_RCC_GetSysClockFreq+0x38>
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 80b4 	bne.w	80042ac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004144:	4b5e      	ldr	r3, [pc, #376]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004146:	60bb      	str	r3, [r7, #8]
       break;
 8004148:	e0b3      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800414a:	4b5e      	ldr	r3, [pc, #376]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800414c:	60bb      	str	r3, [r7, #8]
      break;
 800414e:	e0b0      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004150:	4b5a      	ldr	r3, [pc, #360]	; (80042bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004158:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800415a:	4b58      	ldr	r3, [pc, #352]	; (80042bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d04a      	beq.n	80041fc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004166:	4b55      	ldr	r3, [pc, #340]	; (80042bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	099b      	lsrs	r3, r3, #6
 800416c:	f04f 0400 	mov.w	r4, #0
 8004170:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	ea03 0501 	and.w	r5, r3, r1
 800417c:	ea04 0602 	and.w	r6, r4, r2
 8004180:	4629      	mov	r1, r5
 8004182:	4632      	mov	r2, r6
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	f04f 0400 	mov.w	r4, #0
 800418c:	0154      	lsls	r4, r2, #5
 800418e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004192:	014b      	lsls	r3, r1, #5
 8004194:	4619      	mov	r1, r3
 8004196:	4622      	mov	r2, r4
 8004198:	1b49      	subs	r1, r1, r5
 800419a:	eb62 0206 	sbc.w	r2, r2, r6
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	f04f 0400 	mov.w	r4, #0
 80041a6:	0194      	lsls	r4, r2, #6
 80041a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041ac:	018b      	lsls	r3, r1, #6
 80041ae:	1a5b      	subs	r3, r3, r1
 80041b0:	eb64 0402 	sbc.w	r4, r4, r2
 80041b4:	f04f 0100 	mov.w	r1, #0
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	00e2      	lsls	r2, r4, #3
 80041be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041c2:	00d9      	lsls	r1, r3, #3
 80041c4:	460b      	mov	r3, r1
 80041c6:	4614      	mov	r4, r2
 80041c8:	195b      	adds	r3, r3, r5
 80041ca:	eb44 0406 	adc.w	r4, r4, r6
 80041ce:	f04f 0100 	mov.w	r1, #0
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	0262      	lsls	r2, r4, #9
 80041d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80041dc:	0259      	lsls	r1, r3, #9
 80041de:	460b      	mov	r3, r1
 80041e0:	4614      	mov	r4, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	4621      	mov	r1, r4
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f04f 0400 	mov.w	r4, #0
 80041ec:	461a      	mov	r2, r3
 80041ee:	4623      	mov	r3, r4
 80041f0:	f7fc f80a 	bl	8000208 <__aeabi_uldivmod>
 80041f4:	4603      	mov	r3, r0
 80041f6:	460c      	mov	r4, r1
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	e049      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041fc:	4b2f      	ldr	r3, [pc, #188]	; (80042bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	099b      	lsrs	r3, r3, #6
 8004202:	f04f 0400 	mov.w	r4, #0
 8004206:	f240 11ff 	movw	r1, #511	; 0x1ff
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	ea03 0501 	and.w	r5, r3, r1
 8004212:	ea04 0602 	and.w	r6, r4, r2
 8004216:	4629      	mov	r1, r5
 8004218:	4632      	mov	r2, r6
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	f04f 0400 	mov.w	r4, #0
 8004222:	0154      	lsls	r4, r2, #5
 8004224:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004228:	014b      	lsls	r3, r1, #5
 800422a:	4619      	mov	r1, r3
 800422c:	4622      	mov	r2, r4
 800422e:	1b49      	subs	r1, r1, r5
 8004230:	eb62 0206 	sbc.w	r2, r2, r6
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	f04f 0400 	mov.w	r4, #0
 800423c:	0194      	lsls	r4, r2, #6
 800423e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004242:	018b      	lsls	r3, r1, #6
 8004244:	1a5b      	subs	r3, r3, r1
 8004246:	eb64 0402 	sbc.w	r4, r4, r2
 800424a:	f04f 0100 	mov.w	r1, #0
 800424e:	f04f 0200 	mov.w	r2, #0
 8004252:	00e2      	lsls	r2, r4, #3
 8004254:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004258:	00d9      	lsls	r1, r3, #3
 800425a:	460b      	mov	r3, r1
 800425c:	4614      	mov	r4, r2
 800425e:	195b      	adds	r3, r3, r5
 8004260:	eb44 0406 	adc.w	r4, r4, r6
 8004264:	f04f 0100 	mov.w	r1, #0
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	02a2      	lsls	r2, r4, #10
 800426e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004272:	0299      	lsls	r1, r3, #10
 8004274:	460b      	mov	r3, r1
 8004276:	4614      	mov	r4, r2
 8004278:	4618      	mov	r0, r3
 800427a:	4621      	mov	r1, r4
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f04f 0400 	mov.w	r4, #0
 8004282:	461a      	mov	r2, r3
 8004284:	4623      	mov	r3, r4
 8004286:	f7fb ffbf 	bl	8000208 <__aeabi_uldivmod>
 800428a:	4603      	mov	r3, r0
 800428c:	460c      	mov	r4, r1
 800428e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8004290:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	0c1b      	lsrs	r3, r3, #16
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	3301      	adds	r3, #1
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a8:	60bb      	str	r3, [r7, #8]
      break;
 80042aa:	e002      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042ac:	4b04      	ldr	r3, [pc, #16]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80042ae:	60bb      	str	r3, [r7, #8]
      break;
 80042b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042b2:	68bb      	ldr	r3, [r7, #8]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042bc:	40023800 	.word	0x40023800
 80042c0:	00f42400 	.word	0x00f42400
 80042c4:	007a1200 	.word	0x007a1200

080042c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <HAL_RCC_GetHCLKFreq+0x14>)
 80042ce:	681b      	ldr	r3, [r3, #0]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000000 	.word	0x20000000

080042e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042e4:	f7ff fff0 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 80042e8:	4601      	mov	r1, r0
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	0a9b      	lsrs	r3, r3, #10
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4a03      	ldr	r2, [pc, #12]	; (8004304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042f6:	5cd3      	ldrb	r3, [r2, r3]
 80042f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40023800 	.word	0x40023800
 8004304:	0800618c 	.word	0x0800618c

08004308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800430c:	f7ff ffdc 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 8004310:	4601      	mov	r1, r0
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	0b5b      	lsrs	r3, r3, #13
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	4a03      	ldr	r2, [pc, #12]	; (800432c <HAL_RCC_GetPCLK2Freq+0x24>)
 800431e:	5cd3      	ldrb	r3, [r2, r3]
 8004320:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004324:	4618      	mov	r0, r3
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40023800 	.word	0x40023800
 800432c:	0800618c 	.word	0x0800618c

08004330 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d012      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004358:	4b69      	ldr	r3, [pc, #420]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	4a68      	ldr	r2, [pc, #416]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004362:	6093      	str	r3, [r2, #8]
 8004364:	4b66      	ldr	r3, [pc, #408]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	4964      	ldr	r1, [pc, #400]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436e:	4313      	orrs	r3, r2
 8004370:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800437a:	2301      	movs	r3, #1
 800437c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d017      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800438a:	4b5d      	ldr	r3, [pc, #372]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004390:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004398:	4959      	ldr	r1, [pc, #356]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a8:	d101      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80043aa:	2301      	movs	r3, #1
 80043ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80043b6:	2301      	movs	r3, #1
 80043b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d017      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043c6:	4b4e      	ldr	r3, [pc, #312]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	494a      	ldr	r1, [pc, #296]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043e4:	d101      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80043e6:	2301      	movs	r3, #1
 80043e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80043f2:	2301      	movs	r3, #1
 80043f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004402:	2301      	movs	r3, #1
 8004404:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 808b 	beq.w	800452a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004414:	4b3a      	ldr	r3, [pc, #232]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	4a39      	ldr	r2, [pc, #228]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441e:	6413      	str	r3, [r2, #64]	; 0x40
 8004420:	4b37      	ldr	r3, [pc, #220]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800442c:	4b35      	ldr	r3, [pc, #212]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a34      	ldr	r2, [pc, #208]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004438:	f7fe f9da 	bl	80027f0 <HAL_GetTick>
 800443c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004440:	f7fe f9d6 	bl	80027f0 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	; 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e355      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004452:	4b2c      	ldr	r3, [pc, #176]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800445e:	4b28      	ldr	r3, [pc, #160]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004466:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d035      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	429a      	cmp	r2, r3
 800447a:	d02e      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800447c:	4b20      	ldr	r3, [pc, #128]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004484:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004486:	4b1e      	ldr	r3, [pc, #120]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	4a1d      	ldr	r2, [pc, #116]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004490:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004492:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004496:	4a1a      	ldr	r2, [pc, #104]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800449e:	4a18      	ldr	r2, [pc, #96]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044a4:	4b16      	ldr	r3, [pc, #88]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d114      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b0:	f7fe f99e 	bl	80027f0 <HAL_GetTick>
 80044b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b6:	e00a      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b8:	f7fe f99a 	bl	80027f0 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e317      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ce:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0ee      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044e6:	d111      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044f4:	4b04      	ldr	r3, [pc, #16]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044f6:	400b      	ands	r3, r1
 80044f8:	4901      	ldr	r1, [pc, #4]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	608b      	str	r3, [r1, #8]
 80044fe:	e00b      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004500:	40023800 	.word	0x40023800
 8004504:	40007000 	.word	0x40007000
 8004508:	0ffffcff 	.word	0x0ffffcff
 800450c:	4bb0      	ldr	r3, [pc, #704]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4aaf      	ldr	r2, [pc, #700]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004512:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004516:	6093      	str	r3, [r2, #8]
 8004518:	4bad      	ldr	r3, [pc, #692]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800451a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004524:	49aa      	ldr	r1, [pc, #680]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004526:	4313      	orrs	r3, r2
 8004528:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b00      	cmp	r3, #0
 8004534:	d010      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004536:	4ba6      	ldr	r3, [pc, #664]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800453c:	4aa4      	ldr	r2, [pc, #656]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800453e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004542:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004546:	4ba2      	ldr	r3, [pc, #648]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004548:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	499f      	ldr	r1, [pc, #636]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004564:	4b9a      	ldr	r3, [pc, #616]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004572:	4997      	ldr	r1, [pc, #604]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004586:	4b92      	ldr	r3, [pc, #584]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004594:	498e      	ldr	r1, [pc, #568]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045a8:	4b89      	ldr	r3, [pc, #548]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b6:	4986      	ldr	r1, [pc, #536]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045ca:	4b81      	ldr	r3, [pc, #516]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	497d      	ldr	r1, [pc, #500]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ec:	4b78      	ldr	r3, [pc, #480]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f2:	f023 0203 	bic.w	r2, r3, #3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	4975      	ldr	r1, [pc, #468]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800460e:	4b70      	ldr	r3, [pc, #448]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004614:	f023 020c 	bic.w	r2, r3, #12
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461c:	496c      	ldr	r1, [pc, #432]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004630:	4b67      	ldr	r3, [pc, #412]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004636:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463e:	4964      	ldr	r1, [pc, #400]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004652:	4b5f      	ldr	r3, [pc, #380]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004658:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004660:	495b      	ldr	r1, [pc, #364]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004674:	4b56      	ldr	r3, [pc, #344]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004682:	4953      	ldr	r1, [pc, #332]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004696:	4b4e      	ldr	r3, [pc, #312]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a4:	494a      	ldr	r1, [pc, #296]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80046b8:	4b45      	ldr	r3, [pc, #276]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c6:	4942      	ldr	r1, [pc, #264]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80046da:	4b3d      	ldr	r3, [pc, #244]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e8:	4939      	ldr	r1, [pc, #228]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046fc:	4b34      	ldr	r3, [pc, #208]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004702:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800470a:	4931      	ldr	r1, [pc, #196]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d011      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800471e:	4b2c      	ldr	r3, [pc, #176]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004724:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800472c:	4928      	ldr	r1, [pc, #160]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800473c:	d101      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800473e:	2301      	movs	r3, #1
 8004740:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800474e:	2301      	movs	r3, #1
 8004750:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800475e:	4b1c      	ldr	r3, [pc, #112]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004764:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800476c:	4918      	ldr	r1, [pc, #96]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00b      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004780:	4b13      	ldr	r3, [pc, #76]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004790:	490f      	ldr	r1, [pc, #60]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d005      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047a6:	f040 80d8 	bne.w	800495a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047aa:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a08      	ldr	r2, [pc, #32]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b6:	f7fe f81b 	bl	80027f0 <HAL_GetTick>
 80047ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047bc:	e00a      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047be:	f7fe f817 	bl	80027f0 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b64      	cmp	r3, #100	; 0x64
 80047ca:	d903      	bls.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e196      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80047d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047d4:	4b6c      	ldr	r3, [pc, #432]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1ee      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d021      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d11d      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047f4:	4b64      	ldr	r3, [pc, #400]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80047f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047fa:	0c1b      	lsrs	r3, r3, #16
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004802:	4b61      	ldr	r3, [pc, #388]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004808:	0e1b      	lsrs	r3, r3, #24
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	019a      	lsls	r2, r3, #6
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	041b      	lsls	r3, r3, #16
 800481a:	431a      	orrs	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	061b      	lsls	r3, r3, #24
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	071b      	lsls	r3, r3, #28
 8004828:	4957      	ldr	r1, [pc, #348]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800482a:	4313      	orrs	r3, r2
 800482c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d004      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004844:	d00a      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800484e:	2b00      	cmp	r3, #0
 8004850:	d02e      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800485a:	d129      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800485c:	4b4a      	ldr	r3, [pc, #296]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800485e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004862:	0c1b      	lsrs	r3, r3, #16
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800486a:	4b47      	ldr	r3, [pc, #284]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800486c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004870:	0f1b      	lsrs	r3, r3, #28
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	019a      	lsls	r2, r3, #6
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	041b      	lsls	r3, r3, #16
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	061b      	lsls	r3, r3, #24
 800488a:	431a      	orrs	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	071b      	lsls	r3, r3, #28
 8004890:	493d      	ldr	r1, [pc, #244]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004898:	4b3b      	ldr	r3, [pc, #236]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800489a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800489e:	f023 021f 	bic.w	r2, r3, #31
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	3b01      	subs	r3, #1
 80048a8:	4937      	ldr	r1, [pc, #220]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01d      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048bc:	4b32      	ldr	r3, [pc, #200]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c2:	0e1b      	lsrs	r3, r3, #24
 80048c4:	f003 030f 	and.w	r3, r3, #15
 80048c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048ca:	4b2f      	ldr	r3, [pc, #188]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d0:	0f1b      	lsrs	r3, r3, #28
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	019a      	lsls	r2, r3, #6
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	041b      	lsls	r3, r3, #16
 80048e4:	431a      	orrs	r2, r3
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	061b      	lsls	r3, r3, #24
 80048ea:	431a      	orrs	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	071b      	lsls	r3, r3, #28
 80048f0:	4925      	ldr	r1, [pc, #148]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d011      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	019a      	lsls	r2, r3, #6
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	041b      	lsls	r3, r3, #16
 8004910:	431a      	orrs	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	061b      	lsls	r3, r3, #24
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	071b      	lsls	r3, r3, #28
 8004920:	4919      	ldr	r1, [pc, #100]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004928:	4b17      	ldr	r3, [pc, #92]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a16      	ldr	r2, [pc, #88]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800492e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004932:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004934:	f7fd ff5c 	bl	80027f0 <HAL_GetTick>
 8004938:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800493a:	e008      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800493c:	f7fd ff58 	bl	80027f0 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	; 0x64
 8004948:	d901      	bls.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e0d7      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800494e:	4b0e      	ldr	r3, [pc, #56]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b01      	cmp	r3, #1
 800495e:	f040 80cd 	bne.w	8004afc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004962:	4b09      	ldr	r3, [pc, #36]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a08      	ldr	r2, [pc, #32]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800496c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800496e:	f7fd ff3f 	bl	80027f0 <HAL_GetTick>
 8004972:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004974:	e00a      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004976:	f7fd ff3b 	bl	80027f0 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b64      	cmp	r3, #100	; 0x64
 8004982:	d903      	bls.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e0ba      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004988:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800498c:	4b5e      	ldr	r3, [pc, #376]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004998:	d0ed      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d009      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d02e      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d12a      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049c2:	4b51      	ldr	r3, [pc, #324]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c8:	0c1b      	lsrs	r3, r3, #16
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049d0:	4b4d      	ldr	r3, [pc, #308]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d6:	0f1b      	lsrs	r3, r3, #28
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	019a      	lsls	r2, r3, #6
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	041b      	lsls	r3, r3, #16
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	061b      	lsls	r3, r3, #24
 80049f0:	431a      	orrs	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	071b      	lsls	r3, r3, #28
 80049f6:	4944      	ldr	r1, [pc, #272]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80049fe:	4b42      	ldr	r3, [pc, #264]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a04:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	493d      	ldr	r1, [pc, #244]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d022      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a2c:	d11d      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a2e:	4b36      	ldr	r3, [pc, #216]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a34:	0e1b      	lsrs	r3, r3, #24
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a3c:	4b32      	ldr	r3, [pc, #200]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a42:	0f1b      	lsrs	r3, r3, #28
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	019a      	lsls	r2, r3, #6
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	041b      	lsls	r3, r3, #16
 8004a56:	431a      	orrs	r2, r3
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	061b      	lsls	r3, r3, #24
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	071b      	lsls	r3, r3, #28
 8004a62:	4929      	ldr	r1, [pc, #164]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d028      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a76:	4b24      	ldr	r3, [pc, #144]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7c:	0e1b      	lsrs	r3, r3, #24
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a84:	4b20      	ldr	r3, [pc, #128]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	0c1b      	lsrs	r3, r3, #16
 8004a8c:	f003 0303 	and.w	r3, r3, #3
 8004a90:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	019a      	lsls	r2, r3, #6
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	041b      	lsls	r3, r3, #16
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	061b      	lsls	r3, r3, #24
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	071b      	lsls	r3, r3, #28
 8004aaa:	4917      	ldr	r1, [pc, #92]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ab2:	4b15      	ldr	r3, [pc, #84]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	4911      	ldr	r1, [pc, #68]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ac8:	4b0f      	ldr	r3, [pc, #60]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a0e      	ldr	r2, [pc, #56]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad4:	f7fd fe8c 	bl	80027f0 <HAL_GetTick>
 8004ad8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004adc:	f7fd fe88 	bl	80027f0 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b64      	cmp	r3, #100	; 0x64
 8004ae8:	d901      	bls.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e007      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004af6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004afa:	d1ef      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3720      	adds	r7, #32
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40023800 	.word	0x40023800

08004b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e01d      	b.n	8004b5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d106      	bne.n	8004b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fd fc1c 	bl	8002370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f000 fa60 	bl	8005010 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <HAL_TIM_Base_Start_IT+0x50>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b06      	cmp	r3, #6
 8004b8c:	d00b      	beq.n	8004ba6 <HAL_TIM_Base_Start_IT+0x42>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b94:	d007      	beq.n	8004ba6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0201 	orr.w	r2, r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	00010007 	.word	0x00010007

08004bb8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0201 	bic.w	r2, r2, #1
 8004bce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6a1a      	ldr	r2, [r3, #32]
 8004bd6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10f      	bne.n	8004c00 <HAL_TIM_Base_Stop_IT+0x48>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6a1a      	ldr	r2, [r3, #32]
 8004be6:	f240 4344 	movw	r3, #1092	; 0x444
 8004bea:	4013      	ands	r3, r2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d107      	bne.n	8004c00 <HAL_TIM_Base_Stop_IT+0x48>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0201 	bic.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d122      	bne.n	8004c6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d11b      	bne.n	8004c6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f06f 0202 	mvn.w	r2, #2
 8004c3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	f003 0303 	and.w	r3, r3, #3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f9bf 	bl	8004fd4 <HAL_TIM_IC_CaptureCallback>
 8004c56:	e005      	b.n	8004c64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f9b1 	bl	8004fc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f9c2 	bl	8004fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d122      	bne.n	8004cbe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d11b      	bne.n	8004cbe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f06f 0204 	mvn.w	r2, #4
 8004c8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f995 	bl	8004fd4 <HAL_TIM_IC_CaptureCallback>
 8004caa:	e005      	b.n	8004cb8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f987 	bl	8004fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f998 	bl	8004fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d122      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d11b      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f06f 0208 	mvn.w	r2, #8
 8004ce2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2204      	movs	r2, #4
 8004ce8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f96b 	bl	8004fd4 <HAL_TIM_IC_CaptureCallback>
 8004cfe:	e005      	b.n	8004d0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f95d 	bl	8004fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f96e 	bl	8004fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d122      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f003 0310 	and.w	r3, r3, #16
 8004d2a:	2b10      	cmp	r3, #16
 8004d2c:	d11b      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f06f 0210 	mvn.w	r2, #16
 8004d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2208      	movs	r2, #8
 8004d3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f941 	bl	8004fd4 <HAL_TIM_IC_CaptureCallback>
 8004d52:	e005      	b.n	8004d60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f933 	bl	8004fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f944 	bl	8004fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d10e      	bne.n	8004d92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d107      	bne.n	8004d92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f06f 0201 	mvn.w	r2, #1
 8004d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7fb fcfb 	bl	8000788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9c:	2b80      	cmp	r3, #128	; 0x80
 8004d9e:	d10e      	bne.n	8004dbe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004daa:	2b80      	cmp	r3, #128	; 0x80
 8004dac:	d107      	bne.n	8004dbe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fac9 	bl	8005350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dcc:	d10e      	bne.n	8004dec <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd8:	2b80      	cmp	r3, #128	; 0x80
 8004dda:	d107      	bne.n	8004dec <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fabc 	bl	8005364 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df6:	2b40      	cmp	r3, #64	; 0x40
 8004df8:	d10e      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e04:	2b40      	cmp	r3, #64	; 0x40
 8004e06:	d107      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f8f2 	bl	8004ffc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d10e      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d107      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f06f 0220 	mvn.w	r2, #32
 8004e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 fa7c 	bl	800533c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e44:	bf00      	nop
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_TIM_ConfigClockSource+0x18>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e0a6      	b.n	8004fb2 <HAL_TIM_ConfigClockSource+0x166>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4b4f      	ldr	r3, [pc, #316]	; (8004fbc <HAL_TIM_ConfigClockSource+0x170>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b40      	cmp	r3, #64	; 0x40
 8004e9a:	d067      	beq.n	8004f6c <HAL_TIM_ConfigClockSource+0x120>
 8004e9c:	2b40      	cmp	r3, #64	; 0x40
 8004e9e:	d80b      	bhi.n	8004eb8 <HAL_TIM_ConfigClockSource+0x6c>
 8004ea0:	2b10      	cmp	r3, #16
 8004ea2:	d073      	beq.n	8004f8c <HAL_TIM_ConfigClockSource+0x140>
 8004ea4:	2b10      	cmp	r3, #16
 8004ea6:	d802      	bhi.n	8004eae <HAL_TIM_ConfigClockSource+0x62>
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d06f      	beq.n	8004f8c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004eac:	e078      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d06c      	beq.n	8004f8c <HAL_TIM_ConfigClockSource+0x140>
 8004eb2:	2b30      	cmp	r3, #48	; 0x30
 8004eb4:	d06a      	beq.n	8004f8c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004eb6:	e073      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004eb8:	2b70      	cmp	r3, #112	; 0x70
 8004eba:	d00d      	beq.n	8004ed8 <HAL_TIM_ConfigClockSource+0x8c>
 8004ebc:	2b70      	cmp	r3, #112	; 0x70
 8004ebe:	d804      	bhi.n	8004eca <HAL_TIM_ConfigClockSource+0x7e>
 8004ec0:	2b50      	cmp	r3, #80	; 0x50
 8004ec2:	d033      	beq.n	8004f2c <HAL_TIM_ConfigClockSource+0xe0>
 8004ec4:	2b60      	cmp	r3, #96	; 0x60
 8004ec6:	d041      	beq.n	8004f4c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004ec8:	e06a      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ece:	d066      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0x152>
 8004ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed4:	d017      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004ed6:	e063      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6818      	ldr	r0, [r3, #0]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	6899      	ldr	r1, [r3, #8]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f000 f9ac 	bl	8005244 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004efa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	609a      	str	r2, [r3, #8]
      break;
 8004f04:	e04c      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6818      	ldr	r0, [r3, #0]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	6899      	ldr	r1, [r3, #8]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f000 f995 	bl	8005244 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f28:	609a      	str	r2, [r3, #8]
      break;
 8004f2a:	e039      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6818      	ldr	r0, [r3, #0]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	6859      	ldr	r1, [r3, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	f000 f909 	bl	8005150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2150      	movs	r1, #80	; 0x50
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 f962 	bl	800520e <TIM_ITRx_SetConfig>
      break;
 8004f4a:	e029      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	6859      	ldr	r1, [r3, #4]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	f000 f928 	bl	80051ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2160      	movs	r1, #96	; 0x60
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 f952 	bl	800520e <TIM_ITRx_SetConfig>
      break;
 8004f6a:	e019      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6818      	ldr	r0, [r3, #0]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	6859      	ldr	r1, [r3, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	f000 f8e9 	bl	8005150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2140      	movs	r1, #64	; 0x40
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 f942 	bl	800520e <TIM_ITRx_SetConfig>
      break;
 8004f8a:	e009      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f000 f939 	bl	800520e <TIM_ITRx_SetConfig>
      break;
 8004f9c:	e000      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004f9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	fffeff88 	.word	0xfffeff88

08004fc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a40      	ldr	r2, [pc, #256]	; (8005124 <TIM_Base_SetConfig+0x114>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d013      	beq.n	8005050 <TIM_Base_SetConfig+0x40>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502e:	d00f      	beq.n	8005050 <TIM_Base_SetConfig+0x40>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a3d      	ldr	r2, [pc, #244]	; (8005128 <TIM_Base_SetConfig+0x118>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00b      	beq.n	8005050 <TIM_Base_SetConfig+0x40>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a3c      	ldr	r2, [pc, #240]	; (800512c <TIM_Base_SetConfig+0x11c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d007      	beq.n	8005050 <TIM_Base_SetConfig+0x40>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a3b      	ldr	r2, [pc, #236]	; (8005130 <TIM_Base_SetConfig+0x120>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d003      	beq.n	8005050 <TIM_Base_SetConfig+0x40>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a3a      	ldr	r2, [pc, #232]	; (8005134 <TIM_Base_SetConfig+0x124>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d108      	bne.n	8005062 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a2f      	ldr	r2, [pc, #188]	; (8005124 <TIM_Base_SetConfig+0x114>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d02b      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005070:	d027      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a2c      	ldr	r2, [pc, #176]	; (8005128 <TIM_Base_SetConfig+0x118>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d023      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a2b      	ldr	r2, [pc, #172]	; (800512c <TIM_Base_SetConfig+0x11c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d01f      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a2a      	ldr	r2, [pc, #168]	; (8005130 <TIM_Base_SetConfig+0x120>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d01b      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a29      	ldr	r2, [pc, #164]	; (8005134 <TIM_Base_SetConfig+0x124>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d017      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a28      	ldr	r2, [pc, #160]	; (8005138 <TIM_Base_SetConfig+0x128>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d013      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a27      	ldr	r2, [pc, #156]	; (800513c <TIM_Base_SetConfig+0x12c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00f      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a26      	ldr	r2, [pc, #152]	; (8005140 <TIM_Base_SetConfig+0x130>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00b      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a25      	ldr	r2, [pc, #148]	; (8005144 <TIM_Base_SetConfig+0x134>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d007      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a24      	ldr	r2, [pc, #144]	; (8005148 <TIM_Base_SetConfig+0x138>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d003      	beq.n	80050c2 <TIM_Base_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a23      	ldr	r2, [pc, #140]	; (800514c <TIM_Base_SetConfig+0x13c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d108      	bne.n	80050d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a0a      	ldr	r2, [pc, #40]	; (8005124 <TIM_Base_SetConfig+0x114>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d003      	beq.n	8005108 <TIM_Base_SetConfig+0xf8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a0c      	ldr	r2, [pc, #48]	; (8005134 <TIM_Base_SetConfig+0x124>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d103      	bne.n	8005110 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	615a      	str	r2, [r3, #20]
}
 8005116:	bf00      	nop
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40010000 	.word	0x40010000
 8005128:	40000400 	.word	0x40000400
 800512c:	40000800 	.word	0x40000800
 8005130:	40000c00 	.word	0x40000c00
 8005134:	40010400 	.word	0x40010400
 8005138:	40014000 	.word	0x40014000
 800513c:	40014400 	.word	0x40014400
 8005140:	40014800 	.word	0x40014800
 8005144:	40001800 	.word	0x40001800
 8005148:	40001c00 	.word	0x40001c00
 800514c:	40002000 	.word	0x40002000

08005150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	f023 0201 	bic.w	r2, r3, #1
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800517a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f023 030a 	bic.w	r3, r3, #10
 800518c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	621a      	str	r2, [r3, #32]
}
 80051a2:	bf00      	nop
 80051a4:	371c      	adds	r7, #28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b087      	sub	sp, #28
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	f023 0210 	bic.w	r2, r3, #16
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	031b      	lsls	r3, r3, #12
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	621a      	str	r2, [r3, #32]
}
 8005202:	bf00      	nop
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800520e:	b480      	push	{r7}
 8005210:	b085      	sub	sp, #20
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	f043 0307 	orr.w	r3, r3, #7
 8005230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	609a      	str	r2, [r3, #8]
}
 8005238:	bf00      	nop
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800525e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	021a      	lsls	r2, r3, #8
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	431a      	orrs	r2, r3
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4313      	orrs	r3, r2
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	609a      	str	r2, [r3, #8]
}
 8005278:	bf00      	nop
 800527a:	371c      	adds	r7, #28
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005294:	2b01      	cmp	r3, #1
 8005296:	d101      	bne.n	800529c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005298:	2302      	movs	r3, #2
 800529a:	e045      	b.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a1c      	ldr	r2, [pc, #112]	; (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d004      	beq.n	80052d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a1b      	ldr	r2, [pc, #108]	; (8005338 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d108      	bne.n	80052e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80052d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052fa:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	4313      	orrs	r3, r2
 8005304:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	40010000 	.word	0x40010000
 8005338:	40010400 	.word	0x40010400

0800533c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e040      	b.n	800540c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fd f8e0 	bl	8002560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2224      	movs	r2, #36	; 0x24
 80053a4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0201 	bic.w	r2, r2, #1
 80053b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f82c 	bl	8005414 <UART_SetConfig>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e022      	b.n	800540c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fac4 	bl	800595c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053f2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fb4b 	bl	8005aa0 <UART_CheckIdleState>
 800540a:	4603      	mov	r3, r0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800541c:	2300      	movs	r3, #0
 800541e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	431a      	orrs	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	4313      	orrs	r3, r2
 800543a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	4bb1      	ldr	r3, [pc, #708]	; (8005708 <UART_SetConfig+0x2f4>)
 8005444:	4013      	ands	r3, r2
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	6939      	ldr	r1, [r7, #16]
 800544c:	430b      	orrs	r3, r1
 800544e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4313      	orrs	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	430a      	orrs	r2, r1
 8005488:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a9f      	ldr	r2, [pc, #636]	; (800570c <UART_SetConfig+0x2f8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d121      	bne.n	80054d8 <UART_SetConfig+0xc4>
 8005494:	4b9e      	ldr	r3, [pc, #632]	; (8005710 <UART_SetConfig+0x2fc>)
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d816      	bhi.n	80054d0 <UART_SetConfig+0xbc>
 80054a2:	a201      	add	r2, pc, #4	; (adr r2, 80054a8 <UART_SetConfig+0x94>)
 80054a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a8:	080054b9 	.word	0x080054b9
 80054ac:	080054c5 	.word	0x080054c5
 80054b0:	080054bf 	.word	0x080054bf
 80054b4:	080054cb 	.word	0x080054cb
 80054b8:	2301      	movs	r3, #1
 80054ba:	77fb      	strb	r3, [r7, #31]
 80054bc:	e151      	b.n	8005762 <UART_SetConfig+0x34e>
 80054be:	2302      	movs	r3, #2
 80054c0:	77fb      	strb	r3, [r7, #31]
 80054c2:	e14e      	b.n	8005762 <UART_SetConfig+0x34e>
 80054c4:	2304      	movs	r3, #4
 80054c6:	77fb      	strb	r3, [r7, #31]
 80054c8:	e14b      	b.n	8005762 <UART_SetConfig+0x34e>
 80054ca:	2308      	movs	r3, #8
 80054cc:	77fb      	strb	r3, [r7, #31]
 80054ce:	e148      	b.n	8005762 <UART_SetConfig+0x34e>
 80054d0:	2310      	movs	r3, #16
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	bf00      	nop
 80054d6:	e144      	b.n	8005762 <UART_SetConfig+0x34e>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a8d      	ldr	r2, [pc, #564]	; (8005714 <UART_SetConfig+0x300>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d134      	bne.n	800554c <UART_SetConfig+0x138>
 80054e2:	4b8b      	ldr	r3, [pc, #556]	; (8005710 <UART_SetConfig+0x2fc>)
 80054e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e8:	f003 030c 	and.w	r3, r3, #12
 80054ec:	2b0c      	cmp	r3, #12
 80054ee:	d829      	bhi.n	8005544 <UART_SetConfig+0x130>
 80054f0:	a201      	add	r2, pc, #4	; (adr r2, 80054f8 <UART_SetConfig+0xe4>)
 80054f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f6:	bf00      	nop
 80054f8:	0800552d 	.word	0x0800552d
 80054fc:	08005545 	.word	0x08005545
 8005500:	08005545 	.word	0x08005545
 8005504:	08005545 	.word	0x08005545
 8005508:	08005539 	.word	0x08005539
 800550c:	08005545 	.word	0x08005545
 8005510:	08005545 	.word	0x08005545
 8005514:	08005545 	.word	0x08005545
 8005518:	08005533 	.word	0x08005533
 800551c:	08005545 	.word	0x08005545
 8005520:	08005545 	.word	0x08005545
 8005524:	08005545 	.word	0x08005545
 8005528:	0800553f 	.word	0x0800553f
 800552c:	2300      	movs	r3, #0
 800552e:	77fb      	strb	r3, [r7, #31]
 8005530:	e117      	b.n	8005762 <UART_SetConfig+0x34e>
 8005532:	2302      	movs	r3, #2
 8005534:	77fb      	strb	r3, [r7, #31]
 8005536:	e114      	b.n	8005762 <UART_SetConfig+0x34e>
 8005538:	2304      	movs	r3, #4
 800553a:	77fb      	strb	r3, [r7, #31]
 800553c:	e111      	b.n	8005762 <UART_SetConfig+0x34e>
 800553e:	2308      	movs	r3, #8
 8005540:	77fb      	strb	r3, [r7, #31]
 8005542:	e10e      	b.n	8005762 <UART_SetConfig+0x34e>
 8005544:	2310      	movs	r3, #16
 8005546:	77fb      	strb	r3, [r7, #31]
 8005548:	bf00      	nop
 800554a:	e10a      	b.n	8005762 <UART_SetConfig+0x34e>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a71      	ldr	r2, [pc, #452]	; (8005718 <UART_SetConfig+0x304>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d120      	bne.n	8005598 <UART_SetConfig+0x184>
 8005556:	4b6e      	ldr	r3, [pc, #440]	; (8005710 <UART_SetConfig+0x2fc>)
 8005558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005560:	2b10      	cmp	r3, #16
 8005562:	d00f      	beq.n	8005584 <UART_SetConfig+0x170>
 8005564:	2b10      	cmp	r3, #16
 8005566:	d802      	bhi.n	800556e <UART_SetConfig+0x15a>
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <UART_SetConfig+0x164>
 800556c:	e010      	b.n	8005590 <UART_SetConfig+0x17c>
 800556e:	2b20      	cmp	r3, #32
 8005570:	d005      	beq.n	800557e <UART_SetConfig+0x16a>
 8005572:	2b30      	cmp	r3, #48	; 0x30
 8005574:	d009      	beq.n	800558a <UART_SetConfig+0x176>
 8005576:	e00b      	b.n	8005590 <UART_SetConfig+0x17c>
 8005578:	2300      	movs	r3, #0
 800557a:	77fb      	strb	r3, [r7, #31]
 800557c:	e0f1      	b.n	8005762 <UART_SetConfig+0x34e>
 800557e:	2302      	movs	r3, #2
 8005580:	77fb      	strb	r3, [r7, #31]
 8005582:	e0ee      	b.n	8005762 <UART_SetConfig+0x34e>
 8005584:	2304      	movs	r3, #4
 8005586:	77fb      	strb	r3, [r7, #31]
 8005588:	e0eb      	b.n	8005762 <UART_SetConfig+0x34e>
 800558a:	2308      	movs	r3, #8
 800558c:	77fb      	strb	r3, [r7, #31]
 800558e:	e0e8      	b.n	8005762 <UART_SetConfig+0x34e>
 8005590:	2310      	movs	r3, #16
 8005592:	77fb      	strb	r3, [r7, #31]
 8005594:	bf00      	nop
 8005596:	e0e4      	b.n	8005762 <UART_SetConfig+0x34e>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a5f      	ldr	r2, [pc, #380]	; (800571c <UART_SetConfig+0x308>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d120      	bne.n	80055e4 <UART_SetConfig+0x1d0>
 80055a2:	4b5b      	ldr	r3, [pc, #364]	; (8005710 <UART_SetConfig+0x2fc>)
 80055a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055ac:	2b40      	cmp	r3, #64	; 0x40
 80055ae:	d00f      	beq.n	80055d0 <UART_SetConfig+0x1bc>
 80055b0:	2b40      	cmp	r3, #64	; 0x40
 80055b2:	d802      	bhi.n	80055ba <UART_SetConfig+0x1a6>
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d005      	beq.n	80055c4 <UART_SetConfig+0x1b0>
 80055b8:	e010      	b.n	80055dc <UART_SetConfig+0x1c8>
 80055ba:	2b80      	cmp	r3, #128	; 0x80
 80055bc:	d005      	beq.n	80055ca <UART_SetConfig+0x1b6>
 80055be:	2bc0      	cmp	r3, #192	; 0xc0
 80055c0:	d009      	beq.n	80055d6 <UART_SetConfig+0x1c2>
 80055c2:	e00b      	b.n	80055dc <UART_SetConfig+0x1c8>
 80055c4:	2300      	movs	r3, #0
 80055c6:	77fb      	strb	r3, [r7, #31]
 80055c8:	e0cb      	b.n	8005762 <UART_SetConfig+0x34e>
 80055ca:	2302      	movs	r3, #2
 80055cc:	77fb      	strb	r3, [r7, #31]
 80055ce:	e0c8      	b.n	8005762 <UART_SetConfig+0x34e>
 80055d0:	2304      	movs	r3, #4
 80055d2:	77fb      	strb	r3, [r7, #31]
 80055d4:	e0c5      	b.n	8005762 <UART_SetConfig+0x34e>
 80055d6:	2308      	movs	r3, #8
 80055d8:	77fb      	strb	r3, [r7, #31]
 80055da:	e0c2      	b.n	8005762 <UART_SetConfig+0x34e>
 80055dc:	2310      	movs	r3, #16
 80055de:	77fb      	strb	r3, [r7, #31]
 80055e0:	bf00      	nop
 80055e2:	e0be      	b.n	8005762 <UART_SetConfig+0x34e>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a4d      	ldr	r2, [pc, #308]	; (8005720 <UART_SetConfig+0x30c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d124      	bne.n	8005638 <UART_SetConfig+0x224>
 80055ee:	4b48      	ldr	r3, [pc, #288]	; (8005710 <UART_SetConfig+0x2fc>)
 80055f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055fc:	d012      	beq.n	8005624 <UART_SetConfig+0x210>
 80055fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005602:	d802      	bhi.n	800560a <UART_SetConfig+0x1f6>
 8005604:	2b00      	cmp	r3, #0
 8005606:	d007      	beq.n	8005618 <UART_SetConfig+0x204>
 8005608:	e012      	b.n	8005630 <UART_SetConfig+0x21c>
 800560a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800560e:	d006      	beq.n	800561e <UART_SetConfig+0x20a>
 8005610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005614:	d009      	beq.n	800562a <UART_SetConfig+0x216>
 8005616:	e00b      	b.n	8005630 <UART_SetConfig+0x21c>
 8005618:	2300      	movs	r3, #0
 800561a:	77fb      	strb	r3, [r7, #31]
 800561c:	e0a1      	b.n	8005762 <UART_SetConfig+0x34e>
 800561e:	2302      	movs	r3, #2
 8005620:	77fb      	strb	r3, [r7, #31]
 8005622:	e09e      	b.n	8005762 <UART_SetConfig+0x34e>
 8005624:	2304      	movs	r3, #4
 8005626:	77fb      	strb	r3, [r7, #31]
 8005628:	e09b      	b.n	8005762 <UART_SetConfig+0x34e>
 800562a:	2308      	movs	r3, #8
 800562c:	77fb      	strb	r3, [r7, #31]
 800562e:	e098      	b.n	8005762 <UART_SetConfig+0x34e>
 8005630:	2310      	movs	r3, #16
 8005632:	77fb      	strb	r3, [r7, #31]
 8005634:	bf00      	nop
 8005636:	e094      	b.n	8005762 <UART_SetConfig+0x34e>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a39      	ldr	r2, [pc, #228]	; (8005724 <UART_SetConfig+0x310>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d124      	bne.n	800568c <UART_SetConfig+0x278>
 8005642:	4b33      	ldr	r3, [pc, #204]	; (8005710 <UART_SetConfig+0x2fc>)
 8005644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005648:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800564c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005650:	d012      	beq.n	8005678 <UART_SetConfig+0x264>
 8005652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005656:	d802      	bhi.n	800565e <UART_SetConfig+0x24a>
 8005658:	2b00      	cmp	r3, #0
 800565a:	d007      	beq.n	800566c <UART_SetConfig+0x258>
 800565c:	e012      	b.n	8005684 <UART_SetConfig+0x270>
 800565e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005662:	d006      	beq.n	8005672 <UART_SetConfig+0x25e>
 8005664:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005668:	d009      	beq.n	800567e <UART_SetConfig+0x26a>
 800566a:	e00b      	b.n	8005684 <UART_SetConfig+0x270>
 800566c:	2301      	movs	r3, #1
 800566e:	77fb      	strb	r3, [r7, #31]
 8005670:	e077      	b.n	8005762 <UART_SetConfig+0x34e>
 8005672:	2302      	movs	r3, #2
 8005674:	77fb      	strb	r3, [r7, #31]
 8005676:	e074      	b.n	8005762 <UART_SetConfig+0x34e>
 8005678:	2304      	movs	r3, #4
 800567a:	77fb      	strb	r3, [r7, #31]
 800567c:	e071      	b.n	8005762 <UART_SetConfig+0x34e>
 800567e:	2308      	movs	r3, #8
 8005680:	77fb      	strb	r3, [r7, #31]
 8005682:	e06e      	b.n	8005762 <UART_SetConfig+0x34e>
 8005684:	2310      	movs	r3, #16
 8005686:	77fb      	strb	r3, [r7, #31]
 8005688:	bf00      	nop
 800568a:	e06a      	b.n	8005762 <UART_SetConfig+0x34e>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a25      	ldr	r2, [pc, #148]	; (8005728 <UART_SetConfig+0x314>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d124      	bne.n	80056e0 <UART_SetConfig+0x2cc>
 8005696:	4b1e      	ldr	r3, [pc, #120]	; (8005710 <UART_SetConfig+0x2fc>)
 8005698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80056a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a4:	d012      	beq.n	80056cc <UART_SetConfig+0x2b8>
 80056a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056aa:	d802      	bhi.n	80056b2 <UART_SetConfig+0x29e>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d007      	beq.n	80056c0 <UART_SetConfig+0x2ac>
 80056b0:	e012      	b.n	80056d8 <UART_SetConfig+0x2c4>
 80056b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b6:	d006      	beq.n	80056c6 <UART_SetConfig+0x2b2>
 80056b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056bc:	d009      	beq.n	80056d2 <UART_SetConfig+0x2be>
 80056be:	e00b      	b.n	80056d8 <UART_SetConfig+0x2c4>
 80056c0:	2300      	movs	r3, #0
 80056c2:	77fb      	strb	r3, [r7, #31]
 80056c4:	e04d      	b.n	8005762 <UART_SetConfig+0x34e>
 80056c6:	2302      	movs	r3, #2
 80056c8:	77fb      	strb	r3, [r7, #31]
 80056ca:	e04a      	b.n	8005762 <UART_SetConfig+0x34e>
 80056cc:	2304      	movs	r3, #4
 80056ce:	77fb      	strb	r3, [r7, #31]
 80056d0:	e047      	b.n	8005762 <UART_SetConfig+0x34e>
 80056d2:	2308      	movs	r3, #8
 80056d4:	77fb      	strb	r3, [r7, #31]
 80056d6:	e044      	b.n	8005762 <UART_SetConfig+0x34e>
 80056d8:	2310      	movs	r3, #16
 80056da:	77fb      	strb	r3, [r7, #31]
 80056dc:	bf00      	nop
 80056de:	e040      	b.n	8005762 <UART_SetConfig+0x34e>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a11      	ldr	r2, [pc, #68]	; (800572c <UART_SetConfig+0x318>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d139      	bne.n	800575e <UART_SetConfig+0x34a>
 80056ea:	4b09      	ldr	r3, [pc, #36]	; (8005710 <UART_SetConfig+0x2fc>)
 80056ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80056f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056f8:	d027      	beq.n	800574a <UART_SetConfig+0x336>
 80056fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056fe:	d817      	bhi.n	8005730 <UART_SetConfig+0x31c>
 8005700:	2b00      	cmp	r3, #0
 8005702:	d01c      	beq.n	800573e <UART_SetConfig+0x32a>
 8005704:	e027      	b.n	8005756 <UART_SetConfig+0x342>
 8005706:	bf00      	nop
 8005708:	efff69f3 	.word	0xefff69f3
 800570c:	40011000 	.word	0x40011000
 8005710:	40023800 	.word	0x40023800
 8005714:	40004400 	.word	0x40004400
 8005718:	40004800 	.word	0x40004800
 800571c:	40004c00 	.word	0x40004c00
 8005720:	40005000 	.word	0x40005000
 8005724:	40011400 	.word	0x40011400
 8005728:	40007800 	.word	0x40007800
 800572c:	40007c00 	.word	0x40007c00
 8005730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005734:	d006      	beq.n	8005744 <UART_SetConfig+0x330>
 8005736:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800573a:	d009      	beq.n	8005750 <UART_SetConfig+0x33c>
 800573c:	e00b      	b.n	8005756 <UART_SetConfig+0x342>
 800573e:	2300      	movs	r3, #0
 8005740:	77fb      	strb	r3, [r7, #31]
 8005742:	e00e      	b.n	8005762 <UART_SetConfig+0x34e>
 8005744:	2302      	movs	r3, #2
 8005746:	77fb      	strb	r3, [r7, #31]
 8005748:	e00b      	b.n	8005762 <UART_SetConfig+0x34e>
 800574a:	2304      	movs	r3, #4
 800574c:	77fb      	strb	r3, [r7, #31]
 800574e:	e008      	b.n	8005762 <UART_SetConfig+0x34e>
 8005750:	2308      	movs	r3, #8
 8005752:	77fb      	strb	r3, [r7, #31]
 8005754:	e005      	b.n	8005762 <UART_SetConfig+0x34e>
 8005756:	2310      	movs	r3, #16
 8005758:	77fb      	strb	r3, [r7, #31]
 800575a:	bf00      	nop
 800575c:	e001      	b.n	8005762 <UART_SetConfig+0x34e>
 800575e:	2310      	movs	r3, #16
 8005760:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800576a:	d17c      	bne.n	8005866 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800576c:	7ffb      	ldrb	r3, [r7, #31]
 800576e:	2b08      	cmp	r3, #8
 8005770:	d859      	bhi.n	8005826 <UART_SetConfig+0x412>
 8005772:	a201      	add	r2, pc, #4	; (adr r2, 8005778 <UART_SetConfig+0x364>)
 8005774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005778:	0800579d 	.word	0x0800579d
 800577c:	080057bb 	.word	0x080057bb
 8005780:	080057d9 	.word	0x080057d9
 8005784:	08005827 	.word	0x08005827
 8005788:	080057f1 	.word	0x080057f1
 800578c:	08005827 	.word	0x08005827
 8005790:	08005827 	.word	0x08005827
 8005794:	08005827 	.word	0x08005827
 8005798:	0800580f 	.word	0x0800580f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800579c:	f7fe fda0 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 80057a0:	4603      	mov	r3, r0
 80057a2:	005a      	lsls	r2, r3, #1
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	441a      	add	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	61bb      	str	r3, [r7, #24]
        break;
 80057b8:	e038      	b.n	800582c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80057ba:	f7fe fda5 	bl	8004308 <HAL_RCC_GetPCLK2Freq>
 80057be:	4603      	mov	r3, r0
 80057c0:	005a      	lsls	r2, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	085b      	lsrs	r3, r3, #1
 80057c8:	441a      	add	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	61bb      	str	r3, [r7, #24]
        break;
 80057d6:	e029      	b.n	800582c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	085a      	lsrs	r2, r3, #1
 80057de:	4b5d      	ldr	r3, [pc, #372]	; (8005954 <UART_SetConfig+0x540>)
 80057e0:	4413      	add	r3, r2
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6852      	ldr	r2, [r2, #4]
 80057e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	61bb      	str	r3, [r7, #24]
        break;
 80057ee:	e01d      	b.n	800582c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80057f0:	f7fe fc92 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 80057f4:	4603      	mov	r3, r0
 80057f6:	005a      	lsls	r2, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	085b      	lsrs	r3, r3, #1
 80057fe:	441a      	add	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	fbb2 f3f3 	udiv	r3, r2, r3
 8005808:	b29b      	uxth	r3, r3
 800580a:	61bb      	str	r3, [r7, #24]
        break;
 800580c:	e00e      	b.n	800582c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	085b      	lsrs	r3, r3, #1
 8005814:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005820:	b29b      	uxth	r3, r3
 8005822:	61bb      	str	r3, [r7, #24]
        break;
 8005824:	e002      	b.n	800582c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	75fb      	strb	r3, [r7, #23]
        break;
 800582a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	2b0f      	cmp	r3, #15
 8005830:	d916      	bls.n	8005860 <UART_SetConfig+0x44c>
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005838:	d212      	bcs.n	8005860 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	b29b      	uxth	r3, r3
 800583e:	f023 030f 	bic.w	r3, r3, #15
 8005842:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	085b      	lsrs	r3, r3, #1
 8005848:	b29b      	uxth	r3, r3
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	b29a      	uxth	r2, r3
 8005850:	89fb      	ldrh	r3, [r7, #14]
 8005852:	4313      	orrs	r3, r2
 8005854:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	89fa      	ldrh	r2, [r7, #14]
 800585c:	60da      	str	r2, [r3, #12]
 800585e:	e06e      	b.n	800593e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	75fb      	strb	r3, [r7, #23]
 8005864:	e06b      	b.n	800593e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8005866:	7ffb      	ldrb	r3, [r7, #31]
 8005868:	2b08      	cmp	r3, #8
 800586a:	d857      	bhi.n	800591c <UART_SetConfig+0x508>
 800586c:	a201      	add	r2, pc, #4	; (adr r2, 8005874 <UART_SetConfig+0x460>)
 800586e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005872:	bf00      	nop
 8005874:	08005899 	.word	0x08005899
 8005878:	080058b5 	.word	0x080058b5
 800587c:	080058d1 	.word	0x080058d1
 8005880:	0800591d 	.word	0x0800591d
 8005884:	080058e9 	.word	0x080058e9
 8005888:	0800591d 	.word	0x0800591d
 800588c:	0800591d 	.word	0x0800591d
 8005890:	0800591d 	.word	0x0800591d
 8005894:	08005905 	.word	0x08005905
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005898:	f7fe fd22 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 800589c:	4602      	mov	r2, r0
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	441a      	add	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	61bb      	str	r3, [r7, #24]
        break;
 80058b2:	e036      	b.n	8005922 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80058b4:	f7fe fd28 	bl	8004308 <HAL_RCC_GetPCLK2Freq>
 80058b8:	4602      	mov	r2, r0
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	085b      	lsrs	r3, r3, #1
 80058c0:	441a      	add	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	61bb      	str	r3, [r7, #24]
        break;
 80058ce:	e028      	b.n	8005922 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	085a      	lsrs	r2, r3, #1
 80058d6:	4b20      	ldr	r3, [pc, #128]	; (8005958 <UART_SetConfig+0x544>)
 80058d8:	4413      	add	r3, r2
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	6852      	ldr	r2, [r2, #4]
 80058de:	fbb3 f3f2 	udiv	r3, r3, r2
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	61bb      	str	r3, [r7, #24]
        break;
 80058e6:	e01c      	b.n	8005922 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80058e8:	f7fe fc16 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 80058ec:	4602      	mov	r2, r0
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	085b      	lsrs	r3, r3, #1
 80058f4:	441a      	add	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fe:	b29b      	uxth	r3, r3
 8005900:	61bb      	str	r3, [r7, #24]
        break;
 8005902:	e00e      	b.n	8005922 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	fbb2 f3f3 	udiv	r3, r2, r3
 8005916:	b29b      	uxth	r3, r3
 8005918:	61bb      	str	r3, [r7, #24]
        break;
 800591a:	e002      	b.n	8005922 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	75fb      	strb	r3, [r7, #23]
        break;
 8005920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	2b0f      	cmp	r3, #15
 8005926:	d908      	bls.n	800593a <UART_SetConfig+0x526>
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592e:	d204      	bcs.n	800593a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	60da      	str	r2, [r3, #12]
 8005938:	e001      	b.n	800593e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800594a:	7dfb      	ldrb	r3, [r7, #23]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	01e84800 	.word	0x01e84800
 8005958:	00f42400 	.word	0x00f42400

0800595c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00a      	beq.n	80059ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	f003 0310 	and.w	r3, r3, #16
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00a      	beq.n	8005a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	f003 0320 	and.w	r3, r3, #32
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01a      	beq.n	8005a72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a5a:	d10a      	bne.n	8005a72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	605a      	str	r2, [r3, #4]
  }
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af02      	add	r7, sp, #8
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005aae:	f7fc fe9f 	bl	80027f0 <HAL_GetTick>
 8005ab2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0308 	and.w	r3, r3, #8
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d10e      	bne.n	8005ae0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ac2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f814 	bl	8005afe <UART_WaitOnFlagUntilTimeout>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e00a      	b.n	8005af6 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b084      	sub	sp, #16
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	60f8      	str	r0, [r7, #12]
 8005b06:	60b9      	str	r1, [r7, #8]
 8005b08:	603b      	str	r3, [r7, #0]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b0e:	e02a      	b.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b16:	d026      	beq.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b18:	f7fc fe6a 	bl	80027f0 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d302      	bcc.n	8005b2e <UART_WaitOnFlagUntilTimeout+0x30>
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d11b      	bne.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b3c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0201 	bic.w	r2, r2, #1
 8005b4c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2220      	movs	r2, #32
 8005b52:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2220      	movs	r2, #32
 8005b58:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e00f      	b.n	8005b86 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	bf0c      	ite	eq
 8005b76:	2301      	moveq	r3, #1
 8005b78:	2300      	movne	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d0c5      	beq.n	8005b10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
	...

08005b90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b90:	b084      	sub	sp, #16
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b084      	sub	sp, #16
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	f107 001c 	add.w	r0, r7, #28
 8005b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d120      	bne.n	8005bea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	4b20      	ldr	r3, [pc, #128]	; (8005c3c <USB_CoreInit+0xac>)
 8005bba:	4013      	ands	r3, r2
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d105      	bne.n	8005bde <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fa60 	bl	80060a4 <USB_CoreReset>
 8005be4:	4603      	mov	r3, r0
 8005be6:	73fb      	strb	r3, [r7, #15]
 8005be8:	e010      	b.n	8005c0c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fa54 	bl	80060a4 <USB_CoreReset>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d10b      	bne.n	8005c2a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f043 0206 	orr.w	r2, r3, #6
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f043 0220 	orr.w	r2, r3, #32
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c36:	b004      	add	sp, #16
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	ffbdffbf 	.word	0xffbdffbf

08005c40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f023 0201 	bic.w	r2, r3, #1
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b082      	sub	sp, #8
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c7a:	78fb      	ldrb	r3, [r7, #3]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d106      	bne.n	8005c8e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	60da      	str	r2, [r3, #12]
 8005c8c:	e00b      	b.n	8005ca6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c8e:	78fb      	ldrb	r3, [r7, #3]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d106      	bne.n	8005ca2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	60da      	str	r2, [r3, #12]
 8005ca0:	e001      	b.n	8005ca6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e003      	b.n	8005cae <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005ca6:	2032      	movs	r0, #50	; 0x32
 8005ca8:	f7fc fdae 	bl	8002808 <HAL_Delay>

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cb8:	b084      	sub	sp, #16
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b086      	sub	sp, #24
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	613b      	str	r3, [r7, #16]
 8005cd6:	e009      	b.n	8005cec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	3340      	adds	r3, #64	; 0x40
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	2b0e      	cmp	r3, #14
 8005cf0:	d9f2      	bls.n	8005cd8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d112      	bne.n	8005d1e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	e005      	b.n	8005d2a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d30:	461a      	mov	r2, r3
 8005d32:	2300      	movs	r3, #0
 8005d34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d44:	461a      	mov	r2, r3
 8005d46:	680b      	ldr	r3, [r1, #0]
 8005d48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d10c      	bne.n	8005d6a <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8005d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d104      	bne.n	8005d60 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d56:	2100      	movs	r1, #0
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f971 	bl	8006040 <USB_SetDevSpeed>
 8005d5e:	e018      	b.n	8005d92 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d60:	2101      	movs	r1, #1
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f96c 	bl	8006040 <USB_SetDevSpeed>
 8005d68:	e013      	b.n	8005d92 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d10c      	bne.n	8005d8a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8005d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d104      	bne.n	8005d80 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d76:	2100      	movs	r1, #0
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f961 	bl	8006040 <USB_SetDevSpeed>
 8005d7e:	e008      	b.n	8005d92 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d80:	2101      	movs	r1, #1
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f95c 	bl	8006040 <USB_SetDevSpeed>
 8005d88:	e003      	b.n	8005d92 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d8a:	2103      	movs	r1, #3
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f957 	bl	8006040 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d92:	2110      	movs	r1, #16
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f90b 	bl	8005fb0 <USB_FlushTxFifo>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f929 	bl	8005ffc <USB_FlushRxFifo>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dba:	461a      	mov	r2, r3
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	2300      	movs	r3, #0
 8005dca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dd8:	2300      	movs	r3, #0
 8005dda:	613b      	str	r3, [r7, #16]
 8005ddc:	e043      	b.n	8005e66 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005df0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005df4:	d118      	bne.n	8005e28 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10a      	bne.n	8005e12 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e0e:	6013      	str	r3, [r2, #0]
 8005e10:	e013      	b.n	8005e3a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	e008      	b.n	8005e3a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e34:	461a      	mov	r2, r3
 8005e36:	2300      	movs	r3, #0
 8005e38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e46:	461a      	mov	r2, r3
 8005e48:	2300      	movs	r3, #0
 8005e4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e58:	461a      	mov	r2, r3
 8005e5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	3301      	adds	r3, #1
 8005e64:	613b      	str	r3, [r7, #16]
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d3b7      	bcc.n	8005dde <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e6e:	2300      	movs	r3, #0
 8005e70:	613b      	str	r3, [r7, #16]
 8005e72:	e043      	b.n	8005efc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e8a:	d118      	bne.n	8005ebe <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10a      	bne.n	8005ea8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	e013      	b.n	8005ed0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005eba:	6013      	str	r3, [r2, #0]
 8005ebc:	e008      	b.n	8005ed0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eca:	461a      	mov	r2, r3
 8005ecc:	2300      	movs	r3, #0
 8005ece:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005edc:	461a      	mov	r2, r3
 8005ede:	2300      	movs	r3, #0
 8005ee0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ef4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	613b      	str	r3, [r7, #16]
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d3b7      	bcc.n	8005e74 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f16:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8005f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d110      	bne.n	8005f40 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f24:	461a      	mov	r2, r3
 8005f26:	4b1e      	ldr	r3, [pc, #120]	; (8005fa0 <USB_DevInit+0x2e8>)
 8005f28:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4b1a      	ldr	r3, [pc, #104]	; (8005fa4 <USB_DevInit+0x2ec>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d105      	bne.n	8005f60 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	f043 0210 	orr.w	r2, r3, #16
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	699a      	ldr	r2, [r3, #24]
 8005f64:	4b10      	ldr	r3, [pc, #64]	; (8005fa8 <USB_DevInit+0x2f0>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d005      	beq.n	8005f7e <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	f043 0208 	orr.w	r2, r3, #8
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d105      	bne.n	8005f90 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	699a      	ldr	r2, [r3, #24]
 8005f88:	4b08      	ldr	r3, [pc, #32]	; (8005fac <USB_DevInit+0x2f4>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f9c:	b004      	add	sp, #16
 8005f9e:	4770      	bx	lr
 8005fa0:	00800100 	.word	0x00800100
 8005fa4:	00010003 	.word	0x00010003
 8005fa8:	803c3800 	.word	0x803c3800
 8005fac:	40000004 	.word	0x40000004

08005fb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	019b      	lsls	r3, r3, #6
 8005fc2:	f043 0220 	orr.w	r2, r3, #32
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4a09      	ldr	r2, [pc, #36]	; (8005ff8 <USB_FlushTxFifo+0x48>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d901      	bls.n	8005fdc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e006      	b.n	8005fea <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f003 0320 	and.w	r3, r3, #32
 8005fe4:	2b20      	cmp	r3, #32
 8005fe6:	d0f0      	beq.n	8005fca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	00030d40 	.word	0x00030d40

08005ffc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006004:	2300      	movs	r3, #0
 8006006:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2210      	movs	r2, #16
 800600c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3301      	adds	r3, #1
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	4a09      	ldr	r2, [pc, #36]	; (800603c <USB_FlushRxFifo+0x40>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d901      	bls.n	8006020 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e006      	b.n	800602e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b10      	cmp	r3, #16
 800602a:	d0f0      	beq.n	800600e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	00030d40 	.word	0x00030d40

08006040 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	68f9      	ldr	r1, [r7, #12]
 800605c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006060:	4313      	orrs	r3, r2
 8006062:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800608c:	f043 0302 	orr.w	r3, r3, #2
 8006090:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006092:	2003      	movs	r0, #3
 8006094:	f7fc fbb8 	bl	8002808 <HAL_Delay>

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3301      	adds	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4a13      	ldr	r2, [pc, #76]	; (8006108 <USB_CoreReset+0x64>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d901      	bls.n	80060c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e01b      	b.n	80060fa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	daf2      	bge.n	80060b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f043 0201 	orr.w	r2, r3, #1
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3301      	adds	r3, #1
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4a09      	ldr	r2, [pc, #36]	; (8006108 <USB_CoreReset+0x64>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d901      	bls.n	80060ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e006      	b.n	80060fa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d0f0      	beq.n	80060da <USB_CoreReset+0x36>

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	00030d40 	.word	0x00030d40

0800610c <__libc_init_array>:
 800610c:	b570      	push	{r4, r5, r6, lr}
 800610e:	4e0d      	ldr	r6, [pc, #52]	; (8006144 <__libc_init_array+0x38>)
 8006110:	4c0d      	ldr	r4, [pc, #52]	; (8006148 <__libc_init_array+0x3c>)
 8006112:	1ba4      	subs	r4, r4, r6
 8006114:	10a4      	asrs	r4, r4, #2
 8006116:	2500      	movs	r5, #0
 8006118:	42a5      	cmp	r5, r4
 800611a:	d109      	bne.n	8006130 <__libc_init_array+0x24>
 800611c:	4e0b      	ldr	r6, [pc, #44]	; (800614c <__libc_init_array+0x40>)
 800611e:	4c0c      	ldr	r4, [pc, #48]	; (8006150 <__libc_init_array+0x44>)
 8006120:	f000 f820 	bl	8006164 <_init>
 8006124:	1ba4      	subs	r4, r4, r6
 8006126:	10a4      	asrs	r4, r4, #2
 8006128:	2500      	movs	r5, #0
 800612a:	42a5      	cmp	r5, r4
 800612c:	d105      	bne.n	800613a <__libc_init_array+0x2e>
 800612e:	bd70      	pop	{r4, r5, r6, pc}
 8006130:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006134:	4798      	blx	r3
 8006136:	3501      	adds	r5, #1
 8006138:	e7ee      	b.n	8006118 <__libc_init_array+0xc>
 800613a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800613e:	4798      	blx	r3
 8006140:	3501      	adds	r5, #1
 8006142:	e7f2      	b.n	800612a <__libc_init_array+0x1e>
 8006144:	0800619c 	.word	0x0800619c
 8006148:	0800619c 	.word	0x0800619c
 800614c:	0800619c 	.word	0x0800619c
 8006150:	080061a0 	.word	0x080061a0

08006154 <memset>:
 8006154:	4402      	add	r2, r0
 8006156:	4603      	mov	r3, r0
 8006158:	4293      	cmp	r3, r2
 800615a:	d100      	bne.n	800615e <memset+0xa>
 800615c:	4770      	bx	lr
 800615e:	f803 1b01 	strb.w	r1, [r3], #1
 8006162:	e7f9      	b.n	8006158 <memset+0x4>

08006164 <_init>:
 8006164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006166:	bf00      	nop
 8006168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800616a:	bc08      	pop	{r3}
 800616c:	469e      	mov	lr, r3
 800616e:	4770      	bx	lr

08006170 <_fini>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	bf00      	nop
 8006174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006176:	bc08      	pop	{r3}
 8006178:	469e      	mov	lr, r3
 800617a:	4770      	bx	lr
