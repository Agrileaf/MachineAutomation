
Automation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e64  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005044  08005044  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005044  08005044  00015044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800504c  0800504c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800504c  0800504c  0001504c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005050  08005050  00015050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  20000010  08005064  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  08005064  000206a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014124  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a88  00000000  00000000  00034164  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001188  00000000  00000000  00036bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001010  00000000  00000000  00037d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026e00  00000000  00000000  00038d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f4c6  00000000  00000000  0005fb88  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f212a  00000000  00000000  0006f04e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161178  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004870  00000000  00000000  001611f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005014 	.word	0x08005014

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08005014 	.word	0x08005014

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a55      	ldr	r2, [pc, #340]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d116      	bne.n	8000548 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		if(Step_A1)
 800051a:	4b55      	ldr	r3, [pc, #340]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d003      	beq.n	800052a <HAL_TIM_PeriodElapsedCallback+0x22>
		{
			Step_A2=true;
 8000522:	4b54      	ldr	r3, [pc, #336]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000524:	2201      	movs	r2, #1
 8000526:	701a      	strb	r2, [r3, #0]
 8000528:	e00e      	b.n	8000548 <HAL_TIM_PeriodElapsedCallback+0x40>
		}
		else if(Step_A3)
 800052a:	4b53      	ldr	r3, [pc, #332]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d003      	beq.n	800053a <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			Step_A4=true;
 8000532:	4b52      	ldr	r3, [pc, #328]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000534:	2201      	movs	r2, #1
 8000536:	701a      	strb	r2, [r3, #0]
 8000538:	e006      	b.n	8000548 <HAL_TIM_PeriodElapsedCallback+0x40>
		}
		else if(Step_A5)
 800053a:	4b51      	ldr	r3, [pc, #324]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d002      	beq.n	8000548 <HAL_TIM_PeriodElapsedCallback+0x40>
		{
			Step_A6=true;
 8000542:	4b50      	ldr	r3, [pc, #320]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000544:	2201      	movs	r2, #1
 8000546:	701a      	strb	r2, [r3, #0]
		}
	}

	if(htim->Instance == TIM2)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000550:	d116      	bne.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		if(Step_B1)
 8000552:	4b4d      	ldr	r3, [pc, #308]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d003      	beq.n	8000562 <HAL_TIM_PeriodElapsedCallback+0x5a>
		{
			Step_B2=true;
 800055a:	4b4c      	ldr	r3, [pc, #304]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x184>)
 800055c:	2201      	movs	r2, #1
 800055e:	701a      	strb	r2, [r3, #0]
 8000560:	e00e      	b.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x78>
		}
		else if(Step_B3)
 8000562:	4b4b      	ldr	r3, [pc, #300]	; (8000690 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d003      	beq.n	8000572 <HAL_TIM_PeriodElapsedCallback+0x6a>
		{
			Step_B4=true;
 800056a:	4b4a      	ldr	r3, [pc, #296]	; (8000694 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800056c:	2201      	movs	r2, #1
 800056e:	701a      	strb	r2, [r3, #0]
 8000570:	e006      	b.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x78>
		}
		else if(Step_B5)
 8000572:	4b49      	ldr	r3, [pc, #292]	; (8000698 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d002      	beq.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x78>
		{
			Step_B6=true;
 800057a:	4b48      	ldr	r3, [pc, #288]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x194>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
		}

	}

	if(htim->Instance == TIM3)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a46      	ldr	r2, [pc, #280]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d116      	bne.n	80005b8 <HAL_TIM_PeriodElapsedCallback+0xb0>
	{
		if(Step_C1)
 800058a:	4b46      	ldr	r3, [pc, #280]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d003      	beq.n	800059a <HAL_TIM_PeriodElapsedCallback+0x92>
		{
			Step_C2=true;
 8000592:	4b45      	ldr	r3, [pc, #276]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]
 8000598:	e00e      	b.n	80005b8 <HAL_TIM_PeriodElapsedCallback+0xb0>
		}
		else if(Step_C3)
 800059a:	4b44      	ldr	r3, [pc, #272]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d003      	beq.n	80005aa <HAL_TIM_PeriodElapsedCallback+0xa2>
		{
			Step_C4=true;
 80005a2:	4b43      	ldr	r3, [pc, #268]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	701a      	strb	r2, [r3, #0]
 80005a8:	e006      	b.n	80005b8 <HAL_TIM_PeriodElapsedCallback+0xb0>
		}
		else if(Step_C5)
 80005aa:	4b42      	ldr	r3, [pc, #264]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <HAL_TIM_PeriodElapsedCallback+0xb0>
		{
			Step_C6=true;
 80005b2:	4b41      	ldr	r3, [pc, #260]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
		}

	}

	if(htim->Instance == TIM4)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a3f      	ldr	r2, [pc, #252]	; (80006bc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d116      	bne.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0xe8>
	{
		if(Step_D1)
 80005c2:	4b3f      	ldr	r3, [pc, #252]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d003      	beq.n	80005d2 <HAL_TIM_PeriodElapsedCallback+0xca>
		{
			Step_D2=true;
 80005ca:	4b3e      	ldr	r3, [pc, #248]	; (80006c4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
 80005d0:	e00e      	b.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0xe8>
		}
		else if(Step_D3)
 80005d2:	4b3d      	ldr	r3, [pc, #244]	; (80006c8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d003      	beq.n	80005e2 <HAL_TIM_PeriodElapsedCallback+0xda>
		{
			Step_D4=true;
 80005da:	4b3c      	ldr	r3, [pc, #240]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80005dc:	2201      	movs	r2, #1
 80005de:	701a      	strb	r2, [r3, #0]
 80005e0:	e006      	b.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0xe8>
		}
		else if(Step_D5)
 80005e2:	4b3b      	ldr	r3, [pc, #236]	; (80006d0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d002      	beq.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0xe8>
		{
			Step_D6=true;
 80005ea:	4b3a      	ldr	r3, [pc, #232]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if(htim->Instance == TIM5)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d116      	bne.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x120>
	{
		if(Step_E1)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d003      	beq.n	800060a <HAL_TIM_PeriodElapsedCallback+0x102>
		{
		    Step_E2=true;
 8000602:	4b37      	ldr	r3, [pc, #220]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
 8000608:	e00e      	b.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x120>
		}
		else if(Step_E3)
 800060a:	4b36      	ldr	r3, [pc, #216]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d003      	beq.n	800061a <HAL_TIM_PeriodElapsedCallback+0x112>
		{
			Step_E4=true;
 8000612:	4b35      	ldr	r3, [pc, #212]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000614:	2201      	movs	r2, #1
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	e006      	b.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x120>
		}
		else if(Step_E5)
 800061a:	4b34      	ldr	r3, [pc, #208]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d002      	beq.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x120>
		{
			Step_E6=true;
 8000622:	4b33      	ldr	r3, [pc, #204]	; (80006f0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
		}
	}

	if(htim->Instance == TIM6)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a31      	ldr	r2, [pc, #196]	; (80006f4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d116      	bne.n	8000660 <HAL_TIM_PeriodElapsedCallback+0x158>
	{
		if(Step_F1)
 8000632:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <HAL_TIM_PeriodElapsedCallback+0x13a>
		{
			Step_F2=true;
 800063a:	4b30      	ldr	r3, [pc, #192]	; (80006fc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800063c:	2201      	movs	r2, #1
 800063e:	701a      	strb	r2, [r3, #0]
		else if(Step_F5)
		{
			Step_F6=true;
		}
	}
}
 8000640:	e00e      	b.n	8000660 <HAL_TIM_PeriodElapsedCallback+0x158>
		else if(Step_F3)
 8000642:	4b2f      	ldr	r3, [pc, #188]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d003      	beq.n	8000652 <HAL_TIM_PeriodElapsedCallback+0x14a>
			Step_F4=true;
 800064a:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800064c:	2201      	movs	r2, #1
 800064e:	701a      	strb	r2, [r3, #0]
}
 8000650:	e006      	b.n	8000660 <HAL_TIM_PeriodElapsedCallback+0x158>
		else if(Step_F5)
 8000652:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <HAL_TIM_PeriodElapsedCallback+0x158>
			Step_F6=true;
 800065a:	4b2c      	ldr	r3, [pc, #176]	; (800070c <HAL_TIM_PeriodElapsedCallback+0x204>)
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	40010000 	.word	0x40010000
 8000670:	2000002c 	.word	0x2000002c
 8000674:	20000032 	.word	0x20000032
 8000678:	20000038 	.word	0x20000038
 800067c:	2000003e 	.word	0x2000003e
 8000680:	20000044 	.word	0x20000044
 8000684:	2000004a 	.word	0x2000004a
 8000688:	2000002d 	.word	0x2000002d
 800068c:	20000033 	.word	0x20000033
 8000690:	20000039 	.word	0x20000039
 8000694:	2000003f 	.word	0x2000003f
 8000698:	20000045 	.word	0x20000045
 800069c:	2000004b 	.word	0x2000004b
 80006a0:	40000400 	.word	0x40000400
 80006a4:	2000002e 	.word	0x2000002e
 80006a8:	20000034 	.word	0x20000034
 80006ac:	2000003a 	.word	0x2000003a
 80006b0:	20000040 	.word	0x20000040
 80006b4:	20000046 	.word	0x20000046
 80006b8:	2000004c 	.word	0x2000004c
 80006bc:	40000800 	.word	0x40000800
 80006c0:	2000002f 	.word	0x2000002f
 80006c4:	20000035 	.word	0x20000035
 80006c8:	2000003b 	.word	0x2000003b
 80006cc:	20000041 	.word	0x20000041
 80006d0:	20000047 	.word	0x20000047
 80006d4:	2000004d 	.word	0x2000004d
 80006d8:	40000c00 	.word	0x40000c00
 80006dc:	20000030 	.word	0x20000030
 80006e0:	20000036 	.word	0x20000036
 80006e4:	2000003c 	.word	0x2000003c
 80006e8:	20000042 	.word	0x20000042
 80006ec:	20000048 	.word	0x20000048
 80006f0:	2000004e 	.word	0x2000004e
 80006f4:	40001000 	.word	0x40001000
 80006f8:	20000031 	.word	0x20000031
 80006fc:	20000037 	.word	0x20000037
 8000700:	2000003d 	.word	0x2000003d
 8000704:	20000043 	.word	0x20000043
 8000708:	20000049 	.word	0x20000049
 800070c:	2000004f 	.word	0x2000004f

08000710 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_ETH_Init+0x78>)
 8000716:	4a1d      	ldr	r2, [pc, #116]	; (800078c <MX_ETH_Init+0x7c>)
 8000718:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800071a:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_ETH_Init+0x78>)
 800071c:	2201      	movs	r2, #1
 800071e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <MX_ETH_Init+0x78>)
 8000722:	2200      	movs	r2, #0
 8000724:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_ETH_Init+0x78>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_ETH_Init+0x78>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	3301      	adds	r3, #1
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_ETH_Init+0x78>)
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	3302      	adds	r3, #2
 800073e:	22e1      	movs	r2, #225	; 0xe1
 8000740:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_ETH_Init+0x78>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	3303      	adds	r3, #3
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_ETH_Init+0x78>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	3304      	adds	r3, #4
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_ETH_Init+0x78>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	3305      	adds	r3, #5
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_ETH_Init+0x78>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_ETH_Init+0x78>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_ETH_Init+0x78>)
 800076e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000772:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_ETH_Init+0x78>)
 8000776:	f001 f939 	bl	80019ec <HAL_ETH_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000780:	f000 fad8 	bl	8000d34 <Error_Handler>
  }

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000050 	.word	0x20000050
 800078c:	40028000 	.word	0x40028000

08000790 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08e      	sub	sp, #56	; 0x38
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a4e      	ldr	r2, [pc, #312]	; (80008e8 <HAL_ETH_MspInit+0x158>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	f040 8096 	bne.w	80008e0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80007b4:	4b4d      	ldr	r3, [pc, #308]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	4a4c      	ldr	r2, [pc, #304]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 80007ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007be:	6313      	str	r3, [r2, #48]	; 0x30
 80007c0:	4b4a      	ldr	r3, [pc, #296]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007c8:	623b      	str	r3, [r7, #32]
 80007ca:	6a3b      	ldr	r3, [r7, #32]
 80007cc:	4b47      	ldr	r3, [pc, #284]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	4a46      	ldr	r2, [pc, #280]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 80007d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007d6:	6313      	str	r3, [r2, #48]	; 0x30
 80007d8:	4b44      	ldr	r3, [pc, #272]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80007e0:	61fb      	str	r3, [r7, #28]
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	4b41      	ldr	r3, [pc, #260]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	4a40      	ldr	r2, [pc, #256]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 80007ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80007ee:	6313      	str	r3, [r2, #48]	; 0x30
 80007f0:	4b3e      	ldr	r3, [pc, #248]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 80007f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80007f8:	61bb      	str	r3, [r7, #24]
 80007fa:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fc:	4b3b      	ldr	r3, [pc, #236]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 80007fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000800:	4a3a      	ldr	r2, [pc, #232]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 8000802:	f043 0304 	orr.w	r3, r3, #4
 8000806:	6313      	str	r3, [r2, #48]	; 0x30
 8000808:	4b38      	ldr	r3, [pc, #224]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 800080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080c:	f003 0304 	and.w	r3, r3, #4
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b35      	ldr	r3, [pc, #212]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 8000816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000818:	4a34      	ldr	r2, [pc, #208]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	6313      	str	r3, [r2, #48]	; 0x30
 8000820:	4b32      	ldr	r3, [pc, #200]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 8000822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082c:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 800082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000830:	4a2e      	ldr	r2, [pc, #184]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 8000832:	f043 0302 	orr.w	r3, r3, #2
 8000836:	6313      	str	r3, [r2, #48]	; 0x30
 8000838:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 800083a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083c:	f003 0302 	and.w	r3, r3, #2
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000844:	4b29      	ldr	r3, [pc, #164]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 8000846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000848:	4a28      	ldr	r2, [pc, #160]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 800084a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800084e:	6313      	str	r3, [r2, #48]	; 0x30
 8000850:	4b26      	ldr	r3, [pc, #152]	; (80008ec <HAL_ETH_MspInit+0x15c>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800085c:	2332      	movs	r3, #50	; 0x32
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000868:	2303      	movs	r3, #3
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800086c:	230b      	movs	r3, #11
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000874:	4619      	mov	r1, r3
 8000876:	481e      	ldr	r0, [pc, #120]	; (80008f0 <HAL_ETH_MspInit+0x160>)
 8000878:	f001 fd24 	bl	80022c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800087c:	2386      	movs	r3, #134	; 0x86
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000888:	2303      	movs	r3, #3
 800088a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800088c:	230b      	movs	r3, #11
 800088e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000894:	4619      	mov	r1, r3
 8000896:	4817      	ldr	r0, [pc, #92]	; (80008f4 <HAL_ETH_MspInit+0x164>)
 8000898:	f001 fd14 	bl	80022c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800089c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ae:	230b      	movs	r3, #11
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	4619      	mov	r1, r3
 80008b8:	480f      	ldr	r0, [pc, #60]	; (80008f8 <HAL_ETH_MspInit+0x168>)
 80008ba:	f001 fd03 	bl	80022c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008d0:	230b      	movs	r3, #11
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d8:	4619      	mov	r1, r3
 80008da:	4808      	ldr	r0, [pc, #32]	; (80008fc <HAL_ETH_MspInit+0x16c>)
 80008dc:	f001 fcf2 	bl	80022c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80008e0:	bf00      	nop
 80008e2:	3738      	adds	r7, #56	; 0x38
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40028000 	.word	0x40028000
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020800 	.word	0x40020800
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40020400 	.word	0x40020400
 80008fc:	40021800 	.word	0x40021800

08000900 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08e      	sub	sp, #56	; 0x38
 8000904:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b83      	ldr	r3, [pc, #524]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a82      	ldr	r2, [pc, #520]	; (8000b24 <MX_GPIO_Init+0x224>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b80      	ldr	r3, [pc, #512]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	623b      	str	r3, [r7, #32]
 800092c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	4b7d      	ldr	r3, [pc, #500]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a7c      	ldr	r2, [pc, #496]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b7a      	ldr	r3, [pc, #488]	; (8000b24 <MX_GPIO_Init+0x224>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000942:	61fb      	str	r3, [r7, #28]
 8000944:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b77      	ldr	r3, [pc, #476]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a76      	ldr	r2, [pc, #472]	; (8000b24 <MX_GPIO_Init+0x224>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b74      	ldr	r3, [pc, #464]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
 800095c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	4b71      	ldr	r3, [pc, #452]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a70      	ldr	r2, [pc, #448]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b6e      	ldr	r3, [pc, #440]	; (8000b24 <MX_GPIO_Init+0x224>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000976:	4b6b      	ldr	r3, [pc, #428]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a6a      	ldr	r2, [pc, #424]	; (8000b24 <MX_GPIO_Init+0x224>)
 800097c:	f043 0320 	orr.w	r3, r3, #32
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b68      	ldr	r3, [pc, #416]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098e:	4b65      	ldr	r3, [pc, #404]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a64      	ldr	r2, [pc, #400]	; (8000b24 <MX_GPIO_Init+0x224>)
 8000994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b62      	ldr	r3, [pc, #392]	; (8000b24 <MX_GPIO_Init+0x224>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a6:	4b5f      	ldr	r3, [pc, #380]	; (8000b24 <MX_GPIO_Init+0x224>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a5e      	ldr	r2, [pc, #376]	; (8000b24 <MX_GPIO_Init+0x224>)
 80009ac:	f043 0310 	orr.w	r3, r3, #16
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b5c      	ldr	r3, [pc, #368]	; (8000b24 <MX_GPIO_Init+0x224>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0310 	and.w	r3, r3, #16
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	4b59      	ldr	r3, [pc, #356]	; (8000b24 <MX_GPIO_Init+0x224>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a58      	ldr	r2, [pc, #352]	; (8000b24 <MX_GPIO_Init+0x224>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b56      	ldr	r3, [pc, #344]	; (8000b24 <MX_GPIO_Init+0x224>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f244 0181 	movw	r1, #16513	; 0x4081
 80009dc:	4852      	ldr	r0, [pc, #328]	; (8000b28 <MX_GPIO_Init+0x228>)
 80009de:	f001 fe33 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ALARM_Pin|USB_PowerSwitchOn_Pin|CYLINDER_1F_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f240 2141 	movw	r1, #577	; 0x241
 80009e8:	4850      	ldr	r0, [pc, #320]	; (8000b2c <MX_GPIO_Init+0x22c>)
 80009ea:	f001 fe2d 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MOTOR_1_Pin|MOTOR_2_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80009f4:	484e      	ldr	r0, [pc, #312]	; (8000b30 <MX_GPIO_Init+0x230>)
 80009f6:	f001 fe27 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CYLINDER_6R_Pin|CYLINDER_6F_Pin|CYLINDER_5R_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000a00:	484c      	ldr	r0, [pc, #304]	; (8000b34 <MX_GPIO_Init+0x234>)
 8000a02:	f001 fe21 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CYLINDER_5F_Pin|CYLINDER_4R_Pin|CYLINDER_4F_Pin|CYLINDER_3R_Pin 
 8000a06:	2200      	movs	r2, #0
 8000a08:	21ff      	movs	r1, #255	; 0xff
 8000a0a:	484b      	ldr	r0, [pc, #300]	; (8000b38 <MX_GPIO_Init+0x238>)
 8000a0c:	f001 fe1c 	bl	8002648 <HAL_GPIO_WritePin>
                          |CYLINDER_3F_Pin|CYLINDER_2R_Pin|CYLINDER_2F_Pin|CYLINDER_1R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a10:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a26:	4619      	mov	r1, r3
 8000a28:	483f      	ldr	r0, [pc, #252]	; (8000b28 <MX_GPIO_Init+0x228>)
 8000a2a:	f001 fc4b 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = EMERGENCY_STOP_Pin|AUTOMATIC_MODE_Pin|MANUAL_MODE_Pin;
 8000a2e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a34:	4b41      	ldr	r3, [pc, #260]	; (8000b3c <MX_GPIO_Init+0x23c>)
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a40:	4619      	mov	r1, r3
 8000a42:	483f      	ldr	r0, [pc, #252]	; (8000b40 <MX_GPIO_Init+0x240>)
 8000a44:	f001 fc3e 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ALARM_Pin|USB_PowerSwitchOn_Pin|CYLINDER_1F_Pin;
 8000a48:	f240 2341 	movw	r3, #577	; 0x241
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4832      	ldr	r0, [pc, #200]	; (8000b2c <MX_GPIO_Init+0x22c>)
 8000a62:	f001 fc2f 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = MOTOR_1_Pin|MOTOR_2_Pin;
 8000a66:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	482c      	ldr	r0, [pc, #176]	; (8000b30 <MX_GPIO_Init+0x230>)
 8000a80:	f001 fc20 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin */
  GPIO_InitStruct.Pin = PEDAL_A1_Pin|PEDAL_A2_Pin|PEDAL_B1_Pin|PEDAL_B2_Pin 
 8000a84:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
                          |PEDAL_C1_Pin|PEDAL_C2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	4825      	ldr	r0, [pc, #148]	; (8000b30 <MX_GPIO_Init+0x230>)
 8000a9a:	f001 fc13 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PEDAL_F2_Pin|PEDAL_F1_Pin|PEDAL_E2_Pin|PEDAL_E1_Pin;
 8000a9e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4821      	ldr	r0, [pc, #132]	; (8000b38 <MX_GPIO_Init+0x238>)
 8000ab4:	f001 fc06 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = PEDAL_D2_Pin|PEDAL_D1_Pin|USB_OverCurrent_Pin;
 8000ab8:	2398      	movs	r3, #152	; 0x98
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4818      	ldr	r0, [pc, #96]	; (8000b2c <MX_GPIO_Init+0x22c>)
 8000acc:	f001 fbfa 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CYLINDER_6R_Pin|CYLINDER_6F_Pin|CYLINDER_5R_Pin;
 8000ad0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4812      	ldr	r0, [pc, #72]	; (8000b34 <MX_GPIO_Init+0x234>)
 8000aea:	f001 fbeb 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CYLINDER_5F_Pin|CYLINDER_4R_Pin|CYLINDER_4F_Pin|CYLINDER_3R_Pin 
 8000aee:	23ff      	movs	r3, #255	; 0xff
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
                          |CYLINDER_3F_Pin|CYLINDER_2R_Pin|CYLINDER_2F_Pin|CYLINDER_1R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	4619      	mov	r1, r3
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <MX_GPIO_Init+0x238>)
 8000b06:	f001 fbdd 	bl	80022c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2028      	movs	r0, #40	; 0x28
 8000b10:	f000 ff35 	bl	800197e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b14:	2028      	movs	r0, #40	; 0x28
 8000b16:	f000 ff4e 	bl	80019b6 <HAL_NVIC_EnableIRQ>

}
 8000b1a:	bf00      	nop
 8000b1c:	3738      	adds	r7, #56	; 0x38
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020400 	.word	0x40020400
 8000b2c:	40021800 	.word	0x40021800
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40020800 	.word	0x40020800
 8000b38:	40020c00 	.word	0x40020c00
 8000b3c:	10110000 	.word	0x10110000
 8000b40:	40021400 	.word	0x40021400

08000b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b48:	f000 fdbf 	bl	80016ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4c:	f000 f85e 	bl	8000c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b50:	f7ff fed6 	bl	8000900 <MX_GPIO_Init>
  MX_ETH_Init();
 8000b54:	f7ff fddc 	bl	8000710 <MX_ETH_Init>
  MX_TIM1_Init();
 8000b58:	f000 fa0a 	bl	8000f70 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b5c:	f000 fa5a 	bl	8001014 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b60:	f000 faa4 	bl	80010ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b64:	f000 faf0 	bl	8001148 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000b68:	f000 fb3c 	bl	80011e4 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8000b6c:	f000 fc86 	bl	800147c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b70:	f000 fcf8 	bl	8001564 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8000b74:	f000 fb84 	bl	8001280 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
 while(1)
 {
	 if(HAL_GPIO_ReadPin(PEDAL_A2_GPIO_Port, PEDAL_A2_Pin))
 8000b78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b7c:	4821      	ldr	r0, [pc, #132]	; (8000c04 <main+0xc0>)
 8000b7e:	f001 fd4b 	bl	8002618 <HAL_GPIO_ReadPin>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d0f7      	beq.n	8000b78 <main+0x34>
	 {
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	481e      	ldr	r0, [pc, #120]	; (8000c08 <main+0xc4>)
 8000b8e:	f001 fd5b 	bl	8002648 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2180      	movs	r1, #128	; 0x80
 8000b96:	481c      	ldr	r0, [pc, #112]	; (8000c08 <main+0xc4>)
 8000b98:	f001 fd56 	bl	8002648 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba2:	4819      	ldr	r0, [pc, #100]	; (8000c08 <main+0xc4>)
 8000ba4:	f001 fd50 	bl	8002648 <HAL_GPIO_WritePin>
	  HAL_Delay(5000);
 8000ba8:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bac:	f000 fdea 	bl	8001784 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bb6:	4814      	ldr	r0, [pc, #80]	; (8000c08 <main+0xc4>)
 8000bb8:	f001 fd46 	bl	8002648 <HAL_GPIO_WritePin>
	  HAL_Delay(20000);
 8000bbc:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000bc0:	f000 fde0 	bl	8001784 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	480f      	ldr	r0, [pc, #60]	; (8000c08 <main+0xc4>)
 8000bca:	f001 fd3d 	bl	8002648 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2180      	movs	r1, #128	; 0x80
 8000bd2:	480d      	ldr	r0, [pc, #52]	; (8000c08 <main+0xc4>)
 8000bd4:	f001 fd38 	bl	8002648 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bde:	480a      	ldr	r0, [pc, #40]	; (8000c08 <main+0xc4>)
 8000be0:	f001 fd32 	bl	8002648 <HAL_GPIO_WritePin>
	  HAL_Delay(5000);
 8000be4:	f241 3088 	movw	r0, #5000	; 0x1388
 8000be8:	f000 fdcc 	bl	8001784 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <main+0xc4>)
 8000bf4:	f001 fd28 	bl	8002648 <HAL_GPIO_WritePin>
	  HAL_Delay(20000);
 8000bf8:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000bfc:	f000 fdc2 	bl	8001784 <HAL_Delay>
	 if(HAL_GPIO_ReadPin(PEDAL_A2_GPIO_Port, PEDAL_A2_Pin))
 8000c00:	e7ba      	b.n	8000b78 <main+0x34>
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000
 8000c08:	40020400 	.word	0x40020400

08000c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b0b4      	sub	sp, #208	; 0xd0
 8000c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c16:	2230      	movs	r2, #48	; 0x30
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f004 f9f2 	bl	8005004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c20:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	2284      	movs	r2, #132	; 0x84
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f004 f9e3 	bl	8005004 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	4b3a      	ldr	r3, [pc, #232]	; (8000d28 <SystemClock_Config+0x11c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a39      	ldr	r2, [pc, #228]	; (8000d28 <SystemClock_Config+0x11c>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b37      	ldr	r3, [pc, #220]	; (8000d28 <SystemClock_Config+0x11c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c56:	4b35      	ldr	r3, [pc, #212]	; (8000d2c <SystemClock_Config+0x120>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a34      	ldr	r2, [pc, #208]	; (8000d2c <SystemClock_Config+0x120>)
 8000c5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <SystemClock_Config+0x120>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c74:	2301      	movs	r3, #1
 8000c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7a:	2310      	movs	r3, #16
 8000c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c80:	2302      	movs	r3, #2
 8000c82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000c92:	23d8      	movs	r3, #216	; 0xd8
 8000c94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c9e:	2309      	movs	r3, #9
 8000ca0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f001 fe8b 	bl	80029c4 <HAL_RCC_OscConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000cb4:	f000 f83e 	bl	8000d34 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cb8:	f001 fe34 	bl	8002924 <HAL_PWREx_EnableOverDrive>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000cc2:	f000 f837 	bl	8000d34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc6:	230f      	movs	r3, #15
 8000cc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cd8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ce8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000cec:	2107      	movs	r1, #7
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f002 f8d8 	bl	8002ea4 <HAL_RCC_ClockConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000cfa:	f000 f81b 	bl	8000d34 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <SystemClock_Config+0x124>)
 8000d00:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	4618      	mov	r0, r3
 8000d12:	f002 fabb 	bl	800328c <HAL_RCCEx_PeriphCLKConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000d1c:	f000 f80a 	bl	8000d34 <Error_Handler>
  }
}
 8000d20:	bf00      	nop
 8000d22:	37d0      	adds	r7, #208	; 0xd0
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40007000 	.word	0x40007000
 8000d30:	00200100 	.word	0x00200100

08000d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_MspInit+0x44>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <HAL_MspInit+0x44>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_MspInit+0x44>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_MspInit+0x44>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_MspInit+0x44>)
 8000d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_MspInit+0x44>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <MemManage_Handler+0x4>

08000da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de0:	f000 fcb0 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000dee:	f002 fe66 	bl	8003abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000198 	.word	0x20000198

08000dfc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e02:	f002 fe5c 	bl	8003abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000198 	.word	0x20000198

08000e10 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000e16:	f002 fe52 	bl	8003abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000198 	.word	0x20000198

08000e24 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <TIM1_CC_IRQHandler+0x10>)
 8000e2a:	f002 fe48 	bl	8003abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000198 	.word	0x20000198

08000e38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <TIM2_IRQHandler+0x10>)
 8000e3e:	f002 fe3e 	bl	8003abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200001d8 	.word	0x200001d8

08000e4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <TIM3_IRQHandler+0x10>)
 8000e52:	f002 fe34 	bl	8003abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000118 	.word	0x20000118

08000e60 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <TIM4_IRQHandler+0x10>)
 8000e66:	f002 fe2a 	bl	8003abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000098 	.word	0x20000098

08000e74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e7c:	f001 fbfe 	bl	800267c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000e80:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e84:	f001 fbfa 	bl	800267c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000e88:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000e8c:	f001 fbf6 	bl	800267c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <TIM5_IRQHandler+0x10>)
 8000e9a:	f002 fe10 	bl	8003abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200000d8 	.word	0x200000d8

08000ea8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <TIM6_DAC_IRQHandler+0x10>)
 8000eae:	f002 fe06 	bl	8003abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000158 	.word	0x20000158

08000ebc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EMERGENCY_STOP_Pin)
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ecc:	d103      	bne.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		Machine_Mode=EMERGENCY_STOP;
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x44>)
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == MANUAL_MODE_Pin)
	{
		Machine_Mode=MANUAL;
	}
}
 8000ed4:	e00e      	b.n	8000ef4 <HAL_GPIO_EXTI_Callback+0x38>
	else if(GPIO_Pin == AUTOMATIC_MODE_Pin)
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000edc:	d103      	bne.n	8000ee6 <HAL_GPIO_EXTI_Callback+0x2a>
		Machine_Mode=AUTOMATIC;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x44>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
}
 8000ee4:	e006      	b.n	8000ef4 <HAL_GPIO_EXTI_Callback+0x38>
	else if(GPIO_Pin == MANUAL_MODE_Pin)
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000eec:	d102      	bne.n	8000ef4 <HAL_GPIO_EXTI_Callback+0x38>
		Machine_Mode=MANUAL;
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x44>)
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	701a      	strb	r2, [r3, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	20000000 	.word	0x20000000

08000f04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <SystemInit+0x5c>)
 8000f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0e:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <SystemInit+0x5c>)
 8000f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <SystemInit+0x60>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a11      	ldr	r2, [pc, #68]	; (8000f64 <SystemInit+0x60>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <SystemInit+0x60>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <SystemInit+0x60>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	490d      	ldr	r1, [pc, #52]	; (8000f64 <SystemInit+0x60>)
 8000f30:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <SystemInit+0x64>)
 8000f32:	4013      	ands	r3, r2
 8000f34:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <SystemInit+0x60>)
 8000f38:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <SystemInit+0x68>)
 8000f3a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <SystemInit+0x60>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <SystemInit+0x60>)
 8000f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <SystemInit+0x60>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <SystemInit+0x5c>)
 8000f50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f54:	609a      	str	r2, [r3, #8]
#endif
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00
 8000f64:	40023800 	.word	0x40023800
 8000f68:	fef6ffff 	.word	0xfef6ffff
 8000f6c:	24003010 	.word	0x24003010

08000f70 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	; (800100c <MX_TIM1_Init+0x9c>)
 8000f90:	4a1f      	ldr	r2, [pc, #124]	; (8001010 <MX_TIM1_Init+0xa0>)
 8000f92:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f94:	4b1d      	ldr	r3, [pc, #116]	; (800100c <MX_TIM1_Init+0x9c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <MX_TIM1_Init+0x9c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_TIM1_Init+0x9c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa6:	4b19      	ldr	r3, [pc, #100]	; (800100c <MX_TIM1_Init+0x9c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_TIM1_Init+0x9c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_TIM1_Init+0x9c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fb8:	4814      	ldr	r0, [pc, #80]	; (800100c <MX_TIM1_Init+0x9c>)
 8000fba:	f002 fd55 	bl	8003a68 <HAL_TIM_Base_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000fc4:	f7ff feb6 	bl	8000d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fcc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480d      	ldr	r0, [pc, #52]	; (800100c <MX_TIM1_Init+0x9c>)
 8000fd6:	f002 fe91 	bl	8003cfc <HAL_TIM_ConfigClockSource>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000fe0:	f7ff fea8 	bl	8000d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_TIM1_Init+0x9c>)
 8000ff6:	f003 f89d 	bl	8004134 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001000:	f7ff fe98 	bl	8000d34 <Error_Handler>
  }

}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000198 	.word	0x20000198
 8001010:	40010000 	.word	0x40010000

08001014 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001034:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001038:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800103a:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <MX_TIM2_Init+0x94>)
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_TIM2_Init+0x94>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001058:	4813      	ldr	r0, [pc, #76]	; (80010a8 <MX_TIM2_Init+0x94>)
 800105a:	f002 fd05 	bl	8003a68 <HAL_TIM_Base_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001064:	f7ff fe66 	bl	8000d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	4619      	mov	r1, r3
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001076:	f002 fe41 	bl	8003cfc <HAL_TIM_ConfigClockSource>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001080:	f7ff fe58 	bl	8000d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001092:	f003 f84f 	bl	8004134 <HAL_TIMEx_MasterConfigSynchronization>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800109c:	f7ff fe4a 	bl	8000d34 <Error_Handler>
  }

}
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200001d8 	.word	0x200001d8

080010ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_TIM3_Init+0x94>)
 80010cc:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <MX_TIM3_Init+0x98>)
 80010ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_TIM3_Init+0x94>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_TIM3_Init+0x94>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_TIM3_Init+0x94>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <MX_TIM3_Init+0x94>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_TIM3_Init+0x94>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010ee:	4814      	ldr	r0, [pc, #80]	; (8001140 <MX_TIM3_Init+0x94>)
 80010f0:	f002 fcba 	bl	8003a68 <HAL_TIM_Base_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80010fa:	f7ff fe1b 	bl	8000d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001102:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	4619      	mov	r1, r3
 800110a:	480d      	ldr	r0, [pc, #52]	; (8001140 <MX_TIM3_Init+0x94>)
 800110c:	f002 fdf6 	bl	8003cfc <HAL_TIM_ConfigClockSource>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001116:	f7ff fe0d 	bl	8000d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <MX_TIM3_Init+0x94>)
 8001128:	f003 f804 	bl	8004134 <HAL_TIMEx_MasterConfigSynchronization>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001132:	f7ff fdff 	bl	8000d34 <Error_Handler>
  }

}
 8001136:	bf00      	nop
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000118 	.word	0x20000118
 8001144:	40000400 	.word	0x40000400

08001148 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_TIM4_Init+0x94>)
 8001168:	4a1d      	ldr	r2, [pc, #116]	; (80011e0 <MX_TIM4_Init+0x98>)
 800116a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_TIM4_Init+0x94>)
 800116e:	2200      	movs	r2, #0
 8001170:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_TIM4_Init+0x94>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <MX_TIM4_Init+0x94>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_TIM4_Init+0x94>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <MX_TIM4_Init+0x94>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800118a:	4814      	ldr	r0, [pc, #80]	; (80011dc <MX_TIM4_Init+0x94>)
 800118c:	f002 fc6c 	bl	8003a68 <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001196:	f7ff fdcd 	bl	8000d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	4619      	mov	r1, r3
 80011a6:	480d      	ldr	r0, [pc, #52]	; (80011dc <MX_TIM4_Init+0x94>)
 80011a8:	f002 fda8 	bl	8003cfc <HAL_TIM_ConfigClockSource>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80011b2:	f7ff fdbf 	bl	8000d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	4619      	mov	r1, r3
 80011c2:	4806      	ldr	r0, [pc, #24]	; (80011dc <MX_TIM4_Init+0x94>)
 80011c4:	f002 ffb6 	bl	8004134 <HAL_TIMEx_MasterConfigSynchronization>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80011ce:	f7ff fdb1 	bl	8000d34 <Error_Handler>
  }

}
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000098 	.word	0x20000098
 80011e0:	40000800 	.word	0x40000800

080011e4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8001202:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <MX_TIM5_Init+0x94>)
 8001204:	4a1d      	ldr	r2, [pc, #116]	; (800127c <MX_TIM5_Init+0x98>)
 8001206:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_TIM5_Init+0x94>)
 800120a:	2200      	movs	r2, #0
 800120c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_TIM5_Init+0x94>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001214:	4b18      	ldr	r3, [pc, #96]	; (8001278 <MX_TIM5_Init+0x94>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_TIM5_Init+0x94>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <MX_TIM5_Init+0x94>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001226:	4814      	ldr	r0, [pc, #80]	; (8001278 <MX_TIM5_Init+0x94>)
 8001228:	f002 fc1e 	bl	8003a68 <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001232:	f7ff fd7f 	bl	8000d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	4619      	mov	r1, r3
 8001242:	480d      	ldr	r0, [pc, #52]	; (8001278 <MX_TIM5_Init+0x94>)
 8001244:	f002 fd5a 	bl	8003cfc <HAL_TIM_ConfigClockSource>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800124e:	f7ff fd71 	bl	8000d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <MX_TIM5_Init+0x94>)
 8001260:	f002 ff68 	bl	8004134 <HAL_TIMEx_MasterConfigSynchronization>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800126a:	f7ff fd63 	bl	8000d34 <Error_Handler>
  }

}
 800126e:	bf00      	nop
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200000d8 	.word	0x200000d8
 800127c:	40000c00 	.word	0x40000c00

08001280 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_TIM6_Init+0x64>)
 8001292:	4a15      	ldr	r2, [pc, #84]	; (80012e8 <MX_TIM6_Init+0x68>)
 8001294:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <MX_TIM6_Init+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_TIM6_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <MX_TIM6_Init+0x64>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_TIM6_Init+0x64>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012ae:	480d      	ldr	r0, [pc, #52]	; (80012e4 <MX_TIM6_Init+0x64>)
 80012b0:	f002 fbda 	bl	8003a68 <HAL_TIM_Base_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80012ba:	f7ff fd3b 	bl	8000d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <MX_TIM6_Init+0x64>)
 80012cc:	f002 ff32 	bl	8004134 <HAL_TIMEx_MasterConfigSynchronization>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80012d6:	f7ff fd2d 	bl	8000d34 <Error_Handler>
  }

}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000158 	.word	0x20000158
 80012e8:	40001000 	.word	0x40001000

080012ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a5a      	ldr	r2, [pc, #360]	; (8001464 <HAL_TIM_Base_MspInit+0x178>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d12c      	bne.n	8001358 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012fe:	4b5a      	ldr	r3, [pc, #360]	; (8001468 <HAL_TIM_Base_MspInit+0x17c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a59      	ldr	r2, [pc, #356]	; (8001468 <HAL_TIM_Base_MspInit+0x17c>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b57      	ldr	r3, [pc, #348]	; (8001468 <HAL_TIM_Base_MspInit+0x17c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	2018      	movs	r0, #24
 800131c:	f000 fb2f 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001320:	2018      	movs	r0, #24
 8001322:	f000 fb48 	bl	80019b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	2019      	movs	r0, #25
 800132c:	f000 fb27 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001330:	2019      	movs	r0, #25
 8001332:	f000 fb40 	bl	80019b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	201a      	movs	r0, #26
 800133c:	f000 fb1f 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001340:	201a      	movs	r0, #26
 8001342:	f000 fb38 	bl	80019b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	201b      	movs	r0, #27
 800134c:	f000 fb17 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001350:	201b      	movs	r0, #27
 8001352:	f000 fb30 	bl	80019b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001356:	e080      	b.n	800145a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001360:	d114      	bne.n	800138c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001362:	4b41      	ldr	r3, [pc, #260]	; (8001468 <HAL_TIM_Base_MspInit+0x17c>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a40      	ldr	r2, [pc, #256]	; (8001468 <HAL_TIM_Base_MspInit+0x17c>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b3e      	ldr	r3, [pc, #248]	; (8001468 <HAL_TIM_Base_MspInit+0x17c>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	201c      	movs	r0, #28
 8001380:	f000 fafd 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001384:	201c      	movs	r0, #28
 8001386:	f000 fb16 	bl	80019b6 <HAL_NVIC_EnableIRQ>
}
 800138a:	e066      	b.n	800145a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM3)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a36      	ldr	r2, [pc, #216]	; (800146c <HAL_TIM_Base_MspInit+0x180>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d114      	bne.n	80013c0 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001396:	4b34      	ldr	r3, [pc, #208]	; (8001468 <HAL_TIM_Base_MspInit+0x17c>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	4a33      	ldr	r2, [pc, #204]	; (8001468 <HAL_TIM_Base_MspInit+0x17c>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6413      	str	r3, [r2, #64]	; 0x40
 80013a2:	4b31      	ldr	r3, [pc, #196]	; (8001468 <HAL_TIM_Base_MspInit+0x17c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	201d      	movs	r0, #29
 80013b4:	f000 fae3 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013b8:	201d      	movs	r0, #29
 80013ba:	f000 fafc 	bl	80019b6 <HAL_NVIC_EnableIRQ>
}
 80013be:	e04c      	b.n	800145a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM4)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a2a      	ldr	r2, [pc, #168]	; (8001470 <HAL_TIM_Base_MspInit+0x184>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d114      	bne.n	80013f4 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013ca:	4b27      	ldr	r3, [pc, #156]	; (8001468 <HAL_TIM_Base_MspInit+0x17c>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a26      	ldr	r2, [pc, #152]	; (8001468 <HAL_TIM_Base_MspInit+0x17c>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <HAL_TIM_Base_MspInit+0x17c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	201e      	movs	r0, #30
 80013e8:	f000 fac9 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013ec:	201e      	movs	r0, #30
 80013ee:	f000 fae2 	bl	80019b6 <HAL_NVIC_EnableIRQ>
}
 80013f2:	e032      	b.n	800145a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM5)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a1e      	ldr	r2, [pc, #120]	; (8001474 <HAL_TIM_Base_MspInit+0x188>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d114      	bne.n	8001428 <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <HAL_TIM_Base_MspInit+0x17c>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a19      	ldr	r2, [pc, #100]	; (8001468 <HAL_TIM_Base_MspInit+0x17c>)
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_TIM_Base_MspInit+0x17c>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	2032      	movs	r0, #50	; 0x32
 800141c:	f000 faaf 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001420:	2032      	movs	r0, #50	; 0x32
 8001422:	f000 fac8 	bl	80019b6 <HAL_NVIC_EnableIRQ>
}
 8001426:	e018      	b.n	800145a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM6)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a12      	ldr	r2, [pc, #72]	; (8001478 <HAL_TIM_Base_MspInit+0x18c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d113      	bne.n	800145a <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <HAL_TIM_Base_MspInit+0x17c>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <HAL_TIM_Base_MspInit+0x17c>)
 8001438:	f043 0310 	orr.w	r3, r3, #16
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_TIM_Base_MspInit+0x17c>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	2036      	movs	r0, #54	; 0x36
 8001450:	f000 fa95 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001454:	2036      	movs	r0, #54	; 0x36
 8001456:	f000 faae 	bl	80019b6 <HAL_NVIC_EnableIRQ>
}
 800145a:	bf00      	nop
 800145c:	3720      	adds	r7, #32
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40010000 	.word	0x40010000
 8001468:	40023800 	.word	0x40023800
 800146c:	40000400 	.word	0x40000400
 8001470:	40000800 	.word	0x40000800
 8001474:	40000c00 	.word	0x40000c00
 8001478:	40001000 	.word	0x40001000

0800147c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_USART3_UART_Init+0x58>)
 8001482:	4a15      	ldr	r2, [pc, #84]	; (80014d8 <MX_USART3_UART_Init+0x5c>)
 8001484:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_USART3_UART_Init+0x58>)
 8001488:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800148c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_USART3_UART_Init+0x58>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_USART3_UART_Init+0x58>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_USART3_UART_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_USART3_UART_Init+0x58>)
 80014a2:	220c      	movs	r2, #12
 80014a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_USART3_UART_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_USART3_UART_Init+0x58>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <MX_USART3_UART_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_USART3_UART_Init+0x58>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_USART3_UART_Init+0x58>)
 80014c0:	f002 feb2 	bl	8004228 <HAL_UART_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80014ca:	f7ff fc33 	bl	8000d34 <Error_Handler>
  }

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000218 	.word	0x20000218
 80014d8:	40004800 	.word	0x40004800

080014dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a17      	ldr	r2, [pc, #92]	; (8001558 <HAL_UART_MspInit+0x7c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d128      	bne.n	8001550 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <HAL_UART_MspInit+0x80>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a16      	ldr	r2, [pc, #88]	; (800155c <HAL_UART_MspInit+0x80>)
 8001504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <HAL_UART_MspInit+0x80>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_UART_MspInit+0x80>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <HAL_UART_MspInit+0x80>)
 800151c:	f043 0308 	orr.w	r3, r3, #8
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_UART_MspInit+0x80>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800152e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001540:	2307      	movs	r3, #7
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <HAL_UART_MspInit+0x84>)
 800154c:	f000 feba 	bl	80022c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001550:	bf00      	nop
 8001552:	3728      	adds	r7, #40	; 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40004800 	.word	0x40004800
 800155c:	40023800 	.word	0x40023800
 8001560:	40020c00 	.word	0x40020c00

08001564 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800156a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800156e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001572:	2206      	movs	r2, #6
 8001574:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001578:	2202      	movs	r2, #2
 800157a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001584:	2202      	movs	r2, #2
 8001586:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800158a:	2201      	movs	r2, #1
 800158c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001596:	2200      	movs	r2, #0
 8001598:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800159c:	2201      	movs	r2, #1
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a8:	f001 f880 	bl	80026ac <HAL_PCD_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80015b2:	f7ff fbbf 	bl	8000d34 <Error_Handler>
  }

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000298 	.word	0x20000298

080015c0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015e0:	d141      	bne.n	8001666 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <HAL_PCD_MspInit+0xb0>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a22      	ldr	r2, [pc, #136]	; (8001670 <HAL_PCD_MspInit+0xb0>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b20      	ldr	r3, [pc, #128]	; (8001670 <HAL_PCD_MspInit+0xb0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80015fa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80015fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001608:	2303      	movs	r3, #3
 800160a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800160c:	230a      	movs	r3, #10
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	4817      	ldr	r0, [pc, #92]	; (8001674 <HAL_PCD_MspInit+0xb4>)
 8001618:	f000 fe54 	bl	80022c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800161c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	4810      	ldr	r0, [pc, #64]	; (8001674 <HAL_PCD_MspInit+0xb4>)
 8001632:	f000 fe47 	bl	80022c4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_PCD_MspInit+0xb0>)
 8001638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163a:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <HAL_PCD_MspInit+0xb0>)
 800163c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001640:	6353      	str	r3, [r2, #52]	; 0x34
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_PCD_MspInit+0xb0>)
 8001644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_PCD_MspInit+0xb0>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	4a07      	ldr	r2, [pc, #28]	; (8001670 <HAL_PCD_MspInit+0xb0>)
 8001654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001658:	6453      	str	r3, [r2, #68]	; 0x44
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_PCD_MspInit+0xb0>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	; 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40020000 	.word	0x40020000

08001678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800167c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800167e:	e003      	b.n	8001688 <LoopCopyDataInit>

08001680 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001682:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001684:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001686:	3104      	adds	r1, #4

08001688 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001688:	480b      	ldr	r0, [pc, #44]	; (80016b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800168c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800168e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001690:	d3f6      	bcc.n	8001680 <CopyDataInit>
  ldr  r2, =_sbss
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001694:	e002      	b.n	800169c <LoopFillZerobss>

08001696 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001696:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001698:	f842 3b04 	str.w	r3, [r2], #4

0800169c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800169e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016a0:	d3f9      	bcc.n	8001696 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016a2:	f7ff fc2f 	bl	8000f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016a6:	f003 fc89 	bl	8004fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016aa:	f7ff fa4b 	bl	8000b44 <main>
  bx  lr    
 80016ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016b0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80016b4:	08005054 	.word	0x08005054
  ldr  r0, =_sdata
 80016b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016bc:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80016c0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80016c4:	200006a0 	.word	0x200006a0

080016c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c8:	e7fe      	b.n	80016c8 <ADC_IRQHandler>

080016ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ce:	2003      	movs	r0, #3
 80016d0:	f000 f94a 	bl	8001968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d4:	2000      	movs	r0, #0
 80016d6:	f000 f805 	bl	80016e4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80016da:	f7ff fb33 	bl	8000d44 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x54>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x58>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f965 	bl	80019d2 <HAL_SYSTICK_Config>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e00e      	b.n	8001730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b0f      	cmp	r3, #15
 8001716:	d80a      	bhi.n	800172e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001718:	2200      	movs	r2, #0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f000 f92d 	bl	800197e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001724:	4a06      	ldr	r2, [pc, #24]	; (8001740 <HAL_InitTick+0x5c>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000004 	.word	0x20000004
 800173c:	2000000c 	.word	0x2000000c
 8001740:	20000008 	.word	0x20000008

08001744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x20>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x24>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <HAL_IncTick+0x24>)
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	2000000c 	.word	0x2000000c
 8001768:	2000069c 	.word	0x2000069c

0800176c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <HAL_GetTick+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	2000069c 	.word	0x2000069c

08001784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800178c:	f7ff ffee 	bl	800176c <HAL_GetTick>
 8001790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179c:	d005      	beq.n	80017aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_Delay+0x40>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017aa:	bf00      	nop
 80017ac:	f7ff ffde 	bl	800176c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d8f7      	bhi.n	80017ac <HAL_Delay+0x28>
  {
  }
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2000000c 	.word	0x2000000c

080017c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <__NVIC_SetPriorityGrouping+0x40>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <__NVIC_SetPriorityGrouping+0x40>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00
 800180c:	05fa0000 	.word	0x05fa0000

08001810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db0b      	blt.n	8001856 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4907      	ldr	r1, [pc, #28]	; (8001864 <__NVIC_EnableIRQ+0x38>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	2001      	movs	r0, #1
 800184e:	fa00 f202 	lsl.w	r2, r0, r2
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000e100 	.word	0xe000e100

08001868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	db0a      	blt.n	8001892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	490c      	ldr	r1, [pc, #48]	; (80018b4 <__NVIC_SetPriority+0x4c>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	440b      	add	r3, r1
 800188c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001890:	e00a      	b.n	80018a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4908      	ldr	r1, [pc, #32]	; (80018b8 <__NVIC_SetPriority+0x50>)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	3b04      	subs	r3, #4
 80018a0:	0112      	lsls	r2, r2, #4
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	440b      	add	r3, r1
 80018a6:	761a      	strb	r2, [r3, #24]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000e100 	.word	0xe000e100
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f1c3 0307 	rsb	r3, r3, #7
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	bf28      	it	cs
 80018da:	2304      	movcs	r3, #4
 80018dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3304      	adds	r3, #4
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d902      	bls.n	80018ec <NVIC_EncodePriority+0x30>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3b03      	subs	r3, #3
 80018ea:	e000      	b.n	80018ee <NVIC_EncodePriority+0x32>
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43da      	mvns	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	401a      	ands	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001904:	f04f 31ff 	mov.w	r1, #4294967295
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	43d9      	mvns	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	4313      	orrs	r3, r2
         );
}
 8001916:	4618      	mov	r0, r3
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001934:	d301      	bcc.n	800193a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001936:	2301      	movs	r3, #1
 8001938:	e00f      	b.n	800195a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <SysTick_Config+0x40>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001942:	210f      	movs	r1, #15
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	f7ff ff8e 	bl	8001868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <SysTick_Config+0x40>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001952:	4b04      	ldr	r3, [pc, #16]	; (8001964 <SysTick_Config+0x40>)
 8001954:	2207      	movs	r2, #7
 8001956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	e000e010 	.word	0xe000e010

08001968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff ff29 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001990:	f7ff ff3e 	bl	8001810 <__NVIC_GetPriorityGrouping>
 8001994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	6978      	ldr	r0, [r7, #20]
 800199c:	f7ff ff8e 	bl	80018bc <NVIC_EncodePriority>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff5d 	bl	8001868 <__NVIC_SetPriority>
}
 80019ae:	bf00      	nop
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff31 	bl	800182c <__NVIC_EnableIRQ>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ffa2 	bl	8001924 <SysTick_Config>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80019fc:	4ba9      	ldr	r3, [pc, #676]	; (8001ca4 <HAL_ETH_Init+0x2b8>)
 80019fe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001a04:	2300      	movs	r3, #0
 8001a06:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e183      	b.n	8001d1a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d106      	bne.n	8001a2c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7fe feb2 	bl	8000790 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2c:	4b9e      	ldr	r3, [pc, #632]	; (8001ca8 <HAL_ETH_Init+0x2bc>)
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	4a9d      	ldr	r2, [pc, #628]	; (8001ca8 <HAL_ETH_Init+0x2bc>)
 8001a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a36:	6453      	str	r3, [r2, #68]	; 0x44
 8001a38:	4b9b      	ldr	r3, [pc, #620]	; (8001ca8 <HAL_ETH_Init+0x2bc>)
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a44:	4b99      	ldr	r3, [pc, #612]	; (8001cac <HAL_ETH_Init+0x2c0>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	4a98      	ldr	r2, [pc, #608]	; (8001cac <HAL_ETH_Init+0x2c0>)
 8001a4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a4e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a50:	4b96      	ldr	r3, [pc, #600]	; (8001cac <HAL_ETH_Init+0x2c0>)
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	4994      	ldr	r1, [pc, #592]	; (8001cac <HAL_ETH_Init+0x2c0>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 0201 	orr.w	r2, r2, #1
 8001a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a74:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a76:	f7ff fe79 	bl	800176c <HAL_GetTick>
 8001a7a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001a7c:	e011      	b.n	8001aa2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001a7e:	f7ff fe75 	bl	800176c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a8c:	d909      	bls.n	8001aa2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2203      	movs	r2, #3
 8001a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e13b      	b.n	8001d1a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1e4      	bne.n	8001a7e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f023 031c 	bic.w	r3, r3, #28
 8001ac2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ac4:	f001 fbae 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 8001ac8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4a78      	ldr	r2, [pc, #480]	; (8001cb0 <HAL_ETH_Init+0x2c4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d908      	bls.n	8001ae4 <HAL_ETH_Init+0xf8>
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4a77      	ldr	r2, [pc, #476]	; (8001cb4 <HAL_ETH_Init+0x2c8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d804      	bhi.n	8001ae4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	f043 0308 	orr.w	r3, r3, #8
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	e027      	b.n	8001b34 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	4a73      	ldr	r2, [pc, #460]	; (8001cb4 <HAL_ETH_Init+0x2c8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d908      	bls.n	8001afe <HAL_ETH_Init+0x112>
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	4a72      	ldr	r2, [pc, #456]	; (8001cb8 <HAL_ETH_Init+0x2cc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d804      	bhi.n	8001afe <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f043 030c 	orr.w	r3, r3, #12
 8001afa:	61fb      	str	r3, [r7, #28]
 8001afc:	e01a      	b.n	8001b34 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4a6d      	ldr	r2, [pc, #436]	; (8001cb8 <HAL_ETH_Init+0x2cc>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d903      	bls.n	8001b0e <HAL_ETH_Init+0x122>
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4a6c      	ldr	r2, [pc, #432]	; (8001cbc <HAL_ETH_Init+0x2d0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d911      	bls.n	8001b32 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	4a6a      	ldr	r2, [pc, #424]	; (8001cbc <HAL_ETH_Init+0x2d0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d908      	bls.n	8001b28 <HAL_ETH_Init+0x13c>
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4a69      	ldr	r2, [pc, #420]	; (8001cc0 <HAL_ETH_Init+0x2d4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d804      	bhi.n	8001b28 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	e005      	b.n	8001b34 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f043 0310 	orr.w	r3, r3, #16
 8001b2e:	61fb      	str	r3, [r7, #28]
 8001b30:	e000      	b.n	8001b34 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001b32:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001b3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b40:	2100      	movs	r1, #0
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f956 	bl	8001df4 <HAL_ETH_WritePHYRegister>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00b      	beq.n	8001b66 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001b52:	6939      	ldr	r1, [r7, #16]
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f9b3 	bl	8001ec0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e0d9      	b.n	8001d1a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001b66:	20ff      	movs	r0, #255	; 0xff
 8001b68:	f7ff fe0c 	bl	8001784 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 80a7 	beq.w	8001cc4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b76:	f7ff fdf9 	bl	800176c <HAL_GetTick>
 8001b7a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	461a      	mov	r2, r3
 8001b82:	2101      	movs	r1, #1
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f8cd 	bl	8001d24 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001b8a:	f7ff fdef 	bl	800176c <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d90f      	bls.n	8001bbc <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001ba0:	6939      	ldr	r1, [r7, #16]
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f98c 	bl	8001ec0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e0ae      	b.n	8001d1a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0da      	beq.n	8001b7c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001bc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bca:	2100      	movs	r1, #0
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f911 	bl	8001df4 <HAL_ETH_WritePHYRegister>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00b      	beq.n	8001bf0 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001bdc:	6939      	ldr	r1, [r7, #16]
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f96e 	bl	8001ec0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001bec:	2301      	movs	r3, #1
 8001bee:	e094      	b.n	8001d1a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bf0:	f7ff fdbc 	bl	800176c <HAL_GetTick>
 8001bf4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f890 	bl	8001d24 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001c04:	f7ff fdb2 	bl	800176c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d90f      	bls.n	8001c36 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001c1a:	6939      	ldr	r1, [r7, #16]
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f94f 	bl	8001ec0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e071      	b.n	8001d1a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f003 0320 	and.w	r3, r3, #32
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0da      	beq.n	8001bf6 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001c40:	f107 030c 	add.w	r3, r7, #12
 8001c44:	461a      	mov	r2, r3
 8001c46:	211f      	movs	r1, #31
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f86b 	bl	8001d24 <HAL_ETH_ReadPHYRegister>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00b      	beq.n	8001c6c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c58:	6939      	ldr	r1, [r7, #16]
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f930 	bl	8001ec0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e056      	b.n	8001d1a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d004      	beq.n	8001c80 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	e002      	b.n	8001c86 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	e037      	b.n	8001d08 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	e032      	b.n	8001d08 <HAL_ETH_Init+0x31c>
 8001ca2:	bf00      	nop
 8001ca4:	03938700 	.word	0x03938700
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40013800 	.word	0x40013800
 8001cb0:	01312cff 	.word	0x01312cff
 8001cb4:	02160ebf 	.word	0x02160ebf
 8001cb8:	039386ff 	.word	0x039386ff
 8001cbc:	05f5e0ff 	.word	0x05f5e0ff
 8001cc0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	08db      	lsrs	r3, r3, #3
 8001cca:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	2100      	movs	r1, #0
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f889 	bl	8001df4 <HAL_ETH_WritePHYRegister>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00b      	beq.n	8001d00 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001cec:	6939      	ldr	r1, [r7, #16]
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f8e6 	bl	8001ec0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e00c      	b.n	8001d1a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001d00:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001d04:	f7ff fd3e 	bl	8001784 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001d08:	6939      	ldr	r1, [r7, #16]
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f8d8 	bl	8001ec0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3720      	adds	r7, #32
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop

08001d24 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b82      	cmp	r3, #130	; 0x82
 8001d44:	d101      	bne.n	8001d4a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d46:	2302      	movs	r3, #2
 8001d48:	e050      	b.n	8001dec <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2282      	movs	r2, #130	; 0x82
 8001d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f003 031c 	and.w	r3, r3, #28
 8001d60:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8a1b      	ldrh	r3, [r3, #16]
 8001d66:	02db      	lsls	r3, r3, #11
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001d70:	897b      	ldrh	r3, [r7, #10]
 8001d72:	019b      	lsls	r3, r3, #6
 8001d74:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f023 0302 	bic.w	r3, r3, #2
 8001d84:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d96:	f7ff fce9 	bl	800176c <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d9c:	e015      	b.n	8001dca <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001d9e:	f7ff fce5 	bl	800176c <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dac:	d309      	bcc.n	8001dc2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e014      	b.n	8001dec <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1e4      	bne.n	8001d9e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b42      	cmp	r3, #66	; 0x42
 8001e14:	d101      	bne.n	8001e1a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e16:	2302      	movs	r3, #2
 8001e18:	e04e      	b.n	8001eb8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2242      	movs	r2, #66	; 0x42
 8001e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f003 031c 	and.w	r3, r3, #28
 8001e30:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8a1b      	ldrh	r3, [r3, #16]
 8001e36:	02db      	lsls	r3, r3, #11
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001e40:	897b      	ldrh	r3, [r7, #10]
 8001e42:	019b      	lsls	r3, r3, #6
 8001e44:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e70:	f7ff fc7c 	bl	800176c <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e76:	e015      	b.n	8001ea4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001e78:	f7ff fc78 	bl	800176c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e86:	d309      	bcc.n	8001e9c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e00d      	b.n	8001eb8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1e4      	bne.n	8001e78 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b0b0      	sub	sp, #192	; 0xc0
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d007      	beq.n	8001ee6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001edc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ee4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d103      	bne.n	8001f0e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f0a:	663b      	str	r3, [r7, #96]	; 0x60
 8001f0c:	e001      	b.n	8001f12 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001f12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f16:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001f2c:	2340      	movs	r3, #64	; 0x40
 8001f2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001f94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f98:	4bab      	ldr	r3, [pc, #684]	; (8002248 <ETH_MACDMAConfig+0x388>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001fa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001fa4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001fa8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001fac:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001fb2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001fb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001fb6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001fba:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001fc0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001fc4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001fc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001fc8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001fca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001fcc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001fd0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001fd4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001fd6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fe8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	f7ff fbc5 	bl	8001784 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002002:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002004:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002008:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800200a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800200c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800200e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002012:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002018:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800201a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800201e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002020:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002024:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002028:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002030:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002032:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800203e:	2001      	movs	r0, #1
 8002040:	f7ff fba0 	bl	8001784 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800204c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002056:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002060:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800206c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002070:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002074:	4013      	ands	r3, r2
 8002076:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800207a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800207e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002080:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002084:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002086:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800208a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800208c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002090:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002096:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002098:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800209c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800209e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020b0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80020bc:	2001      	movs	r0, #1
 80020be:	f7ff fb61 	bl	8001784 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ca:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80020cc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80020d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020e6:	2001      	movs	r0, #1
 80020e8:	f7ff fb4c 	bl	8001784 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020f4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80020fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020fe:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002104:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002108:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800211a:	2304      	movs	r3, #4
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800211e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002128:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800212a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002134:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800213a:	2300      	movs	r3, #0
 800213c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800213e:	2300      	movs	r3, #0
 8002140:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	f241 0318 	movw	r3, #4120	; 0x1018
 800214a:	4413      	add	r3, r2
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002152:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002156:	4b3d      	ldr	r3, [pc, #244]	; (800224c <ETH_MACDMAConfig+0x38c>)
 8002158:	4013      	ands	r3, r2
 800215a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800215e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002160:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002162:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002164:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002166:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002168:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800216a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800216c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800216e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002170:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002172:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002174:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002176:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800217a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800217e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002180:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002192:	4413      	add	r3, r2
 8002194:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002198:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	f241 0318 	movw	r3, #4120	; 0x1018
 80021a2:	4413      	add	r3, r2
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021aa:	2001      	movs	r0, #1
 80021ac:	f7ff faea 	bl	8001784 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	f241 0318 	movw	r3, #4120	; 0x1018
 80021b8:	4413      	add	r3, r2
 80021ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021be:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80021c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021c4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80021c8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80021ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021cc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80021ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80021d0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80021d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021d4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80021d6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80021d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80021da:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80021f8:	2001      	movs	r0, #1
 80021fa:	f7ff fac3 	bl	8001784 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002206:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800220a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d10d      	bne.n	8002230 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	f241 031c 	movw	r3, #4124	; 0x101c
 800221c:	4413      	add	r3, r2
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6811      	ldr	r1, [r2, #0]
 8002224:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <ETH_MACDMAConfig+0x390>)
 8002226:	431a      	orrs	r2, r3
 8002228:	f241 031c 	movw	r3, #4124	; 0x101c
 800222c:	440b      	add	r3, r1
 800222e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	461a      	mov	r2, r3
 8002236:	2100      	movs	r1, #0
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f80b 	bl	8002254 <ETH_MACAddressConfig>
}
 800223e:	bf00      	nop
 8002240:	37c0      	adds	r7, #192	; 0xc0
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	ff20810f 	.word	0xff20810f
 800224c:	f8de3f23 	.word	0xf8de3f23
 8002250:	00010040 	.word	0x00010040

08002254 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3305      	adds	r3, #5
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	021b      	lsls	r3, r3, #8
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	3204      	adds	r2, #4
 800226c:	7812      	ldrb	r2, [r2, #0]
 800226e:	4313      	orrs	r3, r2
 8002270:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <ETH_MACAddressConfig+0x68>)
 8002276:	4413      	add	r3, r2
 8002278:	461a      	mov	r2, r3
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3303      	adds	r3, #3
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	061a      	lsls	r2, r3, #24
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3302      	adds	r3, #2
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	041b      	lsls	r3, r3, #16
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3301      	adds	r3, #1
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	4313      	orrs	r3, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	7812      	ldrb	r2, [r2, #0]
 800229e:	4313      	orrs	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <ETH_MACAddressConfig+0x6c>)
 80022a6:	4413      	add	r3, r2
 80022a8:	461a      	mov	r2, r3
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	6013      	str	r3, [r2, #0]
}
 80022ae:	bf00      	nop
 80022b0:	371c      	adds	r7, #28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40028040 	.word	0x40028040
 80022c0:	40028044 	.word	0x40028044

080022c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b089      	sub	sp, #36	; 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	e175      	b.n	80025d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80022e4:	2201      	movs	r2, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	f040 8164 	bne.w	80025ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x4e>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b12      	cmp	r3, #18
 8002310:	d123      	bne.n	800235a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	08da      	lsrs	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3208      	adds	r2, #8
 800231a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	220f      	movs	r2, #15
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	08da      	lsrs	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3208      	adds	r2, #8
 8002354:	69b9      	ldr	r1, [r7, #24]
 8002356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	2203      	movs	r2, #3
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0203 	and.w	r2, r3, #3
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d00b      	beq.n	80023ae <HAL_GPIO_Init+0xea>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023a2:	2b11      	cmp	r3, #17
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b12      	cmp	r3, #18
 80023ac:	d130      	bne.n	8002410 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	2203      	movs	r2, #3
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e4:	2201      	movs	r2, #1
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	f003 0201 	and.w	r2, r3, #1
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	2203      	movs	r2, #3
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80be 	beq.w	80025ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_GPIO_Init+0x320>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	4a64      	ldr	r2, [pc, #400]	; (80025e4 <HAL_GPIO_Init+0x320>)
 8002454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002458:	6453      	str	r3, [r2, #68]	; 0x44
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_GPIO_Init+0x320>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002466:	4a60      	ldr	r2, [pc, #384]	; (80025e8 <HAL_GPIO_Init+0x324>)
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	089b      	lsrs	r3, r3, #2
 800246c:	3302      	adds	r3, #2
 800246e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	220f      	movs	r2, #15
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a57      	ldr	r2, [pc, #348]	; (80025ec <HAL_GPIO_Init+0x328>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d037      	beq.n	8002502 <HAL_GPIO_Init+0x23e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a56      	ldr	r2, [pc, #344]	; (80025f0 <HAL_GPIO_Init+0x32c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d031      	beq.n	80024fe <HAL_GPIO_Init+0x23a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a55      	ldr	r2, [pc, #340]	; (80025f4 <HAL_GPIO_Init+0x330>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d02b      	beq.n	80024fa <HAL_GPIO_Init+0x236>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a54      	ldr	r2, [pc, #336]	; (80025f8 <HAL_GPIO_Init+0x334>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d025      	beq.n	80024f6 <HAL_GPIO_Init+0x232>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a53      	ldr	r2, [pc, #332]	; (80025fc <HAL_GPIO_Init+0x338>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d01f      	beq.n	80024f2 <HAL_GPIO_Init+0x22e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a52      	ldr	r2, [pc, #328]	; (8002600 <HAL_GPIO_Init+0x33c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d019      	beq.n	80024ee <HAL_GPIO_Init+0x22a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a51      	ldr	r2, [pc, #324]	; (8002604 <HAL_GPIO_Init+0x340>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d013      	beq.n	80024ea <HAL_GPIO_Init+0x226>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a50      	ldr	r2, [pc, #320]	; (8002608 <HAL_GPIO_Init+0x344>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d00d      	beq.n	80024e6 <HAL_GPIO_Init+0x222>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a4f      	ldr	r2, [pc, #316]	; (800260c <HAL_GPIO_Init+0x348>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d007      	beq.n	80024e2 <HAL_GPIO_Init+0x21e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a4e      	ldr	r2, [pc, #312]	; (8002610 <HAL_GPIO_Init+0x34c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d101      	bne.n	80024de <HAL_GPIO_Init+0x21a>
 80024da:	2309      	movs	r3, #9
 80024dc:	e012      	b.n	8002504 <HAL_GPIO_Init+0x240>
 80024de:	230a      	movs	r3, #10
 80024e0:	e010      	b.n	8002504 <HAL_GPIO_Init+0x240>
 80024e2:	2308      	movs	r3, #8
 80024e4:	e00e      	b.n	8002504 <HAL_GPIO_Init+0x240>
 80024e6:	2307      	movs	r3, #7
 80024e8:	e00c      	b.n	8002504 <HAL_GPIO_Init+0x240>
 80024ea:	2306      	movs	r3, #6
 80024ec:	e00a      	b.n	8002504 <HAL_GPIO_Init+0x240>
 80024ee:	2305      	movs	r3, #5
 80024f0:	e008      	b.n	8002504 <HAL_GPIO_Init+0x240>
 80024f2:	2304      	movs	r3, #4
 80024f4:	e006      	b.n	8002504 <HAL_GPIO_Init+0x240>
 80024f6:	2303      	movs	r3, #3
 80024f8:	e004      	b.n	8002504 <HAL_GPIO_Init+0x240>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e002      	b.n	8002504 <HAL_GPIO_Init+0x240>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <HAL_GPIO_Init+0x240>
 8002502:	2300      	movs	r3, #0
 8002504:	69fa      	ldr	r2, [r7, #28]
 8002506:	f002 0203 	and.w	r2, r2, #3
 800250a:	0092      	lsls	r2, r2, #2
 800250c:	4093      	lsls	r3, r2
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002514:	4934      	ldr	r1, [pc, #208]	; (80025e8 <HAL_GPIO_Init+0x324>)
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	089b      	lsrs	r3, r3, #2
 800251a:	3302      	adds	r3, #2
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002522:	4b3c      	ldr	r3, [pc, #240]	; (8002614 <HAL_GPIO_Init+0x350>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002546:	4a33      	ldr	r2, [pc, #204]	; (8002614 <HAL_GPIO_Init+0x350>)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800254c:	4b31      	ldr	r3, [pc, #196]	; (8002614 <HAL_GPIO_Init+0x350>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002570:	4a28      	ldr	r2, [pc, #160]	; (8002614 <HAL_GPIO_Init+0x350>)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002576:	4b27      	ldr	r3, [pc, #156]	; (8002614 <HAL_GPIO_Init+0x350>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800259a:	4a1e      	ldr	r2, [pc, #120]	; (8002614 <HAL_GPIO_Init+0x350>)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025a0:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <HAL_GPIO_Init+0x350>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025c4:	4a13      	ldr	r2, [pc, #76]	; (8002614 <HAL_GPIO_Init+0x350>)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3301      	adds	r3, #1
 80025ce:	61fb      	str	r3, [r7, #28]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	2b0f      	cmp	r3, #15
 80025d4:	f67f ae86 	bls.w	80022e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80025d8:	bf00      	nop
 80025da:	3724      	adds	r7, #36	; 0x24
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40013800 	.word	0x40013800
 80025ec:	40020000 	.word	0x40020000
 80025f0:	40020400 	.word	0x40020400
 80025f4:	40020800 	.word	0x40020800
 80025f8:	40020c00 	.word	0x40020c00
 80025fc:	40021000 	.word	0x40021000
 8002600:	40021400 	.word	0x40021400
 8002604:	40021800 	.word	0x40021800
 8002608:	40021c00 	.word	0x40021c00
 800260c:	40022000 	.word	0x40022000
 8002610:	40022400 	.word	0x40022400
 8002614:	40013c00 	.word	0x40013c00

08002618 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	887b      	ldrh	r3, [r7, #2]
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
 8002634:	e001      	b.n	800263a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800263a:	7bfb      	ldrb	r3, [r7, #15]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	807b      	strh	r3, [r7, #2]
 8002654:	4613      	mov	r3, r2
 8002656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002658:	787b      	ldrb	r3, [r7, #1]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800265e:	887a      	ldrh	r2, [r7, #2]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002664:	e003      	b.n	800266e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002666:	887b      	ldrh	r3, [r7, #2]
 8002668:	041a      	lsls	r2, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	619a      	str	r2, [r3, #24]
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d006      	beq.n	80026a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002692:	4a05      	ldr	r2, [pc, #20]	; (80026a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fc0e 	bl	8000ebc <HAL_GPIO_EXTI_Callback>
  }
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40013c00 	.word	0x40013c00

080026ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ae:	b08f      	sub	sp, #60	; 0x3c
 80026b0:	af0a      	add	r7, sp, #40	; 0x28
 80026b2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e10a      	b.n	80028d4 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe ff74 	bl	80015c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2203      	movs	r2, #3
 80026dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f002 fa03 	bl	8004af0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	687e      	ldr	r6, [r7, #4]
 80026f2:	466d      	mov	r5, sp
 80026f4:	f106 0410 	add.w	r4, r6, #16
 80026f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002700:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002704:	e885 0003 	stmia.w	r5, {r0, r1}
 8002708:	1d33      	adds	r3, r6, #4
 800270a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800270c:	6838      	ldr	r0, [r7, #0]
 800270e:	f002 f997 	bl	8004a40 <USB_CoreInit>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0d7      	b.n	80028d4 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2100      	movs	r1, #0
 800272a:	4618      	mov	r0, r3
 800272c:	f002 f9f1 	bl	8004b12 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]
 8002734:	e04a      	b.n	80027cc <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	333d      	adds	r3, #61	; 0x3d
 8002746:	2201      	movs	r2, #1
 8002748:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	333c      	adds	r3, #60	; 0x3c
 800275a:	7bfa      	ldrb	r2, [r7, #15]
 800275c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	b298      	uxth	r0, r3
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	1a9b      	subs	r3, r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	3342      	adds	r3, #66	; 0x42
 8002772:	4602      	mov	r2, r0
 8002774:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002776:	7bfa      	ldrb	r2, [r7, #15]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	333f      	adds	r3, #63	; 0x3f
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	1a9b      	subs	r3, r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	3344      	adds	r3, #68	; 0x44
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800279e:	7bfa      	ldrb	r2, [r7, #15]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	3348      	adds	r3, #72	; 0x48
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	3350      	adds	r3, #80	; 0x50
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	3301      	adds	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
 80027cc:	7bfa      	ldrb	r2, [r7, #15]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d3af      	bcc.n	8002736 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	e044      	b.n	8002866 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	1a9b      	subs	r3, r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800281e:	7bfa      	ldrb	r2, [r7, #15]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	1a9b      	subs	r3, r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002834:	7bfa      	ldrb	r2, [r7, #15]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800284a:	7bfa      	ldrb	r2, [r7, #15]
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	1a9b      	subs	r3, r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	3301      	adds	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
 8002866:	7bfa      	ldrb	r2, [r7, #15]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	429a      	cmp	r2, r3
 800286e:	d3b5      	bcc.n	80027dc <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	603b      	str	r3, [r7, #0]
 8002876:	687e      	ldr	r6, [r7, #4]
 8002878:	466d      	mov	r5, sp
 800287a:	f106 0410 	add.w	r4, r6, #16
 800287e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002886:	e894 0003 	ldmia.w	r4, {r0, r1}
 800288a:	e885 0003 	stmia.w	r5, {r0, r1}
 800288e:	1d33      	adds	r3, r6, #4
 8002890:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002892:	6838      	ldr	r0, [r7, #0]
 8002894:	f002 f968 	bl	8004b68 <USB_DevInit>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2202      	movs	r2, #2
 80028a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e014      	b.n	80028d4 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d102      	bne.n	80028c8 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f80a 	bl	80028dc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f002 fb28 	bl	8004f22 <USB_DevDisconnect>

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_PCDEx_ActivateLPM+0x44>)
 800290c:	4313      	orrs	r3, r2
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	10000003 	.word	0x10000003

08002924 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	4b23      	ldr	r3, [pc, #140]	; (80029bc <HAL_PWREx_EnableOverDrive+0x98>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	4a22      	ldr	r2, [pc, #136]	; (80029bc <HAL_PWREx_EnableOverDrive+0x98>)
 8002934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002938:	6413      	str	r3, [r2, #64]	; 0x40
 800293a:	4b20      	ldr	r3, [pc, #128]	; (80029bc <HAL_PWREx_EnableOverDrive+0x98>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002946:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1d      	ldr	r2, [pc, #116]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002952:	f7fe ff0b 	bl	800176c <HAL_GetTick>
 8002956:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002958:	e009      	b.n	800296e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800295a:	f7fe ff07 	bl	800176c <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002968:	d901      	bls.n	800296e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e022      	b.n	80029b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800296e:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800297a:	d1ee      	bne.n	800295a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800297c:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a0f      	ldr	r2, [pc, #60]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002986:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002988:	f7fe fef0 	bl	800176c <HAL_GetTick>
 800298c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800298e:	e009      	b.n	80029a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002990:	f7fe feec 	bl	800176c <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800299e:	d901      	bls.n	80029a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e007      	b.n	80029b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029a4:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029b0:	d1ee      	bne.n	8002990 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40007000 	.word	0x40007000

080029c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80029cc:	2300      	movs	r3, #0
 80029ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e25c      	b.n	8002e94 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8087 	beq.w	8002af6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e8:	4b96      	ldr	r3, [pc, #600]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 030c 	and.w	r3, r3, #12
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d00c      	beq.n	8002a0e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f4:	4b93      	ldr	r3, [pc, #588]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d112      	bne.n	8002a26 <HAL_RCC_OscConfig+0x62>
 8002a00:	4b90      	ldr	r3, [pc, #576]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a0c:	d10b      	bne.n	8002a26 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0e:	4b8d      	ldr	r3, [pc, #564]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d06c      	beq.n	8002af4 <HAL_RCC_OscConfig+0x130>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d168      	bne.n	8002af4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e236      	b.n	8002e94 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCC_OscConfig+0x7a>
 8002a30:	4b84      	ldr	r3, [pc, #528]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a83      	ldr	r2, [pc, #524]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	e02e      	b.n	8002a9c <HAL_RCC_OscConfig+0xd8>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x9c>
 8002a46:	4b7f      	ldr	r3, [pc, #508]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a7e      	ldr	r2, [pc, #504]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	4b7c      	ldr	r3, [pc, #496]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a7b      	ldr	r2, [pc, #492]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	e01d      	b.n	8002a9c <HAL_RCC_OscConfig+0xd8>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0xc0>
 8002a6a:	4b76      	ldr	r3, [pc, #472]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a75      	ldr	r2, [pc, #468]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	4b73      	ldr	r3, [pc, #460]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a72      	ldr	r2, [pc, #456]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e00b      	b.n	8002a9c <HAL_RCC_OscConfig+0xd8>
 8002a84:	4b6f      	ldr	r3, [pc, #444]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a6e      	ldr	r2, [pc, #440]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	4b6c      	ldr	r3, [pc, #432]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a6b      	ldr	r2, [pc, #428]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d013      	beq.n	8002acc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa4:	f7fe fe62 	bl	800176c <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aac:	f7fe fe5e 	bl	800176c <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b64      	cmp	r3, #100	; 0x64
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e1ea      	b.n	8002e94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	4b61      	ldr	r3, [pc, #388]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0xe8>
 8002aca:	e014      	b.n	8002af6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7fe fe4e 	bl	800176c <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad4:	f7fe fe4a 	bl	800176c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b64      	cmp	r3, #100	; 0x64
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e1d6      	b.n	8002e94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae6:	4b57      	ldr	r3, [pc, #348]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x110>
 8002af2:	e000      	b.n	8002af6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d069      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b02:	4b50      	ldr	r3, [pc, #320]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b0e:	4b4d      	ldr	r3, [pc, #308]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d11c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x190>
 8002b1a:	4b4a      	ldr	r3, [pc, #296]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d116      	bne.n	8002b54 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b26:	4b47      	ldr	r3, [pc, #284]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <HAL_RCC_OscConfig+0x17a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d001      	beq.n	8002b3e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e1aa      	b.n	8002e94 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3e:	4b41      	ldr	r3, [pc, #260]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	493d      	ldr	r1, [pc, #244]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b52:	e040      	b.n	8002bd6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d023      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b5c:	4b39      	ldr	r3, [pc, #228]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a38      	ldr	r2, [pc, #224]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe fe00 	bl	800176c <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b70:	f7fe fdfc 	bl	800176c <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e188      	b.n	8002e94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b82:	4b30      	ldr	r3, [pc, #192]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8e:	4b2d      	ldr	r3, [pc, #180]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4929      	ldr	r1, [pc, #164]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	600b      	str	r3, [r1, #0]
 8002ba2:	e018      	b.n	8002bd6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba4:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a26      	ldr	r2, [pc, #152]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fddc 	bl	800176c <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb8:	f7fe fdd8 	bl	800176c <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e164      	b.n	8002e94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bca:	4b1e      	ldr	r3, [pc, #120]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d038      	beq.n	8002c54 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d019      	beq.n	8002c1e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bea:	4b16      	ldr	r3, [pc, #88]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bee:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf6:	f7fe fdb9 	bl	800176c <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bfe:	f7fe fdb5 	bl	800176c <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e141      	b.n	8002e94 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x23a>
 8002c1c:	e01a      	b.n	8002c54 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c1e:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c22:	4a08      	ldr	r2, [pc, #32]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2a:	f7fe fd9f 	bl	800176c <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c30:	e00a      	b.n	8002c48 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c32:	f7fe fd9b 	bl	800176c <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d903      	bls.n	8002c48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e127      	b.n	8002e94 <HAL_RCC_OscConfig+0x4d0>
 8002c44:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c48:	4b94      	ldr	r3, [pc, #592]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1ee      	bne.n	8002c32 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80a4 	beq.w	8002daa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c62:	4b8e      	ldr	r3, [pc, #568]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10d      	bne.n	8002c8a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6e:	4b8b      	ldr	r3, [pc, #556]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	4a8a      	ldr	r2, [pc, #552]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c78:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7a:	4b88      	ldr	r3, [pc, #544]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c86:	2301      	movs	r3, #1
 8002c88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c8a:	4b85      	ldr	r3, [pc, #532]	; (8002ea0 <HAL_RCC_OscConfig+0x4dc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d118      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c96:	4b82      	ldr	r3, [pc, #520]	; (8002ea0 <HAL_RCC_OscConfig+0x4dc>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a81      	ldr	r2, [pc, #516]	; (8002ea0 <HAL_RCC_OscConfig+0x4dc>)
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca2:	f7fe fd63 	bl	800176c <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002caa:	f7fe fd5f 	bl	800176c <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b64      	cmp	r3, #100	; 0x64
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0eb      	b.n	8002e94 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cbc:	4b78      	ldr	r3, [pc, #480]	; (8002ea0 <HAL_RCC_OscConfig+0x4dc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d106      	bne.n	8002cde <HAL_RCC_OscConfig+0x31a>
 8002cd0:	4b72      	ldr	r3, [pc, #456]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	4a71      	ldr	r2, [pc, #452]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6713      	str	r3, [r2, #112]	; 0x70
 8002cdc:	e02d      	b.n	8002d3a <HAL_RCC_OscConfig+0x376>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x33c>
 8002ce6:	4b6d      	ldr	r3, [pc, #436]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cea:	4a6c      	ldr	r2, [pc, #432]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf2:	4b6a      	ldr	r3, [pc, #424]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	4a69      	ldr	r2, [pc, #420]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002cf8:	f023 0304 	bic.w	r3, r3, #4
 8002cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfe:	e01c      	b.n	8002d3a <HAL_RCC_OscConfig+0x376>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	d10c      	bne.n	8002d22 <HAL_RCC_OscConfig+0x35e>
 8002d08:	4b64      	ldr	r3, [pc, #400]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	4a63      	ldr	r2, [pc, #396]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002d0e:	f043 0304 	orr.w	r3, r3, #4
 8002d12:	6713      	str	r3, [r2, #112]	; 0x70
 8002d14:	4b61      	ldr	r3, [pc, #388]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	4a60      	ldr	r2, [pc, #384]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d20:	e00b      	b.n	8002d3a <HAL_RCC_OscConfig+0x376>
 8002d22:	4b5e      	ldr	r3, [pc, #376]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d26:	4a5d      	ldr	r2, [pc, #372]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2e:	4b5b      	ldr	r3, [pc, #364]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	4a5a      	ldr	r2, [pc, #360]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d015      	beq.n	8002d6e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d42:	f7fe fd13 	bl	800176c <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d48:	e00a      	b.n	8002d60 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d4a:	f7fe fd0f 	bl	800176c <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e099      	b.n	8002e94 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d60:	4b4e      	ldr	r3, [pc, #312]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0ee      	beq.n	8002d4a <HAL_RCC_OscConfig+0x386>
 8002d6c:	e014      	b.n	8002d98 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6e:	f7fe fcfd 	bl	800176c <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d76:	f7fe fcf9 	bl	800176c <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e083      	b.n	8002e94 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8c:	4b43      	ldr	r3, [pc, #268]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ee      	bne.n	8002d76 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d105      	bne.n	8002daa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d9e:	4b3f      	ldr	r3, [pc, #252]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	4a3e      	ldr	r2, [pc, #248]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d06f      	beq.n	8002e92 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db2:	4b3a      	ldr	r3, [pc, #232]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d067      	beq.n	8002e8e <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d149      	bne.n	8002e5a <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc6:	4b35      	ldr	r3, [pc, #212]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a34      	ldr	r2, [pc, #208]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002dcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd2:	f7fe fccb 	bl	800176c <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dda:	f7fe fcc7 	bl	800176c <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e053      	b.n	8002e94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dec:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f0      	bne.n	8002dda <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69da      	ldr	r2, [r3, #28]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	019b      	lsls	r3, r3, #6
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	085b      	lsrs	r3, r3, #1
 8002e10:	3b01      	subs	r3, #1
 8002e12:	041b      	lsls	r3, r3, #16
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	061b      	lsls	r3, r3, #24
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	4a1f      	ldr	r2, [pc, #124]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002e20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e24:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1c      	ldr	r2, [pc, #112]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002e2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7fe fc9b 	bl	800176c <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3a:	f7fe fc97 	bl	800176c <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e023      	b.n	8002e94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4c:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x476>
 8002e58:	e01b      	b.n	8002e92 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a0f      	ldr	r2, [pc, #60]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002e60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7fe fc81 	bl	800176c <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e6e:	f7fe fc7d 	bl	800176c <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e009      	b.n	8002e94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e80:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_RCC_OscConfig+0x4d8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f0      	bne.n	8002e6e <HAL_RCC_OscConfig+0x4aa>
 8002e8c:	e001      	b.n	8002e92 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40007000 	.word	0x40007000

08002ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0ce      	b.n	800305a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b69      	ldr	r3, [pc, #420]	; (8003064 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d910      	bls.n	8002eec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b66      	ldr	r3, [pc, #408]	; (8003064 <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 020f 	bic.w	r2, r3, #15
 8002ed2:	4964      	ldr	r1, [pc, #400]	; (8003064 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b62      	ldr	r3, [pc, #392]	; (8003064 <HAL_RCC_ClockConfig+0x1c0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0b6      	b.n	800305a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d020      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f04:	4b58      	ldr	r3, [pc, #352]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a57      	ldr	r2, [pc, #348]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f1c:	4b52      	ldr	r3, [pc, #328]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	4a51      	ldr	r2, [pc, #324]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f28:	4b4f      	ldr	r3, [pc, #316]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	494c      	ldr	r1, [pc, #304]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d040      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d107      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	4b46      	ldr	r3, [pc, #280]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d115      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e07d      	b.n	800305a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d107      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f66:	4b40      	ldr	r3, [pc, #256]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e071      	b.n	800305a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f76:	4b3c      	ldr	r3, [pc, #240]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e069      	b.n	800305a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f86:	4b38      	ldr	r3, [pc, #224]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f023 0203 	bic.w	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4935      	ldr	r1, [pc, #212]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f98:	f7fe fbe8 	bl	800176c <HAL_GetTick>
 8002f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa0:	f7fe fbe4 	bl	800176c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e051      	b.n	800305a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb6:	4b2c      	ldr	r3, [pc, #176]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 020c 	and.w	r2, r3, #12
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d1eb      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b26      	ldr	r3, [pc, #152]	; (8003064 <HAL_RCC_ClockConfig+0x1c0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d210      	bcs.n	8002ff8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b23      	ldr	r3, [pc, #140]	; (8003064 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 020f 	bic.w	r2, r3, #15
 8002fde:	4921      	ldr	r1, [pc, #132]	; (8003064 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b1f      	ldr	r3, [pc, #124]	; (8003064 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e030      	b.n	800305a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003004:	4b18      	ldr	r3, [pc, #96]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4915      	ldr	r1, [pc, #84]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	4313      	orrs	r3, r2
 8003014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003022:	4b11      	ldr	r3, [pc, #68]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	490d      	ldr	r1, [pc, #52]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	4313      	orrs	r3, r2
 8003034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003036:	f000 f81d 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 800303a:	4601      	mov	r1, r0
 800303c:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	4a09      	ldr	r2, [pc, #36]	; (800306c <HAL_RCC_ClockConfig+0x1c8>)
 8003048:	5cd3      	ldrb	r3, [r2, r3]
 800304a:	fa21 f303 	lsr.w	r3, r1, r3
 800304e:	4a08      	ldr	r2, [pc, #32]	; (8003070 <HAL_RCC_ClockConfig+0x1cc>)
 8003050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003052:	2000      	movs	r0, #0
 8003054:	f7fe fb46 	bl	80016e4 <HAL_InitTick>

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40023c00 	.word	0x40023c00
 8003068:	40023800 	.word	0x40023800
 800306c:	0800502c 	.word	0x0800502c
 8003070:	20000004 	.word	0x20000004

08003074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	607b      	str	r3, [r7, #4]
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	2300      	movs	r3, #0
 8003084:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800308a:	4b63      	ldr	r3, [pc, #396]	; (8003218 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b04      	cmp	r3, #4
 8003094:	d007      	beq.n	80030a6 <HAL_RCC_GetSysClockFreq+0x32>
 8003096:	2b08      	cmp	r3, #8
 8003098:	d008      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x38>
 800309a:	2b00      	cmp	r3, #0
 800309c:	f040 80b4 	bne.w	8003208 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030a0:	4b5e      	ldr	r3, [pc, #376]	; (800321c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80030a2:	60bb      	str	r3, [r7, #8]
       break;
 80030a4:	e0b3      	b.n	800320e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030a6:	4b5e      	ldr	r3, [pc, #376]	; (8003220 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80030a8:	60bb      	str	r3, [r7, #8]
      break;
 80030aa:	e0b0      	b.n	800320e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030ac:	4b5a      	ldr	r3, [pc, #360]	; (8003218 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030b4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80030b6:	4b58      	ldr	r3, [pc, #352]	; (8003218 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d04a      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c2:	4b55      	ldr	r3, [pc, #340]	; (8003218 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	099b      	lsrs	r3, r3, #6
 80030c8:	f04f 0400 	mov.w	r4, #0
 80030cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	ea03 0501 	and.w	r5, r3, r1
 80030d8:	ea04 0602 	and.w	r6, r4, r2
 80030dc:	4629      	mov	r1, r5
 80030de:	4632      	mov	r2, r6
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	f04f 0400 	mov.w	r4, #0
 80030e8:	0154      	lsls	r4, r2, #5
 80030ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030ee:	014b      	lsls	r3, r1, #5
 80030f0:	4619      	mov	r1, r3
 80030f2:	4622      	mov	r2, r4
 80030f4:	1b49      	subs	r1, r1, r5
 80030f6:	eb62 0206 	sbc.w	r2, r2, r6
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	f04f 0400 	mov.w	r4, #0
 8003102:	0194      	lsls	r4, r2, #6
 8003104:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003108:	018b      	lsls	r3, r1, #6
 800310a:	1a5b      	subs	r3, r3, r1
 800310c:	eb64 0402 	sbc.w	r4, r4, r2
 8003110:	f04f 0100 	mov.w	r1, #0
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	00e2      	lsls	r2, r4, #3
 800311a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800311e:	00d9      	lsls	r1, r3, #3
 8003120:	460b      	mov	r3, r1
 8003122:	4614      	mov	r4, r2
 8003124:	195b      	adds	r3, r3, r5
 8003126:	eb44 0406 	adc.w	r4, r4, r6
 800312a:	f04f 0100 	mov.w	r1, #0
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	0262      	lsls	r2, r4, #9
 8003134:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003138:	0259      	lsls	r1, r3, #9
 800313a:	460b      	mov	r3, r1
 800313c:	4614      	mov	r4, r2
 800313e:	4618      	mov	r0, r3
 8003140:	4621      	mov	r1, r4
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f04f 0400 	mov.w	r4, #0
 8003148:	461a      	mov	r2, r3
 800314a:	4623      	mov	r3, r4
 800314c:	f7fd f85c 	bl	8000208 <__aeabi_uldivmod>
 8003150:	4603      	mov	r3, r0
 8003152:	460c      	mov	r4, r1
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	e049      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003158:	4b2f      	ldr	r3, [pc, #188]	; (8003218 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	099b      	lsrs	r3, r3, #6
 800315e:	f04f 0400 	mov.w	r4, #0
 8003162:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	ea03 0501 	and.w	r5, r3, r1
 800316e:	ea04 0602 	and.w	r6, r4, r2
 8003172:	4629      	mov	r1, r5
 8003174:	4632      	mov	r2, r6
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	f04f 0400 	mov.w	r4, #0
 800317e:	0154      	lsls	r4, r2, #5
 8003180:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003184:	014b      	lsls	r3, r1, #5
 8003186:	4619      	mov	r1, r3
 8003188:	4622      	mov	r2, r4
 800318a:	1b49      	subs	r1, r1, r5
 800318c:	eb62 0206 	sbc.w	r2, r2, r6
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	f04f 0400 	mov.w	r4, #0
 8003198:	0194      	lsls	r4, r2, #6
 800319a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800319e:	018b      	lsls	r3, r1, #6
 80031a0:	1a5b      	subs	r3, r3, r1
 80031a2:	eb64 0402 	sbc.w	r4, r4, r2
 80031a6:	f04f 0100 	mov.w	r1, #0
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	00e2      	lsls	r2, r4, #3
 80031b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031b4:	00d9      	lsls	r1, r3, #3
 80031b6:	460b      	mov	r3, r1
 80031b8:	4614      	mov	r4, r2
 80031ba:	195b      	adds	r3, r3, r5
 80031bc:	eb44 0406 	adc.w	r4, r4, r6
 80031c0:	f04f 0100 	mov.w	r1, #0
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	02a2      	lsls	r2, r4, #10
 80031ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80031ce:	0299      	lsls	r1, r3, #10
 80031d0:	460b      	mov	r3, r1
 80031d2:	4614      	mov	r4, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	4621      	mov	r1, r4
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f04f 0400 	mov.w	r4, #0
 80031de:	461a      	mov	r2, r3
 80031e0:	4623      	mov	r3, r4
 80031e2:	f7fd f811 	bl	8000208 <__aeabi_uldivmod>
 80031e6:	4603      	mov	r3, r0
 80031e8:	460c      	mov	r4, r1
 80031ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80031ec:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	0c1b      	lsrs	r3, r3, #16
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	3301      	adds	r3, #1
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	fbb2 f3f3 	udiv	r3, r2, r3
 8003204:	60bb      	str	r3, [r7, #8]
      break;
 8003206:	e002      	b.n	800320e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003208:	4b04      	ldr	r3, [pc, #16]	; (800321c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800320a:	60bb      	str	r3, [r7, #8]
      break;
 800320c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800320e:	68bb      	ldr	r3, [r7, #8]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003218:	40023800 	.word	0x40023800
 800321c:	00f42400 	.word	0x00f42400
 8003220:	007a1200 	.word	0x007a1200

08003224 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <HAL_RCC_GetHCLKFreq+0x14>)
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000004 	.word	0x20000004

0800323c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003240:	f7ff fff0 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 8003244:	4601      	mov	r1, r0
 8003246:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	0a9b      	lsrs	r3, r3, #10
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	4a03      	ldr	r2, [pc, #12]	; (8003260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003252:	5cd3      	ldrb	r3, [r2, r3]
 8003254:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003258:	4618      	mov	r0, r3
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40023800 	.word	0x40023800
 8003260:	0800503c 	.word	0x0800503c

08003264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003268:	f7ff ffdc 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 800326c:	4601      	mov	r1, r0
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	0b5b      	lsrs	r3, r3, #13
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	4a03      	ldr	r2, [pc, #12]	; (8003288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800327a:	5cd3      	ldrb	r3, [r2, r3]
 800327c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003280:	4618      	mov	r0, r3
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40023800 	.word	0x40023800
 8003288:	0800503c 	.word	0x0800503c

0800328c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d012      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032b4:	4b69      	ldr	r3, [pc, #420]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	4a68      	ldr	r2, [pc, #416]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032be:	6093      	str	r3, [r2, #8]
 80032c0:	4b66      	ldr	r3, [pc, #408]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c8:	4964      	ldr	r1, [pc, #400]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80032d6:	2301      	movs	r3, #1
 80032d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d017      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032e6:	4b5d      	ldr	r3, [pc, #372]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f4:	4959      	ldr	r1, [pc, #356]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003300:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003304:	d101      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003306:	2301      	movs	r3, #1
 8003308:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003312:	2301      	movs	r3, #1
 8003314:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d017      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003322:	4b4e      	ldr	r3, [pc, #312]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003328:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	494a      	ldr	r1, [pc, #296]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003340:	d101      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003342:	2301      	movs	r3, #1
 8003344:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800334e:	2301      	movs	r3, #1
 8003350:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800335e:	2301      	movs	r3, #1
 8003360:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 808b 	beq.w	8003486 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003370:	4b3a      	ldr	r3, [pc, #232]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	4a39      	ldr	r2, [pc, #228]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337a:	6413      	str	r3, [r2, #64]	; 0x40
 800337c:	4b37      	ldr	r3, [pc, #220]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003388:	4b35      	ldr	r3, [pc, #212]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a34      	ldr	r2, [pc, #208]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800338e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003392:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003394:	f7fe f9ea 	bl	800176c <HAL_GetTick>
 8003398:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800339c:	f7fe f9e6 	bl	800176c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b64      	cmp	r3, #100	; 0x64
 80033a8:	d901      	bls.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e355      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033ae:	4b2c      	ldr	r3, [pc, #176]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033ba:	4b28      	ldr	r3, [pc, #160]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d035      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d02e      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033d8:	4b20      	ldr	r3, [pc, #128]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033e2:	4b1e      	ldr	r3, [pc, #120]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	4a1d      	ldr	r2, [pc, #116]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033ee:	4b1b      	ldr	r3, [pc, #108]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	4a1a      	ldr	r2, [pc, #104]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80033fa:	4a18      	ldr	r2, [pc, #96]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003400:	4b16      	ldr	r3, [pc, #88]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b01      	cmp	r3, #1
 800340a:	d114      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fe f9ae 	bl	800176c <HAL_GetTick>
 8003410:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003412:	e00a      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003414:	f7fe f9aa 	bl	800176c <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e317      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342a:	4b0c      	ldr	r3, [pc, #48]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0ee      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003442:	d111      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003452:	400b      	ands	r3, r1
 8003454:	4901      	ldr	r1, [pc, #4]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003456:	4313      	orrs	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
 800345a:	e00b      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800345c:	40023800 	.word	0x40023800
 8003460:	40007000 	.word	0x40007000
 8003464:	0ffffcff 	.word	0x0ffffcff
 8003468:	4bb0      	ldr	r3, [pc, #704]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	4aaf      	ldr	r2, [pc, #700]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800346e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003472:	6093      	str	r3, [r2, #8]
 8003474:	4bad      	ldr	r3, [pc, #692]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003476:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003480:	49aa      	ldr	r1, [pc, #680]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003482:	4313      	orrs	r3, r2
 8003484:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	2b00      	cmp	r3, #0
 8003490:	d010      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003492:	4ba6      	ldr	r3, [pc, #664]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003498:	4aa4      	ldr	r2, [pc, #656]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800349a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800349e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80034a2:	4ba2      	ldr	r3, [pc, #648]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ac:	499f      	ldr	r1, [pc, #636]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034c0:	4b9a      	ldr	r3, [pc, #616]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ce:	4997      	ldr	r1, [pc, #604]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034e2:	4b92      	ldr	r3, [pc, #584]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f0:	498e      	ldr	r1, [pc, #568]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003504:	4b89      	ldr	r3, [pc, #548]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003512:	4986      	ldr	r1, [pc, #536]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003526:	4b81      	ldr	r3, [pc, #516]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003534:	497d      	ldr	r1, [pc, #500]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003548:	4b78      	ldr	r3, [pc, #480]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354e:	f023 0203 	bic.w	r2, r3, #3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	4975      	ldr	r1, [pc, #468]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800356a:	4b70      	ldr	r3, [pc, #448]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800356c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003570:	f023 020c 	bic.w	r2, r3, #12
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003578:	496c      	ldr	r1, [pc, #432]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800358c:	4b67      	ldr	r3, [pc, #412]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003592:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800359a:	4964      	ldr	r1, [pc, #400]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035ae:	4b5f      	ldr	r3, [pc, #380]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035bc:	495b      	ldr	r1, [pc, #364]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035d0:	4b56      	ldr	r3, [pc, #344]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035de:	4953      	ldr	r1, [pc, #332]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80035f2:	4b4e      	ldr	r3, [pc, #312]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003600:	494a      	ldr	r1, [pc, #296]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003614:	4b45      	ldr	r3, [pc, #276]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003622:	4942      	ldr	r1, [pc, #264]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003636:	4b3d      	ldr	r3, [pc, #244]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003644:	4939      	ldr	r1, [pc, #228]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003658:	4b34      	ldr	r3, [pc, #208]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800365a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003666:	4931      	ldr	r1, [pc, #196]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d011      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800367a:	4b2c      	ldr	r3, [pc, #176]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800367c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003680:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003688:	4928      	ldr	r1, [pc, #160]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003698:	d101      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800369a:	2301      	movs	r3, #1
 800369c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80036aa:	2301      	movs	r3, #1
 80036ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036ba:	4b1c      	ldr	r3, [pc, #112]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c8:	4918      	ldr	r1, [pc, #96]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00b      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036dc:	4b13      	ldr	r3, [pc, #76]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ec:	490f      	ldr	r1, [pc, #60]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d005      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003702:	f040 80d8 	bne.w	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003706:	4b09      	ldr	r3, [pc, #36]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a08      	ldr	r2, [pc, #32]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800370c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003712:	f7fe f82b 	bl	800176c <HAL_GetTick>
 8003716:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003718:	e00a      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800371a:	f7fe f827 	bl	800176c <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b64      	cmp	r3, #100	; 0x64
 8003726:	d903      	bls.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e196      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800372c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003730:	4b6c      	ldr	r3, [pc, #432]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1ee      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d021      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374c:	2b00      	cmp	r3, #0
 800374e:	d11d      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003750:	4b64      	ldr	r3, [pc, #400]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003756:	0c1b      	lsrs	r3, r3, #16
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800375e:	4b61      	ldr	r3, [pc, #388]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003764:	0e1b      	lsrs	r3, r3, #24
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	019a      	lsls	r2, r3, #6
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	041b      	lsls	r3, r3, #16
 8003776:	431a      	orrs	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	061b      	lsls	r3, r3, #24
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	071b      	lsls	r3, r3, #28
 8003784:	4957      	ldr	r1, [pc, #348]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d004      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037a0:	d00a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d02e      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b6:	d129      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037b8:	4b4a      	ldr	r3, [pc, #296]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037be:	0c1b      	lsrs	r3, r3, #16
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037c6:	4b47      	ldr	r3, [pc, #284]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037cc:	0f1b      	lsrs	r3, r3, #28
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	019a      	lsls	r2, r3, #6
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	041b      	lsls	r3, r3, #16
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	061b      	lsls	r3, r3, #24
 80037e6:	431a      	orrs	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	071b      	lsls	r3, r3, #28
 80037ec:	493d      	ldr	r1, [pc, #244]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037f4:	4b3b      	ldr	r3, [pc, #236]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037fa:	f023 021f 	bic.w	r2, r3, #31
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	3b01      	subs	r3, #1
 8003804:	4937      	ldr	r1, [pc, #220]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01d      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003818:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800381a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800381e:	0e1b      	lsrs	r3, r3, #24
 8003820:	f003 030f 	and.w	r3, r3, #15
 8003824:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003826:	4b2f      	ldr	r3, [pc, #188]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382c:	0f1b      	lsrs	r3, r3, #28
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	019a      	lsls	r2, r3, #6
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	041b      	lsls	r3, r3, #16
 8003840:	431a      	orrs	r2, r3
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	061b      	lsls	r3, r3, #24
 8003846:	431a      	orrs	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	071b      	lsls	r3, r3, #28
 800384c:	4925      	ldr	r1, [pc, #148]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d011      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	019a      	lsls	r2, r3, #6
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	041b      	lsls	r3, r3, #16
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	061b      	lsls	r3, r3, #24
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	071b      	lsls	r3, r3, #28
 800387c:	4919      	ldr	r1, [pc, #100]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003884:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a16      	ldr	r2, [pc, #88]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800388a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800388e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003890:	f7fd ff6c 	bl	800176c <HAL_GetTick>
 8003894:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003898:	f7fd ff68 	bl	800176c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	; 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e0d7      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	f040 80cd 	bne.w	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a08      	ldr	r2, [pc, #32]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ca:	f7fd ff4f 	bl	800176c <HAL_GetTick>
 80038ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038d0:	e00a      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038d2:	f7fd ff4b 	bl	800176c <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b64      	cmp	r3, #100	; 0x64
 80038de:	d903      	bls.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e0ba      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80038e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038e8:	4b5e      	ldr	r3, [pc, #376]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038f4:	d0ed      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d009      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003912:	2b00      	cmp	r3, #0
 8003914:	d02e      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d12a      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800391e:	4b51      	ldr	r3, [pc, #324]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800392c:	4b4d      	ldr	r3, [pc, #308]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003932:	0f1b      	lsrs	r3, r3, #28
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	019a      	lsls	r2, r3, #6
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	041b      	lsls	r3, r3, #16
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	061b      	lsls	r3, r3, #24
 800394c:	431a      	orrs	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	071b      	lsls	r3, r3, #28
 8003952:	4944      	ldr	r1, [pc, #272]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800395a:	4b42      	ldr	r3, [pc, #264]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800395c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003960:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	3b01      	subs	r3, #1
 800396a:	021b      	lsls	r3, r3, #8
 800396c:	493d      	ldr	r1, [pc, #244]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d022      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003988:	d11d      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800398a:	4b36      	ldr	r3, [pc, #216]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003990:	0e1b      	lsrs	r3, r3, #24
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003998:	4b32      	ldr	r3, [pc, #200]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399e:	0f1b      	lsrs	r3, r3, #28
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	019a      	lsls	r2, r3, #6
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	041b      	lsls	r3, r3, #16
 80039b2:	431a      	orrs	r2, r3
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	061b      	lsls	r3, r3, #24
 80039b8:	431a      	orrs	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	071b      	lsls	r3, r3, #28
 80039be:	4929      	ldr	r1, [pc, #164]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d028      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039d2:	4b24      	ldr	r3, [pc, #144]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d8:	0e1b      	lsrs	r3, r3, #24
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039e0:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	0c1b      	lsrs	r3, r3, #16
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	019a      	lsls	r2, r3, #6
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	041b      	lsls	r3, r3, #16
 80039f8:	431a      	orrs	r2, r3
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	061b      	lsls	r3, r3, #24
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	071b      	lsls	r3, r3, #28
 8003a06:	4917      	ldr	r1, [pc, #92]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a0e:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	4911      	ldr	r1, [pc, #68]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a24:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a0e      	ldr	r2, [pc, #56]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a30:	f7fd fe9c 	bl	800176c <HAL_GetTick>
 8003a34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a38:	f7fd fe98 	bl	800176c <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	; 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e007      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a4a:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a56:	d1ef      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3720      	adds	r7, #32
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800

08003a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e01d      	b.n	8003ab6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fd fc2c 	bl	80012ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f000 fa0a 	bl	8003ec0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d122      	bne.n	8003b1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d11b      	bne.n	8003b1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f06f 0202 	mvn.w	r2, #2
 8003aea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f9bf 	bl	8003e84 <HAL_TIM_IC_CaptureCallback>
 8003b06:	e005      	b.n	8003b14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f9b1 	bl	8003e70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f9c2 	bl	8003e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d122      	bne.n	8003b6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d11b      	bne.n	8003b6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f06f 0204 	mvn.w	r2, #4
 8003b3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f995 	bl	8003e84 <HAL_TIM_IC_CaptureCallback>
 8003b5a:	e005      	b.n	8003b68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f987 	bl	8003e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f998 	bl	8003e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d122      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d11b      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f06f 0208 	mvn.w	r2, #8
 8003b92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2204      	movs	r2, #4
 8003b98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f96b 	bl	8003e84 <HAL_TIM_IC_CaptureCallback>
 8003bae:	e005      	b.n	8003bbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f95d 	bl	8003e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f96e 	bl	8003e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b10      	cmp	r3, #16
 8003bce:	d122      	bne.n	8003c16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b10      	cmp	r3, #16
 8003bdc:	d11b      	bne.n	8003c16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f06f 0210 	mvn.w	r2, #16
 8003be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2208      	movs	r2, #8
 8003bec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f941 	bl	8003e84 <HAL_TIM_IC_CaptureCallback>
 8003c02:	e005      	b.n	8003c10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f933 	bl	8003e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f944 	bl	8003e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d10e      	bne.n	8003c42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d107      	bne.n	8003c42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f06f 0201 	mvn.w	r2, #1
 8003c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7fc fc63 	bl	8000508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4c:	2b80      	cmp	r3, #128	; 0x80
 8003c4e:	d10e      	bne.n	8003c6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5a:	2b80      	cmp	r3, #128	; 0x80
 8003c5c:	d107      	bne.n	8003c6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fac9 	bl	8004200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c7c:	d10e      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c88:	2b80      	cmp	r3, #128	; 0x80
 8003c8a:	d107      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fabc 	bl	8004214 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca6:	2b40      	cmp	r3, #64	; 0x40
 8003ca8:	d10e      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb4:	2b40      	cmp	r3, #64	; 0x40
 8003cb6:	d107      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f8f2 	bl	8003eac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d10e      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	d107      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 0220 	mvn.w	r2, #32
 8003cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fa7c 	bl	80041ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cf4:	bf00      	nop
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_TIM_ConfigClockSource+0x18>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e0a6      	b.n	8003e62 <HAL_TIM_ConfigClockSource+0x166>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4b4f      	ldr	r3, [pc, #316]	; (8003e6c <HAL_TIM_ConfigClockSource+0x170>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b40      	cmp	r3, #64	; 0x40
 8003d4a:	d067      	beq.n	8003e1c <HAL_TIM_ConfigClockSource+0x120>
 8003d4c:	2b40      	cmp	r3, #64	; 0x40
 8003d4e:	d80b      	bhi.n	8003d68 <HAL_TIM_ConfigClockSource+0x6c>
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d073      	beq.n	8003e3c <HAL_TIM_ConfigClockSource+0x140>
 8003d54:	2b10      	cmp	r3, #16
 8003d56:	d802      	bhi.n	8003d5e <HAL_TIM_ConfigClockSource+0x62>
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d06f      	beq.n	8003e3c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d5c:	e078      	b.n	8003e50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d06c      	beq.n	8003e3c <HAL_TIM_ConfigClockSource+0x140>
 8003d62:	2b30      	cmp	r3, #48	; 0x30
 8003d64:	d06a      	beq.n	8003e3c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d66:	e073      	b.n	8003e50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d68:	2b70      	cmp	r3, #112	; 0x70
 8003d6a:	d00d      	beq.n	8003d88 <HAL_TIM_ConfigClockSource+0x8c>
 8003d6c:	2b70      	cmp	r3, #112	; 0x70
 8003d6e:	d804      	bhi.n	8003d7a <HAL_TIM_ConfigClockSource+0x7e>
 8003d70:	2b50      	cmp	r3, #80	; 0x50
 8003d72:	d033      	beq.n	8003ddc <HAL_TIM_ConfigClockSource+0xe0>
 8003d74:	2b60      	cmp	r3, #96	; 0x60
 8003d76:	d041      	beq.n	8003dfc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d78:	e06a      	b.n	8003e50 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d7e:	d066      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0x152>
 8003d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d84:	d017      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d86:	e063      	b.n	8003e50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6818      	ldr	r0, [r3, #0]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	6899      	ldr	r1, [r3, #8]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f000 f9ac 	bl	80040f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003daa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	609a      	str	r2, [r3, #8]
      break;
 8003db4:	e04c      	b.n	8003e50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6899      	ldr	r1, [r3, #8]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f000 f995 	bl	80040f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dd8:	609a      	str	r2, [r3, #8]
      break;
 8003dda:	e039      	b.n	8003e50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	6859      	ldr	r1, [r3, #4]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	461a      	mov	r2, r3
 8003dea:	f000 f909 	bl	8004000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2150      	movs	r1, #80	; 0x50
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 f962 	bl	80040be <TIM_ITRx_SetConfig>
      break;
 8003dfa:	e029      	b.n	8003e50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	6859      	ldr	r1, [r3, #4]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f000 f928 	bl	800405e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2160      	movs	r1, #96	; 0x60
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 f952 	bl	80040be <TIM_ITRx_SetConfig>
      break;
 8003e1a:	e019      	b.n	8003e50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	6859      	ldr	r1, [r3, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f000 f8e9 	bl	8004000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2140      	movs	r1, #64	; 0x40
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 f942 	bl	80040be <TIM_ITRx_SetConfig>
      break;
 8003e3a:	e009      	b.n	8003e50 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4619      	mov	r1, r3
 8003e46:	4610      	mov	r0, r2
 8003e48:	f000 f939 	bl	80040be <TIM_ITRx_SetConfig>
      break;
 8003e4c:	e000      	b.n	8003e50 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	fffeff88 	.word	0xfffeff88

08003e70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a40      	ldr	r2, [pc, #256]	; (8003fd4 <TIM_Base_SetConfig+0x114>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d013      	beq.n	8003f00 <TIM_Base_SetConfig+0x40>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ede:	d00f      	beq.n	8003f00 <TIM_Base_SetConfig+0x40>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a3d      	ldr	r2, [pc, #244]	; (8003fd8 <TIM_Base_SetConfig+0x118>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00b      	beq.n	8003f00 <TIM_Base_SetConfig+0x40>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a3c      	ldr	r2, [pc, #240]	; (8003fdc <TIM_Base_SetConfig+0x11c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d007      	beq.n	8003f00 <TIM_Base_SetConfig+0x40>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a3b      	ldr	r2, [pc, #236]	; (8003fe0 <TIM_Base_SetConfig+0x120>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <TIM_Base_SetConfig+0x40>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a3a      	ldr	r2, [pc, #232]	; (8003fe4 <TIM_Base_SetConfig+0x124>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d108      	bne.n	8003f12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a2f      	ldr	r2, [pc, #188]	; (8003fd4 <TIM_Base_SetConfig+0x114>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d02b      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f20:	d027      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a2c      	ldr	r2, [pc, #176]	; (8003fd8 <TIM_Base_SetConfig+0x118>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d023      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a2b      	ldr	r2, [pc, #172]	; (8003fdc <TIM_Base_SetConfig+0x11c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d01f      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a2a      	ldr	r2, [pc, #168]	; (8003fe0 <TIM_Base_SetConfig+0x120>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01b      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a29      	ldr	r2, [pc, #164]	; (8003fe4 <TIM_Base_SetConfig+0x124>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d017      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a28      	ldr	r2, [pc, #160]	; (8003fe8 <TIM_Base_SetConfig+0x128>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d013      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a27      	ldr	r2, [pc, #156]	; (8003fec <TIM_Base_SetConfig+0x12c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00f      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a26      	ldr	r2, [pc, #152]	; (8003ff0 <TIM_Base_SetConfig+0x130>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00b      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a25      	ldr	r2, [pc, #148]	; (8003ff4 <TIM_Base_SetConfig+0x134>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d007      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a24      	ldr	r2, [pc, #144]	; (8003ff8 <TIM_Base_SetConfig+0x138>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d003      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a23      	ldr	r2, [pc, #140]	; (8003ffc <TIM_Base_SetConfig+0x13c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d108      	bne.n	8003f84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a0a      	ldr	r2, [pc, #40]	; (8003fd4 <TIM_Base_SetConfig+0x114>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d003      	beq.n	8003fb8 <TIM_Base_SetConfig+0xf8>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a0c      	ldr	r2, [pc, #48]	; (8003fe4 <TIM_Base_SetConfig+0x124>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d103      	bne.n	8003fc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	615a      	str	r2, [r3, #20]
}
 8003fc6:	bf00      	nop
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40010000 	.word	0x40010000
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	40000800 	.word	0x40000800
 8003fe0:	40000c00 	.word	0x40000c00
 8003fe4:	40010400 	.word	0x40010400
 8003fe8:	40014000 	.word	0x40014000
 8003fec:	40014400 	.word	0x40014400
 8003ff0:	40014800 	.word	0x40014800
 8003ff4:	40001800 	.word	0x40001800
 8003ff8:	40001c00 	.word	0x40001c00
 8003ffc:	40002000 	.word	0x40002000

08004000 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f023 0201 	bic.w	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800402a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f023 030a 	bic.w	r3, r3, #10
 800403c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4313      	orrs	r3, r2
 8004044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	621a      	str	r2, [r3, #32]
}
 8004052:	bf00      	nop
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800405e:	b480      	push	{r7}
 8004060:	b087      	sub	sp, #28
 8004062:	af00      	add	r7, sp, #0
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f023 0210 	bic.w	r2, r3, #16
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004088:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	031b      	lsls	r3, r3, #12
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800409a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	621a      	str	r2, [r3, #32]
}
 80040b2:	bf00      	nop
 80040b4:	371c      	adds	r7, #28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040be:	b480      	push	{r7}
 80040c0:	b085      	sub	sp, #20
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	f043 0307 	orr.w	r3, r3, #7
 80040e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	609a      	str	r2, [r3, #8]
}
 80040e8:	bf00      	nop
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800410e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	021a      	lsls	r2, r3, #8
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	431a      	orrs	r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4313      	orrs	r3, r2
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	609a      	str	r2, [r3, #8]
}
 8004128:	bf00      	nop
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004148:	2302      	movs	r3, #2
 800414a:	e045      	b.n	80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a1c      	ldr	r2, [pc, #112]	; (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a1b      	ldr	r2, [pc, #108]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d108      	bne.n	8004192 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004186:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004198:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041aa:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	40010000 	.word	0x40010000
 80041e8:	40010400 	.word	0x40010400

080041ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e040      	b.n	80042bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fd f946 	bl	80014dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2224      	movs	r2, #36	; 0x24
 8004254:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f82c 	bl	80042c4 <UART_SetConfig>
 800426c:	4603      	mov	r3, r0
 800426e:	2b01      	cmp	r3, #1
 8004270:	d101      	bne.n	8004276 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e022      	b.n	80042bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fac4 	bl	800480c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004292:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042a2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fb4b 	bl	8004950 <UART_CheckIdleState>
 80042ba:	4603      	mov	r3, r0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	4bb1      	ldr	r3, [pc, #708]	; (80045b8 <UART_SetConfig+0x2f4>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	6939      	ldr	r1, [r7, #16]
 80042fc:	430b      	orrs	r3, r1
 80042fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	430a      	orrs	r2, r1
 8004338:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a9f      	ldr	r2, [pc, #636]	; (80045bc <UART_SetConfig+0x2f8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d121      	bne.n	8004388 <UART_SetConfig+0xc4>
 8004344:	4b9e      	ldr	r3, [pc, #632]	; (80045c0 <UART_SetConfig+0x2fc>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	2b03      	cmp	r3, #3
 8004350:	d816      	bhi.n	8004380 <UART_SetConfig+0xbc>
 8004352:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <UART_SetConfig+0x94>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	08004369 	.word	0x08004369
 800435c:	08004375 	.word	0x08004375
 8004360:	0800436f 	.word	0x0800436f
 8004364:	0800437b 	.word	0x0800437b
 8004368:	2301      	movs	r3, #1
 800436a:	77fb      	strb	r3, [r7, #31]
 800436c:	e151      	b.n	8004612 <UART_SetConfig+0x34e>
 800436e:	2302      	movs	r3, #2
 8004370:	77fb      	strb	r3, [r7, #31]
 8004372:	e14e      	b.n	8004612 <UART_SetConfig+0x34e>
 8004374:	2304      	movs	r3, #4
 8004376:	77fb      	strb	r3, [r7, #31]
 8004378:	e14b      	b.n	8004612 <UART_SetConfig+0x34e>
 800437a:	2308      	movs	r3, #8
 800437c:	77fb      	strb	r3, [r7, #31]
 800437e:	e148      	b.n	8004612 <UART_SetConfig+0x34e>
 8004380:	2310      	movs	r3, #16
 8004382:	77fb      	strb	r3, [r7, #31]
 8004384:	bf00      	nop
 8004386:	e144      	b.n	8004612 <UART_SetConfig+0x34e>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a8d      	ldr	r2, [pc, #564]	; (80045c4 <UART_SetConfig+0x300>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d134      	bne.n	80043fc <UART_SetConfig+0x138>
 8004392:	4b8b      	ldr	r3, [pc, #556]	; (80045c0 <UART_SetConfig+0x2fc>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004398:	f003 030c 	and.w	r3, r3, #12
 800439c:	2b0c      	cmp	r3, #12
 800439e:	d829      	bhi.n	80043f4 <UART_SetConfig+0x130>
 80043a0:	a201      	add	r2, pc, #4	; (adr r2, 80043a8 <UART_SetConfig+0xe4>)
 80043a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a6:	bf00      	nop
 80043a8:	080043dd 	.word	0x080043dd
 80043ac:	080043f5 	.word	0x080043f5
 80043b0:	080043f5 	.word	0x080043f5
 80043b4:	080043f5 	.word	0x080043f5
 80043b8:	080043e9 	.word	0x080043e9
 80043bc:	080043f5 	.word	0x080043f5
 80043c0:	080043f5 	.word	0x080043f5
 80043c4:	080043f5 	.word	0x080043f5
 80043c8:	080043e3 	.word	0x080043e3
 80043cc:	080043f5 	.word	0x080043f5
 80043d0:	080043f5 	.word	0x080043f5
 80043d4:	080043f5 	.word	0x080043f5
 80043d8:	080043ef 	.word	0x080043ef
 80043dc:	2300      	movs	r3, #0
 80043de:	77fb      	strb	r3, [r7, #31]
 80043e0:	e117      	b.n	8004612 <UART_SetConfig+0x34e>
 80043e2:	2302      	movs	r3, #2
 80043e4:	77fb      	strb	r3, [r7, #31]
 80043e6:	e114      	b.n	8004612 <UART_SetConfig+0x34e>
 80043e8:	2304      	movs	r3, #4
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	e111      	b.n	8004612 <UART_SetConfig+0x34e>
 80043ee:	2308      	movs	r3, #8
 80043f0:	77fb      	strb	r3, [r7, #31]
 80043f2:	e10e      	b.n	8004612 <UART_SetConfig+0x34e>
 80043f4:	2310      	movs	r3, #16
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	bf00      	nop
 80043fa:	e10a      	b.n	8004612 <UART_SetConfig+0x34e>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a71      	ldr	r2, [pc, #452]	; (80045c8 <UART_SetConfig+0x304>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d120      	bne.n	8004448 <UART_SetConfig+0x184>
 8004406:	4b6e      	ldr	r3, [pc, #440]	; (80045c0 <UART_SetConfig+0x2fc>)
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004410:	2b10      	cmp	r3, #16
 8004412:	d00f      	beq.n	8004434 <UART_SetConfig+0x170>
 8004414:	2b10      	cmp	r3, #16
 8004416:	d802      	bhi.n	800441e <UART_SetConfig+0x15a>
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <UART_SetConfig+0x164>
 800441c:	e010      	b.n	8004440 <UART_SetConfig+0x17c>
 800441e:	2b20      	cmp	r3, #32
 8004420:	d005      	beq.n	800442e <UART_SetConfig+0x16a>
 8004422:	2b30      	cmp	r3, #48	; 0x30
 8004424:	d009      	beq.n	800443a <UART_SetConfig+0x176>
 8004426:	e00b      	b.n	8004440 <UART_SetConfig+0x17c>
 8004428:	2300      	movs	r3, #0
 800442a:	77fb      	strb	r3, [r7, #31]
 800442c:	e0f1      	b.n	8004612 <UART_SetConfig+0x34e>
 800442e:	2302      	movs	r3, #2
 8004430:	77fb      	strb	r3, [r7, #31]
 8004432:	e0ee      	b.n	8004612 <UART_SetConfig+0x34e>
 8004434:	2304      	movs	r3, #4
 8004436:	77fb      	strb	r3, [r7, #31]
 8004438:	e0eb      	b.n	8004612 <UART_SetConfig+0x34e>
 800443a:	2308      	movs	r3, #8
 800443c:	77fb      	strb	r3, [r7, #31]
 800443e:	e0e8      	b.n	8004612 <UART_SetConfig+0x34e>
 8004440:	2310      	movs	r3, #16
 8004442:	77fb      	strb	r3, [r7, #31]
 8004444:	bf00      	nop
 8004446:	e0e4      	b.n	8004612 <UART_SetConfig+0x34e>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a5f      	ldr	r2, [pc, #380]	; (80045cc <UART_SetConfig+0x308>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d120      	bne.n	8004494 <UART_SetConfig+0x1d0>
 8004452:	4b5b      	ldr	r3, [pc, #364]	; (80045c0 <UART_SetConfig+0x2fc>)
 8004454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004458:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800445c:	2b40      	cmp	r3, #64	; 0x40
 800445e:	d00f      	beq.n	8004480 <UART_SetConfig+0x1bc>
 8004460:	2b40      	cmp	r3, #64	; 0x40
 8004462:	d802      	bhi.n	800446a <UART_SetConfig+0x1a6>
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <UART_SetConfig+0x1b0>
 8004468:	e010      	b.n	800448c <UART_SetConfig+0x1c8>
 800446a:	2b80      	cmp	r3, #128	; 0x80
 800446c:	d005      	beq.n	800447a <UART_SetConfig+0x1b6>
 800446e:	2bc0      	cmp	r3, #192	; 0xc0
 8004470:	d009      	beq.n	8004486 <UART_SetConfig+0x1c2>
 8004472:	e00b      	b.n	800448c <UART_SetConfig+0x1c8>
 8004474:	2300      	movs	r3, #0
 8004476:	77fb      	strb	r3, [r7, #31]
 8004478:	e0cb      	b.n	8004612 <UART_SetConfig+0x34e>
 800447a:	2302      	movs	r3, #2
 800447c:	77fb      	strb	r3, [r7, #31]
 800447e:	e0c8      	b.n	8004612 <UART_SetConfig+0x34e>
 8004480:	2304      	movs	r3, #4
 8004482:	77fb      	strb	r3, [r7, #31]
 8004484:	e0c5      	b.n	8004612 <UART_SetConfig+0x34e>
 8004486:	2308      	movs	r3, #8
 8004488:	77fb      	strb	r3, [r7, #31]
 800448a:	e0c2      	b.n	8004612 <UART_SetConfig+0x34e>
 800448c:	2310      	movs	r3, #16
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	bf00      	nop
 8004492:	e0be      	b.n	8004612 <UART_SetConfig+0x34e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a4d      	ldr	r2, [pc, #308]	; (80045d0 <UART_SetConfig+0x30c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d124      	bne.n	80044e8 <UART_SetConfig+0x224>
 800449e:	4b48      	ldr	r3, [pc, #288]	; (80045c0 <UART_SetConfig+0x2fc>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ac:	d012      	beq.n	80044d4 <UART_SetConfig+0x210>
 80044ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b2:	d802      	bhi.n	80044ba <UART_SetConfig+0x1f6>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d007      	beq.n	80044c8 <UART_SetConfig+0x204>
 80044b8:	e012      	b.n	80044e0 <UART_SetConfig+0x21c>
 80044ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044be:	d006      	beq.n	80044ce <UART_SetConfig+0x20a>
 80044c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044c4:	d009      	beq.n	80044da <UART_SetConfig+0x216>
 80044c6:	e00b      	b.n	80044e0 <UART_SetConfig+0x21c>
 80044c8:	2300      	movs	r3, #0
 80044ca:	77fb      	strb	r3, [r7, #31]
 80044cc:	e0a1      	b.n	8004612 <UART_SetConfig+0x34e>
 80044ce:	2302      	movs	r3, #2
 80044d0:	77fb      	strb	r3, [r7, #31]
 80044d2:	e09e      	b.n	8004612 <UART_SetConfig+0x34e>
 80044d4:	2304      	movs	r3, #4
 80044d6:	77fb      	strb	r3, [r7, #31]
 80044d8:	e09b      	b.n	8004612 <UART_SetConfig+0x34e>
 80044da:	2308      	movs	r3, #8
 80044dc:	77fb      	strb	r3, [r7, #31]
 80044de:	e098      	b.n	8004612 <UART_SetConfig+0x34e>
 80044e0:	2310      	movs	r3, #16
 80044e2:	77fb      	strb	r3, [r7, #31]
 80044e4:	bf00      	nop
 80044e6:	e094      	b.n	8004612 <UART_SetConfig+0x34e>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a39      	ldr	r2, [pc, #228]	; (80045d4 <UART_SetConfig+0x310>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d124      	bne.n	800453c <UART_SetConfig+0x278>
 80044f2:	4b33      	ldr	r3, [pc, #204]	; (80045c0 <UART_SetConfig+0x2fc>)
 80044f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004500:	d012      	beq.n	8004528 <UART_SetConfig+0x264>
 8004502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004506:	d802      	bhi.n	800450e <UART_SetConfig+0x24a>
 8004508:	2b00      	cmp	r3, #0
 800450a:	d007      	beq.n	800451c <UART_SetConfig+0x258>
 800450c:	e012      	b.n	8004534 <UART_SetConfig+0x270>
 800450e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004512:	d006      	beq.n	8004522 <UART_SetConfig+0x25e>
 8004514:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004518:	d009      	beq.n	800452e <UART_SetConfig+0x26a>
 800451a:	e00b      	b.n	8004534 <UART_SetConfig+0x270>
 800451c:	2301      	movs	r3, #1
 800451e:	77fb      	strb	r3, [r7, #31]
 8004520:	e077      	b.n	8004612 <UART_SetConfig+0x34e>
 8004522:	2302      	movs	r3, #2
 8004524:	77fb      	strb	r3, [r7, #31]
 8004526:	e074      	b.n	8004612 <UART_SetConfig+0x34e>
 8004528:	2304      	movs	r3, #4
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	e071      	b.n	8004612 <UART_SetConfig+0x34e>
 800452e:	2308      	movs	r3, #8
 8004530:	77fb      	strb	r3, [r7, #31]
 8004532:	e06e      	b.n	8004612 <UART_SetConfig+0x34e>
 8004534:	2310      	movs	r3, #16
 8004536:	77fb      	strb	r3, [r7, #31]
 8004538:	bf00      	nop
 800453a:	e06a      	b.n	8004612 <UART_SetConfig+0x34e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a25      	ldr	r2, [pc, #148]	; (80045d8 <UART_SetConfig+0x314>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d124      	bne.n	8004590 <UART_SetConfig+0x2cc>
 8004546:	4b1e      	ldr	r3, [pc, #120]	; (80045c0 <UART_SetConfig+0x2fc>)
 8004548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004554:	d012      	beq.n	800457c <UART_SetConfig+0x2b8>
 8004556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455a:	d802      	bhi.n	8004562 <UART_SetConfig+0x29e>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <UART_SetConfig+0x2ac>
 8004560:	e012      	b.n	8004588 <UART_SetConfig+0x2c4>
 8004562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004566:	d006      	beq.n	8004576 <UART_SetConfig+0x2b2>
 8004568:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800456c:	d009      	beq.n	8004582 <UART_SetConfig+0x2be>
 800456e:	e00b      	b.n	8004588 <UART_SetConfig+0x2c4>
 8004570:	2300      	movs	r3, #0
 8004572:	77fb      	strb	r3, [r7, #31]
 8004574:	e04d      	b.n	8004612 <UART_SetConfig+0x34e>
 8004576:	2302      	movs	r3, #2
 8004578:	77fb      	strb	r3, [r7, #31]
 800457a:	e04a      	b.n	8004612 <UART_SetConfig+0x34e>
 800457c:	2304      	movs	r3, #4
 800457e:	77fb      	strb	r3, [r7, #31]
 8004580:	e047      	b.n	8004612 <UART_SetConfig+0x34e>
 8004582:	2308      	movs	r3, #8
 8004584:	77fb      	strb	r3, [r7, #31]
 8004586:	e044      	b.n	8004612 <UART_SetConfig+0x34e>
 8004588:	2310      	movs	r3, #16
 800458a:	77fb      	strb	r3, [r7, #31]
 800458c:	bf00      	nop
 800458e:	e040      	b.n	8004612 <UART_SetConfig+0x34e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a11      	ldr	r2, [pc, #68]	; (80045dc <UART_SetConfig+0x318>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d139      	bne.n	800460e <UART_SetConfig+0x34a>
 800459a:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <UART_SetConfig+0x2fc>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80045a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045a8:	d027      	beq.n	80045fa <UART_SetConfig+0x336>
 80045aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045ae:	d817      	bhi.n	80045e0 <UART_SetConfig+0x31c>
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01c      	beq.n	80045ee <UART_SetConfig+0x32a>
 80045b4:	e027      	b.n	8004606 <UART_SetConfig+0x342>
 80045b6:	bf00      	nop
 80045b8:	efff69f3 	.word	0xefff69f3
 80045bc:	40011000 	.word	0x40011000
 80045c0:	40023800 	.word	0x40023800
 80045c4:	40004400 	.word	0x40004400
 80045c8:	40004800 	.word	0x40004800
 80045cc:	40004c00 	.word	0x40004c00
 80045d0:	40005000 	.word	0x40005000
 80045d4:	40011400 	.word	0x40011400
 80045d8:	40007800 	.word	0x40007800
 80045dc:	40007c00 	.word	0x40007c00
 80045e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e4:	d006      	beq.n	80045f4 <UART_SetConfig+0x330>
 80045e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80045ea:	d009      	beq.n	8004600 <UART_SetConfig+0x33c>
 80045ec:	e00b      	b.n	8004606 <UART_SetConfig+0x342>
 80045ee:	2300      	movs	r3, #0
 80045f0:	77fb      	strb	r3, [r7, #31]
 80045f2:	e00e      	b.n	8004612 <UART_SetConfig+0x34e>
 80045f4:	2302      	movs	r3, #2
 80045f6:	77fb      	strb	r3, [r7, #31]
 80045f8:	e00b      	b.n	8004612 <UART_SetConfig+0x34e>
 80045fa:	2304      	movs	r3, #4
 80045fc:	77fb      	strb	r3, [r7, #31]
 80045fe:	e008      	b.n	8004612 <UART_SetConfig+0x34e>
 8004600:	2308      	movs	r3, #8
 8004602:	77fb      	strb	r3, [r7, #31]
 8004604:	e005      	b.n	8004612 <UART_SetConfig+0x34e>
 8004606:	2310      	movs	r3, #16
 8004608:	77fb      	strb	r3, [r7, #31]
 800460a:	bf00      	nop
 800460c:	e001      	b.n	8004612 <UART_SetConfig+0x34e>
 800460e:	2310      	movs	r3, #16
 8004610:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800461a:	d17c      	bne.n	8004716 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800461c:	7ffb      	ldrb	r3, [r7, #31]
 800461e:	2b08      	cmp	r3, #8
 8004620:	d859      	bhi.n	80046d6 <UART_SetConfig+0x412>
 8004622:	a201      	add	r2, pc, #4	; (adr r2, 8004628 <UART_SetConfig+0x364>)
 8004624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004628:	0800464d 	.word	0x0800464d
 800462c:	0800466b 	.word	0x0800466b
 8004630:	08004689 	.word	0x08004689
 8004634:	080046d7 	.word	0x080046d7
 8004638:	080046a1 	.word	0x080046a1
 800463c:	080046d7 	.word	0x080046d7
 8004640:	080046d7 	.word	0x080046d7
 8004644:	080046d7 	.word	0x080046d7
 8004648:	080046bf 	.word	0x080046bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800464c:	f7fe fdf6 	bl	800323c <HAL_RCC_GetPCLK1Freq>
 8004650:	4603      	mov	r3, r0
 8004652:	005a      	lsls	r2, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	085b      	lsrs	r3, r3, #1
 800465a:	441a      	add	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	b29b      	uxth	r3, r3
 8004666:	61bb      	str	r3, [r7, #24]
        break;
 8004668:	e038      	b.n	80046dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800466a:	f7fe fdfb 	bl	8003264 <HAL_RCC_GetPCLK2Freq>
 800466e:	4603      	mov	r3, r0
 8004670:	005a      	lsls	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	085b      	lsrs	r3, r3, #1
 8004678:	441a      	add	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004682:	b29b      	uxth	r3, r3
 8004684:	61bb      	str	r3, [r7, #24]
        break;
 8004686:	e029      	b.n	80046dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	085a      	lsrs	r2, r3, #1
 800468e:	4b5d      	ldr	r3, [pc, #372]	; (8004804 <UART_SetConfig+0x540>)
 8004690:	4413      	add	r3, r2
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6852      	ldr	r2, [r2, #4]
 8004696:	fbb3 f3f2 	udiv	r3, r3, r2
 800469a:	b29b      	uxth	r3, r3
 800469c:	61bb      	str	r3, [r7, #24]
        break;
 800469e:	e01d      	b.n	80046dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80046a0:	f7fe fce8 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 80046a4:	4603      	mov	r3, r0
 80046a6:	005a      	lsls	r2, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	085b      	lsrs	r3, r3, #1
 80046ae:	441a      	add	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	61bb      	str	r3, [r7, #24]
        break;
 80046bc:	e00e      	b.n	80046dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	085b      	lsrs	r3, r3, #1
 80046c4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	61bb      	str	r3, [r7, #24]
        break;
 80046d4:	e002      	b.n	80046dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	75fb      	strb	r3, [r7, #23]
        break;
 80046da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2b0f      	cmp	r3, #15
 80046e0:	d916      	bls.n	8004710 <UART_SetConfig+0x44c>
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e8:	d212      	bcs.n	8004710 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	f023 030f 	bic.w	r3, r3, #15
 80046f2:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	085b      	lsrs	r3, r3, #1
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	b29a      	uxth	r2, r3
 8004700:	89fb      	ldrh	r3, [r7, #14]
 8004702:	4313      	orrs	r3, r2
 8004704:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	89fa      	ldrh	r2, [r7, #14]
 800470c:	60da      	str	r2, [r3, #12]
 800470e:	e06e      	b.n	80047ee <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	75fb      	strb	r3, [r7, #23]
 8004714:	e06b      	b.n	80047ee <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8004716:	7ffb      	ldrb	r3, [r7, #31]
 8004718:	2b08      	cmp	r3, #8
 800471a:	d857      	bhi.n	80047cc <UART_SetConfig+0x508>
 800471c:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <UART_SetConfig+0x460>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	08004749 	.word	0x08004749
 8004728:	08004765 	.word	0x08004765
 800472c:	08004781 	.word	0x08004781
 8004730:	080047cd 	.word	0x080047cd
 8004734:	08004799 	.word	0x08004799
 8004738:	080047cd 	.word	0x080047cd
 800473c:	080047cd 	.word	0x080047cd
 8004740:	080047cd 	.word	0x080047cd
 8004744:	080047b5 	.word	0x080047b5
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004748:	f7fe fd78 	bl	800323c <HAL_RCC_GetPCLK1Freq>
 800474c:	4602      	mov	r2, r0
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	085b      	lsrs	r3, r3, #1
 8004754:	441a      	add	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	fbb2 f3f3 	udiv	r3, r2, r3
 800475e:	b29b      	uxth	r3, r3
 8004760:	61bb      	str	r3, [r7, #24]
        break;
 8004762:	e036      	b.n	80047d2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004764:	f7fe fd7e 	bl	8003264 <HAL_RCC_GetPCLK2Freq>
 8004768:	4602      	mov	r2, r0
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	085b      	lsrs	r3, r3, #1
 8004770:	441a      	add	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	fbb2 f3f3 	udiv	r3, r2, r3
 800477a:	b29b      	uxth	r3, r3
 800477c:	61bb      	str	r3, [r7, #24]
        break;
 800477e:	e028      	b.n	80047d2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	085a      	lsrs	r2, r3, #1
 8004786:	4b20      	ldr	r3, [pc, #128]	; (8004808 <UART_SetConfig+0x544>)
 8004788:	4413      	add	r3, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6852      	ldr	r2, [r2, #4]
 800478e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004792:	b29b      	uxth	r3, r3
 8004794:	61bb      	str	r3, [r7, #24]
        break;
 8004796:	e01c      	b.n	80047d2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004798:	f7fe fc6c 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 800479c:	4602      	mov	r2, r0
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	085b      	lsrs	r3, r3, #1
 80047a4:	441a      	add	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	61bb      	str	r3, [r7, #24]
        break;
 80047b2:	e00e      	b.n	80047d2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	085b      	lsrs	r3, r3, #1
 80047ba:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	61bb      	str	r3, [r7, #24]
        break;
 80047ca:	e002      	b.n	80047d2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	75fb      	strb	r3, [r7, #23]
        break;
 80047d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	2b0f      	cmp	r3, #15
 80047d6:	d908      	bls.n	80047ea <UART_SetConfig+0x526>
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047de:	d204      	bcs.n	80047ea <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	60da      	str	r2, [r3, #12]
 80047e8:	e001      	b.n	80047ee <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80047fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3720      	adds	r7, #32
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	01e84800 	.word	0x01e84800
 8004808:	00f42400 	.word	0x00f42400

0800480c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	f003 0310 	and.w	r3, r3, #16
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01a      	beq.n	8004922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800490a:	d10a      	bne.n	8004922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	605a      	str	r2, [r3, #4]
  }
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af02      	add	r7, sp, #8
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800495e:	f7fc ff05 	bl	800176c <HAL_GetTick>
 8004962:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b08      	cmp	r3, #8
 8004970:	d10e      	bne.n	8004990 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004972:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f814 	bl	80049ae <UART_WaitOnFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e00a      	b.n	80049a6 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2220      	movs	r2, #32
 8004994:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	603b      	str	r3, [r7, #0]
 80049ba:	4613      	mov	r3, r2
 80049bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049be:	e02a      	b.n	8004a16 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c6:	d026      	beq.n	8004a16 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c8:	f7fc fed0 	bl	800176c <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d302      	bcc.n	80049de <UART_WaitOnFlagUntilTimeout+0x30>
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d11b      	bne.n	8004a16 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0201 	bic.w	r2, r2, #1
 80049fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2220      	movs	r2, #32
 8004a02:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e00f      	b.n	8004a36 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69da      	ldr	r2, [r3, #28]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	bf0c      	ite	eq
 8004a26:	2301      	moveq	r3, #1
 8004a28:	2300      	movne	r3, #0
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d0c5      	beq.n	80049c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a40:	b084      	sub	sp, #16
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	f107 001c 	add.w	r0, r7, #28
 8004a4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d120      	bne.n	8004a9a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	4b20      	ldr	r3, [pc, #128]	; (8004aec <USB_CoreInit+0xac>)
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d105      	bne.n	8004a8e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fa60 	bl	8004f54 <USB_CoreReset>
 8004a94:	4603      	mov	r3, r0
 8004a96:	73fb      	strb	r3, [r7, #15]
 8004a98:	e010      	b.n	8004abc <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fa54 	bl	8004f54 <USB_CoreReset>
 8004aac:	4603      	mov	r3, r0
 8004aae:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d10b      	bne.n	8004ada <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f043 0206 	orr.w	r2, r3, #6
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f043 0220 	orr.w	r2, r3, #32
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ae6:	b004      	add	sp, #16
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	ffbdffbf 	.word	0xffbdffbf

08004af0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f023 0201 	bic.w	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d106      	bne.n	8004b3e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	60da      	str	r2, [r3, #12]
 8004b3c:	e00b      	b.n	8004b56 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b3e:	78fb      	ldrb	r3, [r7, #3]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d106      	bne.n	8004b52 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	60da      	str	r2, [r3, #12]
 8004b50:	e001      	b.n	8004b56 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e003      	b.n	8004b5e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004b56:	2032      	movs	r0, #50	; 0x32
 8004b58:	f7fc fe14 	bl	8001784 <HAL_Delay>

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b68:	b084      	sub	sp, #16
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b086      	sub	sp, #24
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b82:	2300      	movs	r3, #0
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	e009      	b.n	8004b9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	3340      	adds	r3, #64	; 0x40
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	2200      	movs	r2, #0
 8004b94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b0e      	cmp	r3, #14
 8004ba0:	d9f2      	bls.n	8004b88 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d112      	bne.n	8004bce <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e005      	b.n	8004bda <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004be0:	461a      	mov	r2, r3
 8004be2:	2300      	movs	r3, #0
 8004be4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bec:	4619      	mov	r1, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	680b      	ldr	r3, [r1, #0]
 8004bf8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d10c      	bne.n	8004c1a <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d104      	bne.n	8004c10 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c06:	2100      	movs	r1, #0
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f971 	bl	8004ef0 <USB_SetDevSpeed>
 8004c0e:	e018      	b.n	8004c42 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c10:	2101      	movs	r1, #1
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f96c 	bl	8004ef0 <USB_SetDevSpeed>
 8004c18:	e013      	b.n	8004c42 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d10c      	bne.n	8004c3a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d104      	bne.n	8004c30 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c26:	2100      	movs	r1, #0
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f961 	bl	8004ef0 <USB_SetDevSpeed>
 8004c2e:	e008      	b.n	8004c42 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c30:	2101      	movs	r1, #1
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f95c 	bl	8004ef0 <USB_SetDevSpeed>
 8004c38:	e003      	b.n	8004c42 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c3a:	2103      	movs	r1, #3
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f957 	bl	8004ef0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c42:	2110      	movs	r1, #16
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f90b 	bl	8004e60 <USB_FlushTxFifo>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f929 	bl	8004eac <USB_FlushRxFifo>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c76:	461a      	mov	r2, r3
 8004c78:	2300      	movs	r3, #0
 8004c7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c82:	461a      	mov	r2, r3
 8004c84:	2300      	movs	r3, #0
 8004c86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c88:	2300      	movs	r3, #0
 8004c8a:	613b      	str	r3, [r7, #16]
 8004c8c:	e043      	b.n	8004d16 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ca0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ca4:	d118      	bne.n	8004cd8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10a      	bne.n	8004cc2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	e013      	b.n	8004cea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	e008      	b.n	8004cea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d08:	461a      	mov	r2, r3
 8004d0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	3301      	adds	r3, #1
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d3b7      	bcc.n	8004c8e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d1e:	2300      	movs	r3, #0
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	e043      	b.n	8004dac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d3a:	d118      	bne.n	8004d6e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10a      	bne.n	8004d58 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	e013      	b.n	8004d80 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d64:	461a      	mov	r2, r3
 8004d66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	e008      	b.n	8004d80 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	2300      	movs	r3, #0
 8004d90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004da4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	3301      	adds	r3, #1
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d3b7      	bcc.n	8004d24 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d110      	bne.n	8004df0 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4b1e      	ldr	r3, [pc, #120]	; (8004e50 <USB_DevInit+0x2e8>)
 8004dd8:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de8:	4619      	mov	r1, r3
 8004dea:	4b1a      	ldr	r3, [pc, #104]	; (8004e54 <USB_DevInit+0x2ec>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004dfc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d105      	bne.n	8004e10 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	f043 0210 	orr.w	r2, r3, #16
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699a      	ldr	r2, [r3, #24]
 8004e14:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <USB_DevInit+0x2f0>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f043 0208 	orr.w	r2, r3, #8
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d105      	bne.n	8004e40 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699a      	ldr	r2, [r3, #24]
 8004e38:	4b08      	ldr	r3, [pc, #32]	; (8004e5c <USB_DevInit+0x2f4>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e4c:	b004      	add	sp, #16
 8004e4e:	4770      	bx	lr
 8004e50:	00800100 	.word	0x00800100
 8004e54:	00010003 	.word	0x00010003
 8004e58:	803c3800 	.word	0x803c3800
 8004e5c:	40000004 	.word	0x40000004

08004e60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	019b      	lsls	r3, r3, #6
 8004e72:	f043 0220 	orr.w	r2, r3, #32
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4a09      	ldr	r2, [pc, #36]	; (8004ea8 <USB_FlushTxFifo+0x48>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d901      	bls.n	8004e8c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e006      	b.n	8004e9a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d0f0      	beq.n	8004e7a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	00030d40 	.word	0x00030d40

08004eac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2210      	movs	r2, #16
 8004ebc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4a09      	ldr	r2, [pc, #36]	; (8004eec <USB_FlushRxFifo+0x40>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e006      	b.n	8004ede <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	2b10      	cmp	r3, #16
 8004eda:	d0f0      	beq.n	8004ebe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	00030d40 	.word	0x00030d40

08004ef0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	78fb      	ldrb	r3, [r7, #3]
 8004f0a:	68f9      	ldr	r1, [r7, #12]
 8004f0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f10:	4313      	orrs	r3, r2
 8004f12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b084      	sub	sp, #16
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f3c:	f043 0302 	orr.w	r3, r3, #2
 8004f40:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004f42:	2003      	movs	r0, #3
 8004f44:	f7fc fc1e 	bl	8001784 <HAL_Delay>

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3301      	adds	r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4a13      	ldr	r2, [pc, #76]	; (8004fb8 <USB_CoreReset+0x64>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d901      	bls.n	8004f72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e01b      	b.n	8004faa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	daf2      	bge.n	8004f60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f043 0201 	orr.w	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4a09      	ldr	r2, [pc, #36]	; (8004fb8 <USB_CoreReset+0x64>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d901      	bls.n	8004f9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e006      	b.n	8004faa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d0f0      	beq.n	8004f8a <USB_CoreReset+0x36>

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	00030d40 	.word	0x00030d40

08004fbc <__libc_init_array>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	4e0d      	ldr	r6, [pc, #52]	; (8004ff4 <__libc_init_array+0x38>)
 8004fc0:	4c0d      	ldr	r4, [pc, #52]	; (8004ff8 <__libc_init_array+0x3c>)
 8004fc2:	1ba4      	subs	r4, r4, r6
 8004fc4:	10a4      	asrs	r4, r4, #2
 8004fc6:	2500      	movs	r5, #0
 8004fc8:	42a5      	cmp	r5, r4
 8004fca:	d109      	bne.n	8004fe0 <__libc_init_array+0x24>
 8004fcc:	4e0b      	ldr	r6, [pc, #44]	; (8004ffc <__libc_init_array+0x40>)
 8004fce:	4c0c      	ldr	r4, [pc, #48]	; (8005000 <__libc_init_array+0x44>)
 8004fd0:	f000 f820 	bl	8005014 <_init>
 8004fd4:	1ba4      	subs	r4, r4, r6
 8004fd6:	10a4      	asrs	r4, r4, #2
 8004fd8:	2500      	movs	r5, #0
 8004fda:	42a5      	cmp	r5, r4
 8004fdc:	d105      	bne.n	8004fea <__libc_init_array+0x2e>
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fe4:	4798      	blx	r3
 8004fe6:	3501      	adds	r5, #1
 8004fe8:	e7ee      	b.n	8004fc8 <__libc_init_array+0xc>
 8004fea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fee:	4798      	blx	r3
 8004ff0:	3501      	adds	r5, #1
 8004ff2:	e7f2      	b.n	8004fda <__libc_init_array+0x1e>
 8004ff4:	0800504c 	.word	0x0800504c
 8004ff8:	0800504c 	.word	0x0800504c
 8004ffc:	0800504c 	.word	0x0800504c
 8005000:	08005050 	.word	0x08005050

08005004 <memset>:
 8005004:	4402      	add	r2, r0
 8005006:	4603      	mov	r3, r0
 8005008:	4293      	cmp	r3, r2
 800500a:	d100      	bne.n	800500e <memset+0xa>
 800500c:	4770      	bx	lr
 800500e:	f803 1b01 	strb.w	r1, [r3], #1
 8005012:	e7f9      	b.n	8005008 <memset+0x4>

08005014 <_init>:
 8005014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005016:	bf00      	nop
 8005018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501a:	bc08      	pop	{r3}
 800501c:	469e      	mov	lr, r3
 800501e:	4770      	bx	lr

08005020 <_fini>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	bf00      	nop
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr
